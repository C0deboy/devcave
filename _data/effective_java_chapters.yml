- chapter: Creating and Destroying Objects
  items:
    1: 'Item 1: Consider static factory methods instead of constructors'
    2: 'Item 2: Consider a builder when faced with many constructor parameters'
    3: 'Item 3: Enforce the singleton property with a private constructor or an enum type'
    4: 'Item 4: Enforce noninstantiability with a private constructor'
    5: 'Item 5: Prefer dependency injection to hardwiring resources'
    6: 'Item 6: Avoid creating unnecessary objects'
    7: 'Item 7: Eliminate obsolete object references'
    8: 'Item 8: Avoid finalizers and cleaners'
    9: 'Item 9: Prefer try-with-resources to try-finally'

- chapter: Methods Common to All Objects
  items:
    10: 'Item 10: Obey the general contract when overriding equals'
    11: 'Item 11: Always override hashCode when you override equals'
    12: 'Item 12: Always override toString'
    13: 'Item 13: Override clone judiciously'
    14: 'Item 14: Consider implementing Comparable'

- chapter: Classes and Interfaces
  items:
    15: 'Item 15: Minimize the accessibility of classes and members'
    16: 'Item 16: In public classes, use accessor methods, not public fields'
    17: 'Item 17: Minimize mutability'
    18: 'Item 18: Favor composition over inheritance'
    19: 'Item 19: Design and document for inheritance or else prohibit it'
    20: 'Item 20: Prefer interfaces to abstract classes'
    21: 'Item 21: Design interfaces for posterity | #domyślne-metody-w-interfejsach'
    22: 'Item 22: Use interfaces only to define types | #interfejs-tylko-jako-definicja-typu'
    23: 'Item 23: Prefer class hierarchies to tagged classes | #preferuj-hierarchię-klas-zamiast-otagowanych-klas'
    24: 'Item 24: Favor static member classes over nonstatic'
    25: 'Item 25: Limit source files to a single top-level class | #jedna-top-level-klasa-na-jeden-plik-źródłowy'

- chapter: Generics
  items:
    26: 'Item 26: Don’t use raw types'
    27: 'Item 27: Eliminate unchecked warnings'
    28: 'Item 28: Prefer lists to arrays'
    29: 'Item 29: Favor generic types'
    30: 'Item 30: Favor generic methods'
    31: 'Item 31: Use bounded wildcards to increase API flexibility'
    32: 'Item 32: Combine generics and varargs judiciously'

- chapter: Enums and Annotations
  items:
    34: 'Item 34: Use enums instead of int constants'
    35: 'Item 35: Use instance fields instead of ordinals'
    36: 'Item 36: Use EnumSet instead of bit fields'
    37: 'Item 37: Use EnumMap instead of ordinal indexing'
    38: 'Item 38: Emulate extensible enums with interfaces'
    39: 'Item 39: Prefer annotations to naming patterns'
    40: 'Item 40: Consistently use the Override annotation'
    41: 'Item 41: Use marker interfaces to define types'

- chapter: Lambdas and Streams
  items:
    42: 'Item 42: Prefer lambdas to anonymous classes'
    43: 'Item 43: Prefer method references to lambdas'
    44: 'Item 44: Favor the use of standard functional interfaces'
    45: 'Item 45: Use streams judiciously'
    46: 'Item 46: Prefer side-effect-free functions in streams'
    47: 'Item 47: Prefer Collection to Stream as a return type'
    48: 'Item 48: Use caution when making streams parallel'

- chapter: Methods
  items:
    49: 'Item 49: Check parameters for validity'
    50: 'Item 50: Make defensive copies when needed'
    51: 'Item 51: Design method signatures carefully'
    52: 'Item 52: Use overloading judiciously'
    53: 'Item 53: Use varargs judiciously'
    54: 'Item 54: Return empty collections or arrays, not nulls'
    55: 'Item 55: Return optionals judiciously'
    56: 'Item 56: Write doc comments for all exposed API elements'

- chapter: General Programming
  items:
    57: 'Item 57: Minimize the scope of local variables'
    58: 'Item 58: Prefer for-each loops to traditional for loops'
    59: 'Item 59: Know and use the libraries'
    60: 'Item 60: Avoid float and double if exact answers are required'
    61: 'Item 61: Prefer primitive types to boxed primitives'
    62: 'Item 62: Avoid strings where other types are more appropriate'
    63: 'Item 63: Beware the performance of string concatenation'
    64: 'Item 64: Refer to objects by their interfaces'
    65: 'Item 65: Prefer interfaces to reflection'
    66: 'Item 66: Use native methods judiciously'
    67: 'Item 67: Optimize judiciously'
    68: 'Item 68: Adhere to generally accepted naming conventions'

- chapter: Exceptions
  items:
    69: 'Item 69: Use exceptions only for exceptional conditions'
    70: 'Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors'
    71: 'Item 71: Avoid unnecessary use of checked exceptions'
    72: 'Item 72: Favor the use of standard exceptions'
    73: 'Item 73: Throw exceptions appropriate to the abstraction'
    74: 'Item 74: Document all exceptions thrown by each method'
    75: 'Item 75: Include failure-capture information in detail messages'
    76: 'Item 76: Strive for failure atomicity'
    77: 'Item 77: Don’t ignore exceptions'

- chapter: Concurrency
  items:
    78: 'Item 78: Synchronize access to shared mutable data'
    79: 'Item 79: Avoid excessive synchronization'
    80: 'Item 80: Prefer executors, tasks, and streams to threads'
    81: 'Item 81: Prefer concurrency utilities to wait and notify'
    82: 'Item 82: Document thread safety'
    83: 'Item 83: Use lazy initialization judiciously'
    84: 'Item 84: Don’t depend on the thread scheduler'

- chapter: Serialization
  items:
    85: 'Item 85: Prefer alternatives to Java serialization'
    86: 'Item 86: Implement Serializable with great caution'
    87: 'Item 87: Consider using a custom serialized form'
    88: 'Item 88: Write readObject methods defensively'
    89: 'Item 89: For instance control, prefer enum types to readResolve'
    90: 'Item 90: Consider serialization proxies instead of serialized instances'
