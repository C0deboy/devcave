- chapter: Creating and Destroying Objects
  items:
    1: 'Item 1: Consider static factory methods instead of constructors'
    2: 'Item 2: Consider a builder when faced with many constructor parameters'
    3: 'Item 3: Enforce the singleton property with a private constructor or an enum type'
    4: 'Item 4: Enforce noninstantiability with a private constructor'
    5: 'Item 5: Prefer dependency injection to hardwiring resources'
    6: 'Item 6: Avoid creating unnecessary objects'
    7: 'Item 7: Eliminate obsolete object references'
    8: 'Item 8: Avoid finalizers and cleaners'
    9: 'Item 9: Prefer try-with-resources to try-finally'

- chapter: Methods Common to All Objects
  items:
    10: 'Item 10: Obey the general contract when overriding equals'
    11: 'Item 11: Always override hashCode when you override equals'
    12: 'Item 12: Always override toString'
    13: 'Item 13: Override clone judiciously'
    14: 'Item 14: Consider implementing Comparable'

- chapter: Classes and Interfaces
  items:
    15: 'Item 15: Minimize the accessibility of classes and members'
    16: 'Item 16: In public classes, use accessor methods, not public fields'
    17: 'Item 17: Minimize mutability'
    18: 'Item 18: Favor composition over inheritance'
    19: 'Item 19: Design and document for inheritance or else prohibit it'
    20: 'Item 20: Prefer interfaces to abstract classes'
    21: 'Item 21: Design interfaces for posterity | #domyślne-metody-w-interfejsach'
    22: 'Item 22: Use interfaces only to define types | #interfejs-tylko-jako-definicja-typu'
    23: 'Item 23: Prefer class hierarchies to tagged classes | #preferuj-hierarchię-klas-zamiast-otagowanych-klas'
    24: 'Item 24: Favor static member classes over nonstatic'
    25: 'Item 25: Limit source files to a single top-level class | #jedna-top-level-klasa-na-jeden-plik-źródłowy'

- chapter: Generics
  items:
    26: 'Item 26: Don’t use raw types'
    27: 'Item 27: Eliminate unchecked warnings'
    28: 'Item 28: Prefer lists to arrays'
    29: 'Item 29: Favor generic types'
    30: 'Item 30: Favor generic methods'
    31: 'Item 31: Use bounded wildcards to increase API flexibility'
    32: 'Item 32: Combine generics and varargs judiciously'

- chapter: Enums and Annotations
  items:
    34: 'Use enums instead of int constants'
    35: 'Use instance fields instead of ordinals'
    36: 'Use EnumSet instead of bit fields'
    37: 'Use EnumMap instead of ordinal indexing'
    38: 'Emulate extensible enums with interfaces'
    39: 'Prefer annotations to naming patterns'
    40: 'Consistently use the Override annotation'
    41: 'Use marker interfaces to define types'

- chapter: Lambdas and Streams
  items:
    42: 'Prefer lambdas to anonymous classes'
    43: 'Prefer method references to lambdas'
    44: 'Favor the use of standard functional interfaces'
    45: 'Use streams judiciously'
    46: 'Prefer side-effect-free functions in streams'
    47: 'Prefer Collection to Stream as a return type'
    48: 'Use caution when making streams parallel'