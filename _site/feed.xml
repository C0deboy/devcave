<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="https://c0deboy.github.io/devcave/feed.xml" rel="self" type="application/atom+xml" /><link href="https://c0deboy.github.io/devcave/" rel="alternate" type="text/html" /><updated>2017-10-30T19:01:23+01:00</updated><id>https://c0deboy.github.io/devcave/</id><title type="html">devcave.pl</title><subtitle>Devcave - jaskinia programisty, blog programistyczny.</subtitle><entry><title type="html">Moja droga do pierwszej pracy</title><link href="https://c0deboy.github.io/devcave/moje-do%C5%9Bwiadczenia/moja-droga-do-pierwszej-pracy" rel="alternate" type="text/html" title="Moja droga do pierwszej pracy" /><published>2017-10-29T13:00:00+01:00</published><updated>2017-10-29T13:00:00+01:00</updated><id>https://c0deboy.github.io/devcave/moje-do%C5%9Bwiadczenia/moja-droga-do-pierwszej-pracy</id><content type="html" xml:base="https://c0deboy.github.io/devcave/moje-do%C5%9Bwiadczenia/moja-droga-do-pierwszej-pracy">&lt;p&gt;Minęło sporo czasu od ostatniego postu. Przez ten okres całkowicie poświęciłem się nauce Javy i jej technologii, aby jak najszybciej mieć szansę na dostanie pracy. I udało się! Chciałem się tym tutaj podzielić i przedstawić całą drogę od początku do końca.&lt;/p&gt;

&lt;h1 id=&quot;jak-zaczynałem&quot;&gt;Jak zaczynałem&lt;/h1&gt;

&lt;p&gt;Programowania zacząłem się uczyć (tak bardziej na poważnie, z myślą bycia programistą) gdzieś na początku 4 klasy technikum informatycznego (2016 rok). Wcześniej nie byłem jeszcze pewien, co chciałbym robić w przyszłości. Jak pewnie w większości techników, programowanie opierało się na programowaniu webowym wokół HTML, CSS i Javascript. Były to jednak takie podstawy, że praktycznie nie było możliwe napisanie czegoś konkretnego z taką wiedzą. O OOP to nawet nie słyszałem.  Dlatego zacząłem interesować się tym tematem i uczyć się na własną rękę. Wtedy trafiłem na kursy M. Zelenta, które były dla mnie po prostu idealne. Ponadto, dzięki nim dostałem tyle motywacji i tak mnie zachęciły do działania, że o niczym innym już nie myślałem i to właśnie z programowaniem chciałem wiązać przyszłość (trwa to do dziś). Jednak po jakimś czasie, okazało się, że wiedza wyniesiona z technikum (przynajmniej w moim wypadku) oraz częściowo z kursów okazała się stertą złych praktyk, o czym szybko się przekonałem dzięki zakładaniu wątków na &lt;a href=&quot;https://forum.pasja-informatyki.pl/&quot;&gt;Forum Pasja Informatyki&lt;/a&gt; z moimi projektami - pisanymi w celu nauki technologii webowych. Dzięki wielu osobom z forum, m.in. &lt;a href=&quot;https://forum.pasja-informatyki.pl/user/Krzycho92&quot;&gt;Krzycho92&lt;/a&gt;, &lt;a href=&quot;https://forum.pasja-informatyki.pl/user/argeento&quot;&gt;argeento&lt;/a&gt; oraz później &lt;a href=&quot;https://forum.pasja-informatyki.pl/user/Comandeer&quot;&gt;Comandeer&lt;/a&gt; i &lt;a href=&quot;https://forum.pasja-informatyki.pl/user/Ivan&quot;&gt;Ivan&lt;/a&gt;, wiele się nauczyłem i po części feedback z forum motywował mnie do dalszej pracy.&lt;/p&gt;

&lt;h1 id=&quot;moje-projekty&quot;&gt;Moje projekty&lt;/h1&gt;
&lt;p&gt;Zrobiłem &lt;a href=&quot;/moje-projekty/&quot;&gt;listę moich projektów&lt;/a&gt;, żeby chociażby mieć się z czego pośmiać za parę lat. Ale też z myślą, że ktoś zobaczy jak wygląda mniej więcej progres projektów i na jakim etapie można się starać o pierwszą pracę.&lt;/p&gt;

&lt;p&gt;I tak na początku pomijając jakieś śmieszne stronki na ocenę dla szkoły, moim pierwszym projektem była gra &lt;a href=&quot;/moje-projekty/#kolko-krzyzyk&quot;&gt;kółko i krzyżyk&lt;/a&gt; zrobiona w HTML, CSS i Javascript. Miałem tu też pierwszą styczność z Gitem. Później w tych samych technologiach razem z kolegą zrobiliśmy kopię &lt;a href=&quot;/moje-projekty#game-of-life&quot;&gt;Game of Life&lt;/a&gt; Johna Conwaya (Ciężko to nazwać grą :D).&lt;/p&gt;

&lt;p&gt;Gdzieś w między czasie wygrałem konkurs świąteczny (100zł na książkę :D) zajmując 1 miejsce z 72 głosami (drugie miało 35), którego celem było wykonanie animacji znaków ASCII w dowolnej technologii zorganizowany przez &lt;a href=&quot;https://forum.pasja-informatyki.pl/&quot;&gt;Forum Pasja Informatyki&lt;/a&gt;. &lt;a href=&quot;/moje-projekty/#swieta-asci-art&quot;&gt;Animacja&lt;/a&gt; w HTML, CSS, Javascript wyglądała tak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swieta-asci-art.gif&quot; alt=&quot;Animacja świąteczna&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dało mi to sporo satysfakcji :D&lt;/p&gt;

&lt;p&gt;Po drodze, na potrzeby szkolne, wykonaliśmy z kolegą &lt;a href=&quot;/moje-projekty#zwierciadła-i-soczewki&quot;&gt;stronkę&lt;/a&gt; symulującą rysowanie odbić w zwierciadłach i soczewkach.&lt;/p&gt;

&lt;p&gt;Następnym moim &lt;a href=&quot;/moje-projekty#jaki-jezyk-programowania&quot;&gt;projektem&lt;/a&gt;, już nieco większym, który rozwijam do dziś, była strona &lt;a href=&quot;https://jaki-jezyk-programowania.pl/&quot;&gt;jaki-jezyk-programowania.pl&lt;/a&gt;. Prace wystartowały w styczniu 2017 roku. To tu, podczas budowania strony nauczyłem się najwięcej z technologii webowych. Poznałem Bootstrapa i jQuery. Zacząłem używać ES6 i buildować projekt z pomocą webpacka. O jakość kodu dbał mi ESLint. Nie mówiąc już ile pochłonąłem wiedzy teoretycznej na temat różnych technologii. Jest to projekt na który poświeciłem największą ilość czasu.&lt;/p&gt;

&lt;p&gt;Zacząłem pisać tego bloga dzięki inicjatywie DajSiePoznac2017 z wykorzystaniem narzędzia Jekyll - opisywałem to &lt;a href=&quot;https://c0deboy.github.io/devcave/dajsiepoznac2017/instalacja-jekyll&quot;&gt;wcześniej&lt;/a&gt; na blogu . Był to nieco burzliwy okres, gdyż częstotliwość postów miała być 2 tygodniowo, w między czasie rozwijałem &lt;a href=&quot;https://jaki-jezyk-programowania.pl/&quot;&gt;jaki-jezyk-programowania.pl&lt;/a&gt;, a byłem niedługo przed maturą i poświęcałem masę czasu na naukę do rozszerzeń - matematyki i informatyki. Przez co bardzo mało czasu zostawało mi na programowanie. Dosłownie katowałem się tym, a koniec końców nie udało mi się uzyskać satysfakcjonującego wyniku z matury - o tym później. Co do blogowania to było to miłe doświadczenie i chyba do tego wracam ;)&lt;/p&gt;

&lt;p&gt;Jako odskocznia od typowych projektów zacząłem tworzyć &lt;a href=&quot;/moje-projekty#remake-tank1990&quot;&gt;remake&lt;/a&gt; retro gry Battle City/Tank 1990 w Phaserze. Pewnie każdy ją kojarzy z dzieciństwa. Gra nie jest dokończona, zatrzymałem się na podstawowych elementach mechaniki gry (bez leveli, różnych czołgów i zbierania ulepszeń) by zająć się w pełnym wymiarze tym czym zacząłem się uczyć w między czasie - Javą, jej technologiami i OOP. Tworzenie gry było ciekawym doświadczeniem, myślę, że kiedyś do niej wrócę lub zabiorę się za jakąś nową.&lt;/p&gt;

&lt;p&gt;Tak więc, moim kolejnym celem była Java. W tej technologii chciałem pracować i miał to być mój główny język programowania.&lt;/p&gt;

&lt;p&gt;Zbliżały się wakacje, więc pomyślałem, że może znajdę jakieś praktyki żeby nabrać trochę doświadczenia. Niestety, mieszkam w Kielcach, gdzie jest bardzo mało ofert pracy dla programistów - tym bardziej Juniorów. O dziwo, była jedna oferta praktyk. Uradowany zaaplikowałem jednak spóźniłem się, bo rekrutacja już się zakończyła. Zaproponowano mi, że jeśli czuję się na siłach to mogę zaaplikować na stanowisko Juniora. Nie czułem się na siłach, więc nie zrobiłem tego.&lt;/p&gt;

&lt;p&gt;Po opanowaniu podstaw Javy zabrałem się za tworzenie nowego projektu – &lt;a href=&quot;/moje-projekty#todo-list-app&quot;&gt;aplikacji&lt;/a&gt; do zarządzania “todo” listami. Coś w rodzaju Trello. Był to świetny projekt do nauki, mogłem wykorzystać większość technologii, które miałem w planach się nauczyć. I tak kolejno poznałem technologie: Servlet, JSP, JSTL, Spring, Hibernate, zarządzanie zależnościami w Maven i podstawy testowania z JUnit i Mockito. Projekt stawiałem z wykorzystaniem Tomcata.&lt;/p&gt;

&lt;p&gt;Podczas swojej nauki przeczytałem kilka książek i obejrzałem wiele tutoriali. Kindle miałem praktycznie zawsze przy sobie i jak tylko nadarzyła się okazja to się uczyłem.&lt;/p&gt;

&lt;h1 id=&quot;seria-porażek-i&quot;&gt;Seria porażek i…&lt;/h1&gt;

&lt;p&gt;W między czasie, na początku budowania aplikacji, odbywały się rekrutacje na studia. Po przeanalizowaniu +/- praca vs studia, chciałem mimo wszystko studiować, ale złożyłem aplikację na wcześniej wspomniane stanowisko tak z ciekawości, żeby zobaczyć, na czym stoję i mieć ewentualną alternatywę - jeśli udałoby się z pracą, a nie ze studiami.&lt;/p&gt;

&lt;p&gt;Pewnego dnia, miła Pani z HR zadzwoniła do mnie w odpowiedzi na aplikację. Myślałem, że rozmowę kwalifikacyjną odbędę w firmie, a przez telefon ustalimy tylko kiedy. Myliłem się :D. Pierwsza wstępna rozmowa jest przez telefon. Musiałem odpowiedzieć na szereg pytań technicznych i rozmawiać po angielsku. Stresowałem się niesamowicie, w ogóle nie spodziewałem się takiej rozmowy. Kilka pytań technicznych pomieszałem, a część anglojęzyczna poszła w miarę. Pani z HR powiedziała, że mojej wiedzy jest jeszcze trochę za mało, żeby przejść dalszy proces rekrutacji i zasugerowała spróbowanie za jakiś czas jeszcze raz, jak będę umiał więcej. Trochę mnie to przygasiło, ale niedługo potem dało kopa do dalszej pracy ;)&lt;/p&gt;

&lt;p&gt;Tak więc, moim celem było dostanie się na informatykę do Wrocławia na PWR - i tylko tam. Nie złożyłem aplikacji nigdzie indziej. Miałem ambicję na jakąś lepszą uczelnie, żeby nie iść na jakąś zapchaj dziurę i coś właściwie z niej wynieść. PWR vs AGH w Krakowie vs PW w Warszawie było optymalnym wyborem, jeśli chodzi o trudność dostania się. Również było to atrakcyjne miasto. Miałem nadzieję, ze mi się uda. Nie wiem czy to było dobre myślenie, bo niestety nie dostałem się z pierwszej rekrutacji.&lt;/p&gt;

&lt;p&gt;Po tej porażce, zacząłem na maksa poświęcać się na nauce Javy przy wspomnianej aplikacji. Skupiałem się na technologiach, które były wymagane w tej ofercie. Miałem jeszcze nadzieje na dostanie się na PWR z kolejnych rekrutacji, jednak mimo wytrwania do ostatniej - 5 (każdorazowo zdzierali ze mnie 80zł za rekrutacje), nie dostałem się. Progi dużo skoczyły w tym roku - a matura mimo włożonego trudu nie poszła najlepiej. Tak więc straciłem możliwość studiowania w tym roku.&lt;/p&gt;

&lt;p&gt;Później biłem się z myślami i mówiłem sobie, że mogłem iść gdzieś indziej, choćby PK w Krakowie. Rodzice mówili to samo, bo przecież jak to bez studiów. Może to i racja, bo studia aż tak programowania nie udoskonalają, a i tak bym sam się rozwijał na boku. Przynajmniej studia mniej wymagające zabierałyby mi mniej czasu - więc miałbym go więcej na samorozwój. No ale wybór pozostał jeden - szukanie pracy. Dobrze, że stale rozwijałem się i uczyłem bo pozostałbym z niczym. Musiałbym skoczyć chyba na budowlankę :D.&lt;/p&gt;

&lt;p&gt;Z aktualnym stackiem technologicznym, który poznałem do tej pory - przynajmniej na poziomie podstawowym, spełniałem wymagania kilku ofert pracy dla junior programistów Javy. Jednak największym moim problemem był brak komercyjnego doświadczenia, a większość firm tego wymaga nawet dla Juniorów. Sporo ofert pracy w wymaganiach miało też ukończenie szkoły wyższej. Jest to dla mnie troszeczkę ironiczne, ale stawiam ze firmy mają jakieś plusy z tego, żę biorą studentów.&lt;/p&gt;

&lt;p&gt;Postanowiłem więc, że poszukam lokalnie oraz w Krakowie, bo nie mam aż tak daleko, a to miasto jest zdecydowanie atrakcyjniejsze jeśli chodzi o pracę. Przeglądając oferty pracy natrafiłem na ofertę, na którą wcześniej aplikowałem z niepowodzeniem. Pracowałem intensywnie przez ostatnie miesiące - nadrobiłem sporo zaległości i poznałem nowe technologie, więc uznałem, że spróbuję jeszcze raz. Zgodnie z zaleceniami :D. Byłem jednak sceptycznie do tego nastawiony. Niestety była to jedyna oferta dla Juniorów w Kielcach. Oprócz jednej - która miała nieco większe wymagania. Mimo wszystko złożyłem aplikację tu i tu. Poza tym znalazłem kilka ofert w Krakowie. Również na nie zaaplikowałem.&lt;/p&gt;

&lt;p&gt;Pierwszą odpowiedź dostałem po kilku dniach - mailowo. Była to anglojęzyczna firma z Krakowa. Zostałem poproszony o wykonanie testu programistycznego - napisanie &lt;a href=&quot;https://github.com/C0deboy/X-Formation-java-developer-test&quot;&gt;aplikacji&lt;/a&gt; konsolowej do zamawiania jedzenia. Wykonałem to, ale koniec końców dostałem odpowiedź, że napisany przeze mnie program nie spełnia ich oczekiwań. Poprosiłem o feedback, żeby wiedzieć, co było nie tak i ku mojemu zdziwieniu otrzymałem dobrze opisaną listę rzeczy (nawet z linkami do książek/konferencji), nad którymi mógłbym popracować i zachęcano mnie do aplikowania po jakimś czasie.&lt;/p&gt;

&lt;p&gt;Inne firmy się nie odzywały, pewnie ze względu na brak doświadczenia i że jestem zaraz po technikum, bez studiów. Wiele firm obawia się tego, że po krótkim czasie uciekniemy od nich (choćby na studia), po tym jak oni zainwestują w nasz rozwój. Nie wiedziałem, co ze sobą zrobić. Nie mogłem się na niczym skupić, cały czas myślałem o pracy.&lt;/p&gt;

&lt;p&gt;Dopiero po 2 tygodniach dostałem telefon od firmy, do której już wcześniej aplikowałem z niepowodzeniem. Tym razem poszło mi o wiele lepiej. Zostałem zaproszony na rozmowę. Firma bardzo mi się podobała wizualnie - był to nowy budynek. Również ludzie wydawali się całkiem mili. Tam czekała mnie jednogodzinna rozmowa techniczna, po części po angielsku oraz 3 godziny na napisanie jakieś przykładowej aplikacji konsolowej. W moim przypadku była to symulacja prostego “systemu bankowego”. Zakładanie kont użytkowników (w tym admina, który zarządzał kontami). Tworzenie i przypisywanie im kont bankowych. Zapisywanie i odczytywanie tych danych z xml i jakieś proste przelewy między kontami. To tak mniej więcej. Rozmowa poszła mi bardzo dobrze. Z aplikacją było już trochę gorzej. Robiłem ją trochę chaotycznie i na stresie. Na koniec jednak, gdy musiałem wychodzić, powiedziałem co zrobiłbym tu inaczej i było wzięte to pod uwagę.&lt;/p&gt;

&lt;p&gt;Po całym procesie miałem mieszane uczucia. Nie byłem pewny czy poszło mi wystarczająco dobrze. Na odpowiedź musiałem czekać prawie 2 tygodnie i zaczynałem dostawać świra. To była moja jedyna szansa na pracę w tym momencie. Firma wydawała mi się idealna, na dodatek na miejscu, więc do wypłaty mogłem sobie doliczyć bez problemu minimum jakieś 1200 zł - ze względów na brak kosztów utrzymania się w innym mieście.&lt;/p&gt;

&lt;p&gt;W końcu, pewnego dnia zadzwonił telefon. Byłem tak ze zestresowany, że ciężko mi było mówić. Powiedzieli mi, że rozmowa poszła mi dobrze, z językiem angielskim raczej nie będę miał problemu (firma ma klientów zagranicznych), jednak napisana przeze mnie aplikacja nie była idealna. Mimo wszystko, po chwili dowiedziałem się, że DOSTAŁEM PRACE! Ulga jaką poczułem była nie do opisania. Dostałem dobrą rekomendację od programisty, z którym miałem rozmowę kwalifikacyjną, wydawałem im się na ambitną osobą i uznali, że dadzą mi szansę. W dodatku, podobno jestem pierwszą tak młodą osobą przyjętą do pracy w historii firmy. To też fajne uczucie :D&lt;/p&gt;

&lt;p&gt;Pracę zaczynam od nowego roku. Umowę mam już podpisaną. Dodatkowo firma zabezpiecza się też umową szkoleniową. Jest to tak skonstruowane, że wcześniej niż po 2 latach raczej nie będę chciał odejść, bo musiałbym oddać część pieniędzy za odbyte szkolenia. Jest to kwota rzędu 30 000 złotych. Stawka ta maleje wraz z czasem i zanika po 2 latach. Jest to jedna rzecz, która trochę mi nie pasowała. Nie planowałem zostawać w lokalnym mieście dłużej niż rok. To mi trochę pokrzyżowało plany, jednak mimo wszystko częściowo rozumiem to zabezpieczenie i jestem szczęśliwy, że mi się udało. Mam nadzieję, że przyjemnie będzie mi się tam pracowało, nabiorę sporo doświadczenia i będzie to miło wspominał.&lt;/p&gt;

&lt;p&gt;Firma to Transition Technologies PSC S.A., czym się zajmuję można zobaczyć na &lt;a href=&quot;https://ttpsc.pl/&quot;&gt;oficjalnej stronie&lt;/a&gt;, a tu kilka zdjęć:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/tt.png&quot; alt=&quot;Transition Technology budynek&quot; /&gt;
&lt;img src=&quot;/img/tt2.png&quot; alt=&quot;Transition Technology wnętrze&quot; /&gt;
&lt;img src=&quot;/img/tt3.png&quot; alt=&quot;Transition Technology wnętrze&quot; /&gt;
&lt;img src=&quot;/img/tt4.png&quot; alt=&quot;Transition Technology wnętrze&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A tu korytarz do jaskiń ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/tt5.png&quot; alt=&quot;Transition Technology wnętrze&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jednak zdjęć z wewnątrz jaskiń nie znalazłem online :D&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="Moje-doświadczenia" /><category term="Pierwsza-praca" /><category term="Moje-doświadczenia" /><summary type="html">Minęło sporo czasu od ostatniego postu. Przez ten okres całkowicie poświęciłem się nauce Javy i jej technologii, aby jak najszybciej mieć szansę na dostanie pracy. I udało się! Chciałem się tym tutaj podzielić i przedstawić całą drogę od początku do końca. Jak zaczynałem Programowania zacząłem się uczyć (tak bardziej na poważnie, z myślą bycia programistą) gdzieś na początku 4 klasy technikum informatycznego (2016 rok). Wcześniej nie byłem jeszcze pewien, co chciałbym robić w przyszłości. Jak pewnie w większości techników, programowanie opierało się na programowaniu webowym wokół HTML, CSS i Javascript. Były to jednak takie podstawy, że praktycznie nie było możliwe napisanie czegoś konkretnego z taką wiedzą. O OOP to nawet nie słyszałem. Dlatego zacząłem interesować się tym tematem i uczyć się na własną rękę. Wtedy trafiłem na kursy M. Zelenta, które były dla mnie po prostu idealne. Ponadto, dzięki nim dostałem tyle motywacji i tak mnie zachęciły do działania, że o niczym innym już nie myślałem i to właśnie z programowaniem chciałem wiązać przyszłość (trwa to do dziś). Jednak po jakimś czasie, okazało się, że wiedza wyniesiona z technikum (przynajmniej w moim wypadku) oraz częściowo z kursów okazała się stertą złych praktyk, o czym szybko się przekonałem dzięki zakładaniu wątków na Forum Pasja Informatyki z moimi projektami - pisanymi w celu nauki technologii webowych. Dzięki wielu osobom z forum, m.in. Krzycho92, argeento oraz później Comandeer i Ivan, wiele się nauczyłem i po części feedback z forum motywował mnie do dalszej pracy. Moje projekty Zrobiłem listę moich projektów, żeby chociażby mieć się z czego pośmiać za parę lat. Ale też z myślą, że ktoś zobaczy jak wygląda mniej więcej progres projektów i na jakim etapie można się starać o pierwszą pracę. I tak na początku pomijając jakieś śmieszne stronki na ocenę dla szkoły, moim pierwszym projektem była gra kółko i krzyżyk zrobiona w HTML, CSS i Javascript. Miałem tu też pierwszą styczność z Gitem. Później w tych samych technologiach razem z kolegą zrobiliśmy kopię Game of Life Johna Conwaya (Ciężko to nazwać grą :D). Gdzieś w między czasie wygrałem konkurs świąteczny (100zł na książkę :D) zajmując 1 miejsce z 72 głosami (drugie miało 35), którego celem było wykonanie animacji znaków ASCII w dowolnej technologii zorganizowany przez Forum Pasja Informatyki. Animacja w HTML, CSS, Javascript wyglądała tak: Dało mi to sporo satysfakcji :D Po drodze, na potrzeby szkolne, wykonaliśmy z kolegą stronkę symulującą rysowanie odbić w zwierciadłach i soczewkach. Następnym moim projektem, już nieco większym, który rozwijam do dziś, była strona jaki-jezyk-programowania.pl. Prace wystartowały w styczniu 2017 roku. To tu, podczas budowania strony nauczyłem się najwięcej z technologii webowych. Poznałem Bootstrapa i jQuery. Zacząłem używać ES6 i buildować projekt z pomocą webpacka. O jakość kodu dbał mi ESLint. Nie mówiąc już ile pochłonąłem wiedzy teoretycznej na temat różnych technologii. Jest to projekt na który poświeciłem największą ilość czasu. Zacząłem pisać tego bloga dzięki inicjatywie DajSiePoznac2017 z wykorzystaniem narzędzia Jekyll - opisywałem to wcześniej na blogu . Był to nieco burzliwy okres, gdyż częstotliwość postów miała być 2 tygodniowo, w między czasie rozwijałem jaki-jezyk-programowania.pl, a byłem niedługo przed maturą i poświęcałem masę czasu na naukę do rozszerzeń - matematyki i informatyki. Przez co bardzo mało czasu zostawało mi na programowanie. Dosłownie katowałem się tym, a koniec końców nie udało mi się uzyskać satysfakcjonującego wyniku z matury - o tym później. Co do blogowania to było to miłe doświadczenie i chyba do tego wracam ;) Jako odskocznia od typowych projektów zacząłem tworzyć remake retro gry Battle City/Tank 1990 w Phaserze. Pewnie każdy ją kojarzy z dzieciństwa. Gra nie jest dokończona, zatrzymałem się na podstawowych elementach mechaniki gry (bez leveli, różnych czołgów i zbierania ulepszeń) by zająć się w pełnym wymiarze tym czym zacząłem się uczyć w między czasie - Javą, jej technologiami i OOP. Tworzenie gry było ciekawym doświadczeniem, myślę, że kiedyś do niej wrócę lub zabiorę się za jakąś nową. Tak więc, moim kolejnym celem była Java. W tej technologii chciałem pracować i miał to być mój główny język programowania. Zbliżały się wakacje, więc pomyślałem, że może znajdę jakieś praktyki żeby nabrać trochę doświadczenia. Niestety, mieszkam w Kielcach, gdzie jest bardzo mało ofert pracy dla programistów - tym bardziej Juniorów. O dziwo, była jedna oferta praktyk. Uradowany zaaplikowałem jednak spóźniłem się, bo rekrutacja już się zakończyła. Zaproponowano mi, że jeśli czuję się na siłach to mogę zaaplikować na stanowisko Juniora. Nie czułem się na siłach, więc nie zrobiłem tego. Po opanowaniu podstaw Javy zabrałem się za tworzenie nowego projektu – aplikacji do zarządzania “todo” listami. Coś w rodzaju Trello. Był to świetny projekt do nauki, mogłem wykorzystać większość technologii, które miałem w planach się nauczyć. I tak kolejno poznałem technologie: Servlet, JSP, JSTL, Spring, Hibernate, zarządzanie zależnościami w Maven i podstawy testowania z JUnit i Mockito. Projekt stawiałem z wykorzystaniem Tomcata. Podczas swojej nauki przeczytałem kilka książek i obejrzałem wiele tutoriali. Kindle miałem praktycznie zawsze przy sobie i jak tylko nadarzyła się okazja to się uczyłem. Seria porażek i… W między czasie, na początku budowania aplikacji, odbywały się rekrutacje na studia. Po przeanalizowaniu +/- praca vs studia, chciałem mimo wszystko studiować, ale złożyłem aplikację na wcześniej wspomniane stanowisko tak z ciekawości, żeby zobaczyć, na czym stoję i mieć ewentualną alternatywę - jeśli udałoby się z pracą, a nie ze studiami. Pewnego dnia, miła Pani z HR zadzwoniła do mnie w odpowiedzi na aplikację. Myślałem, że rozmowę kwalifikacyjną odbędę w firmie, a przez telefon ustalimy tylko kiedy. Myliłem się :D. Pierwsza wstępna rozmowa jest przez telefon. Musiałem odpowiedzieć na szereg pytań technicznych i rozmawiać po angielsku. Stresowałem się niesamowicie, w ogóle nie spodziewałem się takiej rozmowy. Kilka pytań technicznych pomieszałem, a część anglojęzyczna poszła w miarę. Pani z HR powiedziała, że mojej wiedzy jest jeszcze trochę za mało, żeby przejść dalszy proces rekrutacji i zasugerowała spróbowanie za jakiś czas jeszcze raz, jak będę umiał więcej. Trochę mnie to przygasiło, ale niedługo potem dało kopa do dalszej pracy ;) Tak więc, moim celem było dostanie się na informatykę do Wrocławia na PWR - i tylko tam. Nie złożyłem aplikacji nigdzie indziej. Miałem ambicję na jakąś lepszą uczelnie, żeby nie iść na jakąś zapchaj dziurę i coś właściwie z niej wynieść. PWR vs AGH w Krakowie vs PW w Warszawie było optymalnym wyborem, jeśli chodzi o trudność dostania się. Również było to atrakcyjne miasto. Miałem nadzieję, ze mi się uda. Nie wiem czy to było dobre myślenie, bo niestety nie dostałem się z pierwszej rekrutacji. Po tej porażce, zacząłem na maksa poświęcać się na nauce Javy przy wspomnianej aplikacji. Skupiałem się na technologiach, które były wymagane w tej ofercie. Miałem jeszcze nadzieje na dostanie się na PWR z kolejnych rekrutacji, jednak mimo wytrwania do ostatniej - 5 (każdorazowo zdzierali ze mnie 80zł za rekrutacje), nie dostałem się. Progi dużo skoczyły w tym roku - a matura mimo włożonego trudu nie poszła najlepiej. Tak więc straciłem możliwość studiowania w tym roku. Później biłem się z myślami i mówiłem sobie, że mogłem iść gdzieś indziej, choćby PK w Krakowie. Rodzice mówili to samo, bo przecież jak to bez studiów. Może to i racja, bo studia aż tak programowania nie udoskonalają, a i tak bym sam się rozwijał na boku. Przynajmniej studia mniej wymagające zabierałyby mi mniej czasu - więc miałbym go więcej na samorozwój. No ale wybór pozostał jeden - szukanie pracy. Dobrze, że stale rozwijałem się i uczyłem bo pozostałbym z niczym. Musiałbym skoczyć chyba na budowlankę :D. Z aktualnym stackiem technologicznym, który poznałem do tej pory - przynajmniej na poziomie podstawowym, spełniałem wymagania kilku ofert pracy dla junior programistów Javy. Jednak największym moim problemem był brak komercyjnego doświadczenia, a większość firm tego wymaga nawet dla Juniorów. Sporo ofert pracy w wymaganiach miało też ukończenie szkoły wyższej. Jest to dla mnie troszeczkę ironiczne, ale stawiam ze firmy mają jakieś plusy z tego, żę biorą studentów. Postanowiłem więc, że poszukam lokalnie oraz w Krakowie, bo nie mam aż tak daleko, a to miasto jest zdecydowanie atrakcyjniejsze jeśli chodzi o pracę. Przeglądając oferty pracy natrafiłem na ofertę, na którą wcześniej aplikowałem z niepowodzeniem. Pracowałem intensywnie przez ostatnie miesiące - nadrobiłem sporo zaległości i poznałem nowe technologie, więc uznałem, że spróbuję jeszcze raz. Zgodnie z zaleceniami :D. Byłem jednak sceptycznie do tego nastawiony. Niestety była to jedyna oferta dla Juniorów w Kielcach. Oprócz jednej - która miała nieco większe wymagania. Mimo wszystko złożyłem aplikację tu i tu. Poza tym znalazłem kilka ofert w Krakowie. Również na nie zaaplikowałem. Pierwszą odpowiedź dostałem po kilku dniach - mailowo. Była to anglojęzyczna firma z Krakowa. Zostałem poproszony o wykonanie testu programistycznego - napisanie aplikacji konsolowej do zamawiania jedzenia. Wykonałem to, ale koniec końców dostałem odpowiedź, że napisany przeze mnie program nie spełnia ich oczekiwań. Poprosiłem o feedback, żeby wiedzieć, co było nie tak i ku mojemu zdziwieniu otrzymałem dobrze opisaną listę rzeczy (nawet z linkami do książek/konferencji), nad którymi mógłbym popracować i zachęcano mnie do aplikowania po jakimś czasie. Inne firmy się nie odzywały, pewnie ze względu na brak doświadczenia i że jestem zaraz po technikum, bez studiów. Wiele firm obawia się tego, że po krótkim czasie uciekniemy od nich (choćby na studia), po tym jak oni zainwestują w nasz rozwój. Nie wiedziałem, co ze sobą zrobić. Nie mogłem się na niczym skupić, cały czas myślałem o pracy. Dopiero po 2 tygodniach dostałem telefon od firmy, do której już wcześniej aplikowałem z niepowodzeniem. Tym razem poszło mi o wiele lepiej. Zostałem zaproszony na rozmowę. Firma bardzo mi się podobała wizualnie - był to nowy budynek. Również ludzie wydawali się całkiem mili. Tam czekała mnie jednogodzinna rozmowa techniczna, po części po angielsku oraz 3 godziny na napisanie jakieś przykładowej aplikacji konsolowej. W moim przypadku była to symulacja prostego “systemu bankowego”. Zakładanie kont użytkowników (w tym admina, który zarządzał kontami). Tworzenie i przypisywanie im kont bankowych. Zapisywanie i odczytywanie tych danych z xml i jakieś proste przelewy między kontami. To tak mniej więcej. Rozmowa poszła mi bardzo dobrze. Z aplikacją było już trochę gorzej. Robiłem ją trochę chaotycznie i na stresie. Na koniec jednak, gdy musiałem wychodzić, powiedziałem co zrobiłbym tu inaczej i było wzięte to pod uwagę. Po całym procesie miałem mieszane uczucia. Nie byłem pewny czy poszło mi wystarczająco dobrze. Na odpowiedź musiałem czekać prawie 2 tygodnie i zaczynałem dostawać świra. To była moja jedyna szansa na pracę w tym momencie. Firma wydawała mi się idealna, na dodatek na miejscu, więc do wypłaty mogłem sobie doliczyć bez problemu minimum jakieś 1200 zł - ze względów na brak kosztów utrzymania się w innym mieście. W końcu, pewnego dnia zadzwonił telefon. Byłem tak ze zestresowany, że ciężko mi było mówić. Powiedzieli mi, że rozmowa poszła mi dobrze, z językiem angielskim raczej nie będę miał problemu (firma ma klientów zagranicznych), jednak napisana przeze mnie aplikacja nie była idealna. Mimo wszystko, po chwili dowiedziałem się, że DOSTAŁEM PRACE! Ulga jaką poczułem była nie do opisania. Dostałem dobrą rekomendację od programisty, z którym miałem rozmowę kwalifikacyjną, wydawałem im się na ambitną osobą i uznali, że dadzą mi szansę. W dodatku, podobno jestem pierwszą tak młodą osobą przyjętą do pracy w historii firmy. To też fajne uczucie :D Pracę zaczynam od nowego roku. Umowę mam już podpisaną. Dodatkowo firma zabezpiecza się też umową szkoleniową. Jest to tak skonstruowane, że wcześniej niż po 2 latach raczej nie będę chciał odejść, bo musiałbym oddać część pieniędzy za odbyte szkolenia. Jest to kwota rzędu 30 000 złotych. Stawka ta maleje wraz z czasem i zanika po 2 latach. Jest to jedna rzecz, która trochę mi nie pasowała. Nie planowałem zostawać w lokalnym mieście dłużej niż rok. To mi trochę pokrzyżowało plany, jednak mimo wszystko częściowo rozumiem to zabezpieczenie i jestem szczęśliwy, że mi się udało. Mam nadzieję, że przyjemnie będzie mi się tam pracowało, nabiorę sporo doświadczenia i będzie to miło wspominał. Firma to Transition Technologies PSC S.A., czym się zajmuję można zobaczyć na oficjalnej stronie, a tu kilka zdjęć: A tu korytarz do jaskiń ;) Jednak zdjęć z wewnątrz jaskiń nie znalazłem online :D</summary></entry><entry><title type="html">Podsumowanie DSP2017</title><link href="https://c0deboy.github.io/devcave/dajsiepoznac2017/podsumowanie-dsp2017" rel="alternate" type="text/html" title="Podsumowanie DSP2017" /><published>2017-05-30T02:12:00+02:00</published><updated>2017-05-30T02:12:00+02:00</updated><id>https://c0deboy.github.io/devcave/dajsiepoznac2017/podsumowanie-dsp2017</id><content type="html" xml:base="https://c0deboy.github.io/devcave/dajsiepoznac2017/podsumowanie-dsp2017">&lt;p&gt;Cieszę się, że dotrwałem do samego końca. Konkurs DSP2017 był dla mnie miłym doświadczeniem, dzięki niemu dowiedziałem się jak to jest blogować i śmiało mogę powiedziecie, że nie jest to łatwa sprawa, tym bardziej, jeśli mówimy o regularnym blogowaniu. Wymaga to wiele naszego wkładu, wysiłku i czasu. W moim przypadku było jeszcze gorzej, bo akurat w okresie trwania konkursu tego ostatniego miałem najmniej, co było dodatkowym utrudnieniem. Ciekawy jestem ile z tych prawie 1000 osób dotrwało do końca.&lt;/p&gt;

&lt;p&gt;Blogowanie samo w sobie nawet mi się podobało, ale fakt, że moja wiedza o programowaniu jest niewielka i nie mam zbyt wiele ciekawych doświadczeń w programistycznym życiu, z których mogłoby powstawać wpisy, powodowało, że pisałem trochę na siłę. Blogowanie o tworzeniu samego projektu nie wydaje mi się ciekawym tematem.&lt;/p&gt;

&lt;p&gt;Jednak pomaga to ułożyć w naszej głowie zdobywaną wiedzę, lepiej zrozumieć dany temat oraz łatwiej go zapamiętać. Ponadto jest to też magazyn naszej wiedzy, można łatwo do tego wrócić, co jest dodatkowym plusem. Ba, samo pisanie jest nauką. Więc na pewno na tym nic nie straciłem, wszystko na plus!&lt;/p&gt;

&lt;p&gt;Nie wiem czy będę dalej prowadził tego bloga, w chwili obecnej zapowiadają się dosyć pracowite wakacje. Może wrócę do tego, gdy nabiorę więcej doświadczenia, którym będę mógł się dzielić w postaci wpisów. Zobaczymy.&lt;/p&gt;

&lt;h3 id=&quot;podsumowując&quot;&gt;Podsumowując&lt;/h3&gt;

&lt;p&gt;Cieszę się, że zdecydowałem się wziąć udział w konkursie i że dotrwałem do końca. Była to fajna inicjatywa, która pokazała mi nieco świat blogowania. Nie zmieniło to jednak nic, jeśli chodzi o pokazywanie się w Internecie. Nie “dałem się poznać”, odzew był praktycznie zerowy, więc ta idea jest nieco koloryzowana. Pewnie wielu z Was ma takie odczucie. Jest to ciężkie zadanie. Podobnie ma się sprawa z proszeniem o pomoc przy projekcie, szukanie chętnych do współpracy czy zwykły code review. Jeśli któreś z wyżej wymienionych uda nam się osiągnąć, to powinniśmy być naprawdę wdzięczni, bo wydaję mi się, że nie jest to takie proste, na jakie się wydaje.&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><summary type="html">Cieszę się, że dotrwałem do samego końca. Konkurs DSP2017 był dla mnie miłym doświadczeniem, dzięki niemu dowiedziałem się jak to jest blogować i śmiało mogę powiedziecie, że nie jest to łatwa sprawa, tym bardziej, jeśli mówimy o regularnym blogowaniu. Wymaga to wiele naszego wkładu, wysiłku i czasu. W moim przypadku było jeszcze gorzej, bo akurat w okresie trwania konkursu tego ostatniego miałem najmniej, co było dodatkowym utrudnieniem. Ciekawy jestem ile z tych prawie 1000 osób dotrwało do końca. Blogowanie samo w sobie nawet mi się podobało, ale fakt, że moja wiedza o programowaniu jest niewielka i nie mam zbyt wiele ciekawych doświadczeń w programistycznym życiu, z których mogłoby powstawać wpisy, powodowało, że pisałem trochę na siłę. Blogowanie o tworzeniu samego projektu nie wydaje mi się ciekawym tematem. Jednak pomaga to ułożyć w naszej głowie zdobywaną wiedzę, lepiej zrozumieć dany temat oraz łatwiej go zapamiętać. Ponadto jest to też magazyn naszej wiedzy, można łatwo do tego wrócić, co jest dodatkowym plusem. Ba, samo pisanie jest nauką. Więc na pewno na tym nic nie straciłem, wszystko na plus! Nie wiem czy będę dalej prowadził tego bloga, w chwili obecnej zapowiadają się dosyć pracowite wakacje. Może wrócę do tego, gdy nabiorę więcej doświadczenia, którym będę mógł się dzielić w postaci wpisów. Zobaczymy. Podsumowując Cieszę się, że zdecydowałem się wziąć udział w konkursie i że dotrwałem do końca. Była to fajna inicjatywa, która pokazała mi nieco świat blogowania. Nie zmieniło to jednak nic, jeśli chodzi o pokazywanie się w Internecie. Nie “dałem się poznać”, odzew był praktycznie zerowy, więc ta idea jest nieco koloryzowana. Pewnie wielu z Was ma takie odczucie. Jest to ciężkie zadanie. Podobnie ma się sprawa z proszeniem o pomoc przy projekcie, szukanie chętnych do współpracy czy zwykły code review. Jeśli któreś z wyżej wymienionych uda nam się osiągnąć, to powinniśmy być naprawdę wdzięczni, bo wydaję mi się, że nie jest to takie proste, na jakie się wydaje.</summary></entry><entry><title type="html">Git - usuwanie pliku z repozytorium</title><link href="https://c0deboy.github.io/devcave/dajsiepoznac2017/git-usuwanie-pliku-z-repozytorium" rel="alternate" type="text/html" title="Git - usuwanie pliku z repozytorium" /><published>2017-05-24T02:12:00+02:00</published><updated>2017-05-24T02:12:00+02:00</updated><id>https://c0deboy.github.io/devcave/dajsiepoznac2017/git-usuwanie-pliku-z-repozytorium</id><content type="html" xml:base="https://c0deboy.github.io/devcave/dajsiepoznac2017/git-usuwanie-pliku-z-repozytorium">&lt;p&gt;Komu nie zdarzyło się chociaż raz przez pomyłkę / nieuwagę / niewiedzę wrzucić wrażliwy plik do repozytorium? Jeśli tobie, to zazdroszczę. Jednak nie wszystko stracone! Można się go pozbyć.&lt;/p&gt;

&lt;h1&gt;BFG Repo-Cleaner&lt;/h1&gt;
&lt;p&gt;Z pomocą przychodzi &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot;&gt;BFG&lt;/a&gt;! Pobieramy go z oficjalnej strony i kilkoma poleceniami pozbędziemy się niechcianego pliku z repozytorium Git-a:&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Zakładam, że pobrany plik jest na pulpicie.&lt;/u&gt;
Otwieramy konsolę i przechodzimy na pulpit:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Desktop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Następnie musimy sklonować nasze repozytorium:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone --mirror https://github.com/Nazwa-użytkownika/nazwa-repozytorium&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;note&quot;&gt;
Jeśli używasz GitHub Desktop - dodaj ścieżkę do cmd git-a do zmiennej systemowej Path, aby móc korzystać z gita także w terminalu. Powinna wyglądać mniej więcej tak: &lt;span class=&quot;path&quot;&gt;C:\Users\Nazwa-użytkownika\AppData\Local\GitHub\PortableGit_(id)\cmd&lt;/span&gt;. Zmienne systemowe znajdziesz w &lt;span class=&quot;path&quot;&gt;Panel sterowania -&amp;gt; System i zabezpieczenia -&amp;gt; System -&amp;gt; Zaawansowane ustawienia systemu -&amp;gt; Zmienne środowiskowe -&amp;gt; Zmienne Systemowe&lt;/span&gt;. &lt;u&gt;Pamiętaj o średniku przed wklejeniem ścieżki&lt;/u&gt;.
&lt;/p&gt;

&lt;p&gt;Jak pewnie zauważyłeś, jest to plik jar, więc do jego uruchomienia będzie potrzebna nam Java.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;
Jeśli nie masz &lt;a href=&quot;https://www.java.com/pl/download/&quot;&gt;Javy&lt;/a&gt;, zaopatrz się w nią! Jeśli nie chcesz za każdym razem podawać pełnej ścieżki (domyślnie: &lt;span class=&quot;path&quot;&gt;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Java\jdk1.7.0\bin&lt;/span&gt;) do plików wykonywalnych Javy, dodaj ją również do [Path](https://www.java.com/pl/download/help/path.xml).
&lt;/p&gt;

&lt;p&gt;Uruchamiamy go z flagą –delete-files oraz nazwą pliku(&lt;u&gt;nie ścieżka&lt;/u&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;java -jar bfg-wersja.jar --delete-files nazwa-pliku.x&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Następnie przechodzimy do sklonowanego repozytorium&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;nazwa-repozytorium.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I uruchamiamy komendę:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reflog expire --expire&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;now --all &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git gc --prune&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;now --aggressive&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Gdy nie było po drodze żadnych błędów i jesteśmy zadowoleni z wyniku, możemy pushować ;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git push&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><category term="Git" /><summary type="html">Komu nie zdarzyło się chociaż raz przez pomyłkę / nieuwagę / niewiedzę wrzucić wrażliwy plik do repozytorium? Jeśli tobie, to zazdroszczę. Jednak nie wszystko stracone! Można się go pozbyć. BFG Repo-Cleaner Z pomocą przychodzi BFG! Pobieramy go z oficjalnej strony i kilkoma poleceniami pozbędziemy się niechcianego pliku z repozytorium Git-a: Zakładam, że pobrany plik jest na pulpicie. Otwieramy konsolę i przechodzimy na pulpit: cd Desktop Następnie musimy sklonować nasze repozytorium: git clone --mirror https://github.com/Nazwa-użytkownika/nazwa-repozytorium Jeśli używasz GitHub Desktop - dodaj ścieżkę do cmd git-a do zmiennej systemowej Path, aby móc korzystać z gita także w terminalu. Powinna wyglądać mniej więcej tak: C:\Users\Nazwa-użytkownika\AppData\Local\GitHub\PortableGit_(id)\cmd. Zmienne systemowe znajdziesz w Panel sterowania -&amp;gt; System i zabezpieczenia -&amp;gt; System -&amp;gt; Zaawansowane ustawienia systemu -&amp;gt; Zmienne środowiskowe -&amp;gt; Zmienne Systemowe. Pamiętaj o średniku przed wklejeniem ścieżki. Jak pewnie zauważyłeś, jest to plik jar, więc do jego uruchomienia będzie potrzebna nam Java. Jeśli nie masz Javy, zaopatrz się w nią! Jeśli nie chcesz za każdym razem podawać pełnej ścieżki (domyślnie: C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Java\jdk1.7.0\bin) do plików wykonywalnych Javy, dodaj ją również do [Path](https://www.java.com/pl/download/help/path.xml). Uruchamiamy go z flagą –delete-files oraz nazwą pliku(nie ścieżka) java -jar bfg-wersja.jar --delete-files nazwa-pliku.x Następnie przechodzimy do sklonowanego repozytorium cd nazwa-repozytorium.git I uruchamiamy komendę: git reflog expire --expire=now --all &amp;amp;&amp;amp; git gc --prune=now --aggressive Gdy nie było po drodze żadnych błędów i jesteśmy zadowoleni z wyniku, możemy pushować ;) git push</summary></entry><entry><title type="html">Webpack - zarządzanie modułami</title><link href="https://c0deboy.github.io/devcave/dajsiepoznac2017/webpack-dzielimy-kod-na-moduly" rel="alternate" type="text/html" title="Webpack - zarządzanie modułami" /><published>2017-05-22T02:12:00+02:00</published><updated>2017-05-22T02:12:00+02:00</updated><id>https://c0deboy.github.io/devcave/dajsiepoznac2017/webpack-dzielimy-kod-na-moduly</id><content type="html" xml:base="https://c0deboy.github.io/devcave/dajsiepoznac2017/webpack-dzielimy-kod-na-moduly">&lt;p&gt;Dzielenie kodu na moduły pozwala odseparować niezwiązane ze sobą części, co wpływa na porządek w projekcie. Gdy pracujemy z danym elementem strony nie chcemy przecież przekopywać się przez masę innych niezwiązanych ze sobą funkcji w celu znalezienia tego, czego szukamy. No dobrze, podzielimy nasz kod, np. na 15 plików JS i 10 plików CSS, ale czy to oznacza, że teraz powinniśmy załączyć 15 tagów &amp;#60;script&amp;#62; i 10 tagów &amp;#60;link&amp;#62; w pliku HTML? Oczywiście, że nie! Duża ilość osobno podpiętych plików znacząco wpływa na wydajność ładowania naszej aplikacji, gdyż każdy plik to osobne żądanie HTTP. Tu z pomocą przychodzi nam Webpack.&lt;/p&gt;

&lt;h1 id=&quot;webpack&quot;&gt;Webpack&lt;/h1&gt;

&lt;p&gt;Webpack - jest to narzędzie, które pozwoli nam spiąć wszystkie nasze moduły w jeden plik, tzw. bundle. Dzięki temu później będziemy mogli załączyć na stronę pojedynczy plik, co jest dużo bardziej wydajnym rozwiązaniem. Ponadto, Webpack może dla nas zoptymalizować wielkość plików czy nawet przetranspilować kod ES6 używając Babel i wiele więcej. Wszystko dzięki dodatkowym loaderom i pluginom.&lt;/p&gt;

&lt;h2 id=&quot;instalacja&quot;&gt;Instalacja&lt;/h2&gt;

&lt;p&gt;Webpack dodajemy do naszych dev-zależności poleceniem:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install webpack --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;konfiguracja&quot;&gt;Konfiguracja&lt;/h2&gt;

&lt;p&gt;Konfiguracja Webpacka przechowywana jest domyślnie w pliku &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt;, a jej podstawowa wersja wygląda tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/main.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/start.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[name].bundle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hx&gt;Gdzie:&lt;/hx&gt;
&lt;ul&gt;
  &lt;li&gt;entry - para nazwa - ścieżka, gdzie podajemy nazwę oraz wskazujemy plik, który łączy moduły.&lt;/li&gt;
  &lt;li&gt;path - folder, do którego będą trafiać nasze paczki.&lt;/li&gt;
  &lt;li&gt;filename - nazwa paczki, która powstanie z nazwy w entry i “.bundle.js”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lączenie-plików&quot;&gt;Lączenie plików&lt;/h2&gt;

&lt;p&gt;Aby Webpack wiedział jakie pliki ma połączyć, musimy to podać w plikach zadeklarowanych w entry. Służy do tego metoda:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'scieżka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Dla przykładu:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./nav.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./laptop.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./typing.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./startBtn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;note&quot;&gt;
Zamiast scieżki można też podać nazwę pakietu zainstalowanego przez npm, tak jak w przykładzie: &lt;code class=&quot;highlight language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;h2 id=&quot;webpack--babel&quot;&gt;Webpack + Babel&lt;/h2&gt;

&lt;p&gt;Teraz pozostało dla ułatwienia stworzyć sobie skrypt, który będzie uruchamiał webpacka. W tym celu do pliku &lt;span class=&quot;file&quot;&gt;package.json&lt;/span&gt; dodajemy  linię:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;i teraz możemy stworzyć nasze pliki polecenim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm run build&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aby stworzyć zoptymalizowaną wersję, musimy do skryptu przekazać parametr -p. Parametry do skryptów poprzedzamy –, a więc w ten sposób:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm run build -- -p&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;warning&quot;&gt;
Jeżeli używasz ES6, to operacja ta nie powiedzie się, gdyż optymalizacja nie działa z ES6. Problem ten rozwiąże Babel.
&lt;/p&gt;

&lt;p&gt;Babel transpiluje kod ES6 na zrozumiały dla starszych przeglądarek. Standardowo instalujemy go za pomocą npm:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install babel-loader babel-core babel-preset-es2015 --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ponadto musimy dodać go do konfiguracji w &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'es2015'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;

&lt;p&gt;Pliki JS mamy z głowy, ale co z CSS? Do nich musimy pobrać kolejny loader, gdyż Webpack domyślnie wspiera tylko JS. A więc:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install css-loader style-loader --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Następnie dodajemy loadery oraz plik CSS do &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/home/main.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./css/main.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'es2015'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pliki możemy łączyć standardowo za pomocą funkcji @import, np. plik &lt;span class=&quot;file&quot;&gt;main.css&lt;/span&gt; może wyglądać tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('./home/plik1.css')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('./home/plik2.css')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('./home/plik3.css')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*itd.*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Jednak Webpack nie łączy tą metoda wszystkich importów w jeden plik. Dodaje go inline do DOM, co ma kilka wad. Wydajność jest lepsza tylko dla małych ilości CSS. Uniemożliwia to ładowanie naszych plików CSS do cache przeglądarki, bo poprostu ich nie ma! Wtedy, za każdym odświeżeniem strony wszystko musi być załadowane od nowa, co w przypadku dużych ilości styli nie jest zbyt optymalne. Rozwiązaniem jest plugin ExtractTextPlugin, dzięki któremu połączymy pliki CSS w jeden i będziemy go mogli tradycyjnie załączyć w HTML. Instalacja:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install extract-text-webpack-plugin --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Następnie w pliku &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt; dodajemy stałą:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'extract-text-webpack-plugin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oraz podmieniamy loadery CSS i definiujemy nowy plugin:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./[name].bundle.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Teraz, dzięki Webpackowi, możemy dzielić do woli pliki JS i CSS, a ostatecznie załączymy ich tzw. bundle.&lt;/p&gt;

&lt;p class=&quot;warning&quot;&gt;
Jeśli w twoich plikach, które łączysz, wystepują importy czcionek (np. w Bootstrap) Webpack wyrzuci błędy. Można to rozwiązać z pomocą &lt;a href=&quot;https://github.com/webpack-contrib/url-loader&quot;&gt;url-loader&lt;/a&gt;, &lt;u&gt;jednak warto je pominąć&lt;/u&gt;, gdyż często załączane jest kilka formatów (woff, woff2, eot, ttf). Url-loader przetworzyłby je wszystkie, co skutkowałoby ogromnym plikiem CSS. Normalnie, przeglądarka wybiera tylko jeden odpowiedni, a resztę pomija. Dlatego lepiej skorzystać z opcji dla css-loader, która wyłącza przetwarzanie @import url(), ale normalnie działa z @import:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Będziemy musieli wtedy inaczej łączyć pliki CSS (bez url()), np:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'./home/plik1.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'./home/plik2.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'./home/plik3.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*itd.*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;edit&quot;&gt;EDIT:&lt;/h2&gt;

&lt;p class=&quot;warning&quot;&gt;Okazuje się, że jeśli z podaną konfiguracją używamy kilka &quot;entries&quot; na raz (zarówno pliki JS jak i CSS) powstają duplikaty dla plików CSS w wersji JS. Aby to obejść musimy nieco zmienić konfigurację &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt; :
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'extract-text-webpack-plugin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'home.bundle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/home/main.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'home.bundle.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./css/home/merge.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'faq.bundle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/faq.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[name]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'es2015'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./[name]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><summary type="html">Dzielenie kodu na moduły pozwala odseparować niezwiązane ze sobą części, co wpływa na porządek w projekcie. Gdy pracujemy z danym elementem strony nie chcemy przecież przekopywać się przez masę innych niezwiązanych ze sobą funkcji w celu znalezienia tego, czego szukamy. No dobrze, podzielimy nasz kod, np. na 15 plików JS i 10 plików CSS, ale czy to oznacza, że teraz powinniśmy załączyć 15 tagów &amp;#60;script&amp;#62; i 10 tagów &amp;#60;link&amp;#62; w pliku HTML? Oczywiście, że nie! Duża ilość osobno podpiętych plików znacząco wpływa na wydajność ładowania naszej aplikacji, gdyż każdy plik to osobne żądanie HTTP. Tu z pomocą przychodzi nam Webpack. Webpack Webpack - jest to narzędzie, które pozwoli nam spiąć wszystkie nasze moduły w jeden plik, tzw. bundle. Dzięki temu później będziemy mogli załączyć na stronę pojedynczy plik, co jest dużo bardziej wydajnym rozwiązaniem. Ponadto, Webpack może dla nas zoptymalizować wielkość plików czy nawet przetranspilować kod ES6 używając Babel i wiele więcej. Wszystko dzięki dodatkowym loaderom i pluginom. Instalacja Webpack dodajemy do naszych dev-zależności poleceniem: npm install webpack --save-dev Konfiguracja Konfiguracja Webpacka przechowywana jest domyślnie w pliku webpack.config.js, a jej podstawowa wersja wygląda tak: const path = require('path'); module.exports = { entry: { home: './js/main.js', start: './js/start.js', }, output: { path: path.join(__dirname, 'dist'), filename: '[name].bundle.js', }, }; Gdzie: entry - para nazwa - ścieżka, gdzie podajemy nazwę oraz wskazujemy plik, który łączy moduły. path - folder, do którego będą trafiać nasze paczki. filename - nazwa paczki, która powstanie z nazwy w entry i “.bundle.js” Lączenie plików Aby Webpack wiedział jakie pliki ma połączyć, musimy to podać w plikach zadeklarowanych w entry. Służy do tego metoda: require('scieżka'); Dla przykładu: require('jquery'); require('./nav.js'); require('./laptop.js'); require('./typing.js'); require('./startBtn'); Zamiast scieżki można też podać nazwę pakietu zainstalowanego przez npm, tak jak w przykładzie: require('jquery'); Webpack + Babel Teraz pozostało dla ułatwienia stworzyć sobie skrypt, który będzie uruchamiał webpacka. W tym celu do pliku package.json dodajemy linię: //... &quot;scripts&quot;: { //... &quot;build&quot;: &quot;webpack&quot;, }, //... i teraz możemy stworzyć nasze pliki polecenim: npm run build Aby stworzyć zoptymalizowaną wersję, musimy do skryptu przekazać parametr -p. Parametry do skryptów poprzedzamy –, a więc w ten sposób: npm run build -- -p Jeżeli używasz ES6, to operacja ta nie powiedzie się, gdyż optymalizacja nie działa z ES6. Problem ten rozwiąże Babel. Babel transpiluje kod ES6 na zrozumiały dla starszych przeglądarek. Standardowo instalujemy go za pomocą npm: npm install babel-loader babel-core babel-preset-es2015 --save-dev Ponadto musimy dodać go do konfiguracji w webpack.config.js //... module: { loaders: [ { test: /\.js$/, loader: 'babel-loader', query: { presets: ['es2015', { modules: false }], }, }, ], }, CSS Pliki JS mamy z głowy, ale co z CSS? Do nich musimy pobrać kolejny loader, gdyż Webpack domyślnie wspiera tylko JS. A więc: npm install css-loader style-loader --save-dev Następnie dodajemy loadery oraz plik CSS do webpack.config.js: entry: { home: './js/home/main.js', global: './css/main.css', }, //... module: { loaders: [ { test: /\.js$/, loader: 'babel-loader', query: { presets: ['es2015', { modules: false }], }, }, { test: /\.css$/, use: ['style-loader', 'css-loader'], }, ], }, Pliki możemy łączyć standardowo za pomocą funkcji @import, np. plik main.css może wyglądać tak: @import url('./home/plik1.css'); @import url('./home/plik2.css'); @import url('./home/plik3.css'); /*itd.*/ Jednak Webpack nie łączy tą metoda wszystkich importów w jeden plik. Dodaje go inline do DOM, co ma kilka wad. Wydajność jest lepsza tylko dla małych ilości CSS. Uniemożliwia to ładowanie naszych plików CSS do cache przeglądarki, bo poprostu ich nie ma! Wtedy, za każdym odświeżeniem strony wszystko musi być załadowane od nowa, co w przypadku dużych ilości styli nie jest zbyt optymalne. Rozwiązaniem jest plugin ExtractTextPlugin, dzięki któremu połączymy pliki CSS w jeden i będziemy go mogli tradycyjnie załączyć w HTML. Instalacja: npm install extract-text-webpack-plugin --save-dev Następnie w pliku webpack.config.js dodajemy stałą: const ExtractTextPlugin = require('extract-text-webpack-plugin'); Oraz podmieniamy loadery CSS i definiujemy nowy plugin: //... loaders: [ //... { test: /\.css$/, use: ExtractTextPlugin.extract({ fallback: 'style-loader', use: 'css-loader', }), }, ], plugins: [ new ExtractTextPlugin('./[name].bundle.css'), ], Teraz, dzięki Webpackowi, możemy dzielić do woli pliki JS i CSS, a ostatecznie załączymy ich tzw. bundle. Jeśli w twoich plikach, które łączysz, wystepują importy czcionek (np. w Bootstrap) Webpack wyrzuci błędy. Można to rozwiązać z pomocą url-loader, jednak warto je pominąć, gdyż często załączane jest kilka formatów (woff, woff2, eot, ttf). Url-loader przetworzyłby je wszystkie, co skutkowałoby ogromnym plikiem CSS. Normalnie, przeglądarka wybiera tylko jeden odpowiedni, a resztę pomija. Dlatego lepiej skorzystać z opcji dla css-loader, która wyłącza przetwarzanie @import url(), ale normalnie działa z @import: //... { test: /\.css$/, use: ExtractTextPlugin.extract({ fallback: 'style-loader', use: { loader: 'css-loader', options: { url: false, }, }, }), }, Będziemy musieli wtedy inaczej łączyć pliki CSS (bez url()), np: @import './home/plik1.css'; @import './home/plik2.css'; @import './home/plik3.css'; /*itd.*/ EDIT: Okazuje się, że jeśli z podaną konfiguracją używamy kilka &quot;entries&quot; na raz (zarówno pliki JS jak i CSS) powstają duplikaty dla plików CSS w wersji JS. Aby to obejść musimy nieco zmienić konfigurację webpack.config.js : const path = require('path'); const ExtractTextPlugin = require('extract-text-webpack-plugin'); module.exports = { entry: { 'home.bundle.js': './js/home/main.js', 'home.bundle.css': './css/home/merge.css', 'faq.bundle.js': './js/faq.js', }, output: { path: path.join(__dirname, 'dist'), filename: '[name]', }, module: { loaders: [ { test: /\.js$/, loader: 'babel-loader', { modules: false }, query: { presets: ['es2015'], }, }, { test: /\.css$/, use: ExtractTextPlugin.extract({ fallback: 'style-loader', use: 'css-loader', }), }, ], }, plugins: [ new ExtractTextPlugin('./[name]'), ], };</summary></entry><entry><title type="html">NPM i ESLint</title><link href="https://c0deboy.github.io/devcave/dajsiepoznac2017/npm-zaleznosci-i-ESLint" rel="alternate" type="text/html" title="NPM i ESLint" /><published>2017-05-20T02:12:00+02:00</published><updated>2017-05-20T02:12:00+02:00</updated><id>https://c0deboy.github.io/devcave/dajsiepoznac2017/npm-zaleznosci-i-ESLint</id><content type="html" xml:base="https://c0deboy.github.io/devcave/dajsiepoznac2017/npm-zaleznosci-i-ESLint">&lt;p&gt;Przyszła kolej zająć się strukturą plików, zależnościami oraz zadbać o spójność kodu.&lt;/p&gt;

&lt;h1 id=&quot;npm&quot;&gt;NPM&lt;/h1&gt;

&lt;p&gt;NPM - to menadżer pakietów, który pomoże nam opisać projekt i zdefiniować zależności, których wymaga. Od tego momentu pozbędę się wszystkich zewnętrznych bibliotek z repozytorium na Gicie, bo nie powinno ich tam być. Teraz będzie znajdował się tam sam projekt, a dzięki NPM, wszystkie zależności, które są zdefiniowane w pliku &lt;span class=&quot;file&quot;&gt;package.json&lt;/span&gt; będą mogły być zainstalowane jedną prostą komendą:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oczywiście najpierw musimy mieć NPM, ale instalacja jest banalnie prosta. Ja zainstalowałem &lt;a href=&quot;&quot;&gt;Node.js&lt;/a&gt;, gdzie NPM jest dołączony.&lt;/p&gt;

&lt;h1 id=&quot;definiowanie-zależności&quot;&gt;Definiowanie zależności&lt;/h1&gt;

&lt;p&gt;Aby utworzyć plik &lt;span class=&quot;file&quot;&gt;package.json&lt;/span&gt; dla naszego projektu, możemy posłużyć się poleceniem:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;które na podstawie kilku pytań wygeneruje go dla nas automatycznie.&lt;/p&gt;

&lt;p&gt;Następnie, aby pobrać nasze zależności i je dołączyć do pliku &lt;span class=&quot;file&quot;&gt;package.json&lt;/span&gt; wykonujemy polecenie:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install nazwa-pakietu --save&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;gdy paczki są niezbędne do uruchamiania środowiska/aplikacji (np. JQuery, Bootstrap), lub&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install nazwa-pakietu --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;gdy paczka niezbędna jest do rozwijania i testowania aplikacji (np. ESLint).&lt;/p&gt;

&lt;p&gt;Wszystkie nasz paczki  trafiaja do folderu &lt;span class=&quot;folder&quot;&gt;node_modules&lt;/span&gt;. Znajdziemy tam też całą masę innych zależności, które są wymagane przez nasze zależności, więc nie powinniśmy się przestraszyć ilością podfolderów w nim zawartych. Nasze paczki znajdziemy po tej samej nazwie, którą wywołaliśmy do instalacji, a interesujące nas pliki zazwyczaj w podfolderze &lt;span class=&quot;folder&quot;&gt;dist&lt;/span&gt;. Dla przykładu, w HTML załączamy je w ten sposób:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Head --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;node_modules/bootstrap/dist/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Body --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;node_modules/jquery/dist/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;node_modules/bootstrap/dist/js/libs/bootstrap.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;eslint&quot;&gt;ESLint&lt;/h1&gt;

&lt;p&gt;ESLint - jest to narzędzie, które dba o to, aby nasz styl kodu JS był zgodny z wcześniej zdefiniowanymi standardami. Wszystko za sprawą reguł, które możemy definiować też sami. Np. jeśli zadeklarujemy regułę, że po każdym if ma się znaleźć klamra ({), to ESLint dopilnuje, aby ta reguła była przez nas przestrzegana i wskaże nam miejsce, gdzie popełniliśmy błąd. Dzięki temu nasz kod będzie spójny i czysty.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;idea&quot;&gt;Można też użyć gotowych popularnych styli jak np. styl Google czy airbnb. Osobiście używam ten od airbnb.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Instalujemy ESLint i dodajemy do zależności, ale z parametrem -dev, gdyż to potrzebne jest tylko nam - developerom.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install eslint --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;konfiguracja&quot;&gt;Konfiguracja&lt;/h2&gt;
&lt;p&gt;Potrzebny będzie nam plik konfiguracyjny &lt;span class=&quot;file&quot;&gt;.eslintrc.json &lt;/span&gt;. Możemy automatycznie go wygenerować za pomocą polecenia:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;node_modules\.bin\eslint --init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;i odpowiedzi na kilka pytań. Teraz możemy dodać skrypt NPM dla ESlinta, który będziemy mogli uruchamiać w terminalu.&lt;/p&gt;

&lt;p&gt;W naszym pliku powinien się znajdować już jeden skrypt (jeśli zostawiliśmy pytanie “test command” puste):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
},&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Możemy edytować ten lub dodać nowy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&quot;scripts&quot;: {
    &quot;lint&quot;: &quot;eslint js/*.js&quot;
},&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dzięki temu skryptowi będziemy mogli w konsoli uruchomić polecenie:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm run lint&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Które sprawdzi dla nas wszystkie pliki JS w folderze &lt;span class=&quot;folder&quot;&gt;js&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Jednak używanie ESLint w konsoli nie jest zbyt szczęśliwe, gdyż musimy ręcznie odszukiwać błędy. Dlatego dobrym rozwiązaniem jest aktywować go w naszym IDE, jeśli wspiera taką opcję. Ja używam tego od JetBrains i na szczęście jest taka opcja, co znacznie ułatwia pracę.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;
Jeśli używasz PHPStorm lub WebStorm to znajdziesz taką opcję w: File | Settings | Languages and Frameworks | JavaScript | Code Quality Tools | ESLint
&lt;/p&gt;

&lt;p class=&quot;idea&quot;&gt;
Jeśli ESLint zgłasza błedy z elementów Jquery(np. $), DOM(np. document) dodaj do pliku &lt;span class=&quot;file&quot;&gt;.eslintrc.json &lt;/span&gt;
informację:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  &quot;env&quot;: {
    &quot;browser&quot;: true,
    &quot;jquery&quot;: true
  },&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><summary type="html">Przyszła kolej zająć się strukturą plików, zależnościami oraz zadbać o spójność kodu. NPM NPM - to menadżer pakietów, który pomoże nam opisać projekt i zdefiniować zależności, których wymaga. Od tego momentu pozbędę się wszystkich zewnętrznych bibliotek z repozytorium na Gicie, bo nie powinno ich tam być. Teraz będzie znajdował się tam sam projekt, a dzięki NPM, wszystkie zależności, które są zdefiniowane w pliku package.json będą mogły być zainstalowane jedną prostą komendą: npm install Oczywiście najpierw musimy mieć NPM, ale instalacja jest banalnie prosta. Ja zainstalowałem Node.js, gdzie NPM jest dołączony. Definiowanie zależności Aby utworzyć plik package.json dla naszego projektu, możemy posłużyć się poleceniem: npm init które na podstawie kilku pytań wygeneruje go dla nas automatycznie. Następnie, aby pobrać nasze zależności i je dołączyć do pliku package.json wykonujemy polecenie: npm install nazwa-pakietu --save gdy paczki są niezbędne do uruchamiania środowiska/aplikacji (np. JQuery, Bootstrap), lub npm install nazwa-pakietu --save-dev gdy paczka niezbędna jest do rozwijania i testowania aplikacji (np. ESLint). Wszystkie nasz paczki trafiaja do folderu node_modules. Znajdziemy tam też całą masę innych zależności, które są wymagane przez nasze zależności, więc nie powinniśmy się przestraszyć ilością podfolderów w nim zawartych. Nasze paczki znajdziemy po tej samej nazwie, którą wywołaliśmy do instalacji, a interesujące nas pliki zazwyczaj w podfolderze dist. Dla przykładu, w HTML załączamy je w ten sposób: &amp;lt;!-- Head --&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;node_modules/bootstrap/dist/css/bootstrap.min.css&quot;&amp;gt; &amp;lt;!-- Body --&amp;gt; &amp;lt;script src=&quot;node_modules/jquery/dist/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&quot;node_modules/bootstrap/dist/js/libs/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; ESLint ESLint - jest to narzędzie, które dba o to, aby nasz styl kodu JS był zgodny z wcześniej zdefiniowanymi standardami. Wszystko za sprawą reguł, które możemy definiować też sami. Np. jeśli zadeklarujemy regułę, że po każdym if ma się znaleźć klamra ({), to ESLint dopilnuje, aby ta reguła była przez nas przestrzegana i wskaże nam miejsce, gdzie popełniliśmy błąd. Dzięki temu nasz kod będzie spójny i czysty. Można też użyć gotowych popularnych styli jak np. styl Google czy airbnb. Osobiście używam ten od airbnb. Instalujemy ESLint i dodajemy do zależności, ale z parametrem -dev, gdyż to potrzebne jest tylko nam - developerom. npm install eslint --save-dev Konfiguracja Potrzebny będzie nam plik konfiguracyjny .eslintrc.json . Możemy automatycznie go wygenerować za pomocą polecenia: node_modules\.bin\eslint --init i odpowiedzi na kilka pytań. Teraz możemy dodać skrypt NPM dla ESlinta, który będziemy mogli uruchamiać w terminalu. W naszym pliku powinien się znajdować już jeden skrypt (jeśli zostawiliśmy pytanie “test command” puste): &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot; }, Możemy edytować ten lub dodać nowy: &quot;scripts&quot;: { &quot;lint&quot;: &quot;eslint js/*.js&quot; }, Dzięki temu skryptowi będziemy mogli w konsoli uruchomić polecenie: npm run lint Które sprawdzi dla nas wszystkie pliki JS w folderze js. Jednak używanie ESLint w konsoli nie jest zbyt szczęśliwe, gdyż musimy ręcznie odszukiwać błędy. Dlatego dobrym rozwiązaniem jest aktywować go w naszym IDE, jeśli wspiera taką opcję. Ja używam tego od JetBrains i na szczęście jest taka opcja, co znacznie ułatwia pracę. Jeśli używasz PHPStorm lub WebStorm to znajdziesz taką opcję w: File | Settings | Languages and Frameworks | JavaScript | Code Quality Tools | ESLint Jeśli ESLint zgłasza błedy z elementów Jquery(np. $), DOM(np. document) dodaj do pliku .eslintrc.json informację: &quot;env&quot;: { &quot;browser&quot;: true, &quot;jquery&quot;: true },</summary></entry><entry><title type="html">Dodajemy formularz kontaktowy 5#</title><link href="https://c0deboy.github.io/devcave/dajsiepoznac2017/formularz-kontaktowy-refaktoryzacja" rel="alternate" type="text/html" title="Dodajemy formularz kontaktowy 5#" /><published>2017-05-18T02:12:00+02:00</published><updated>2017-05-18T02:12:00+02:00</updated><id>https://c0deboy.github.io/devcave/dajsiepoznac2017/formularz-kontaktowy-refaktoryzacja</id><content type="html" xml:base="https://c0deboy.github.io/devcave/dajsiepoznac2017/formularz-kontaktowy-refaktoryzacja">&lt;p&gt;&lt;u&gt;W tym poście opisuję refaktoryzację naszego wcześniejszego formularza.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;Jeśli trafiłeś tu bezpośrednio, zajrzyj do &lt;a href=&quot;https://c0deboy.github.io/devcave/dajsiepoznac2017/formularz-kontaktowy-HTML-JS&quot;&gt;pierwszego postu&lt;/a&gt;, gdzie opisuję założenia i tworzę podstawową strukturę formularza.&lt;/p&gt;

&lt;hX&gt;Wpisy w tej serii:&lt;/hX&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://c0deboy.github.io/devcave/dajsiepoznac2017/formularz-kontaktowy-HTML-JS&quot;&gt;HTML + otwieranie / zamykanie JQuery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://c0deboy.github.io/devcave/dajsiepoznac2017/formularz-kontaktowy-walidacja-ajax&quot;&gt;Walidacja HTML5/JS + AJAX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://c0deboy.github.io/devcave/dajsiepoznac2017/formularz-kontaktowy-php-swiftmailer&quot;&gt;Walidacja PHP + Swiftmailer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://c0deboy.github.io/devcave/dajsiepoznac2017/formularz-kontaktowy-dostepnosc&quot;&gt;Dostępność formularza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://c0deboy.github.io/devcave/dajsiepoznac2017/formularz-kontaktowy-refaktoryzacja&quot;&gt;Zrefaktoryzowana wersja + Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;zmiany&quot;&gt;Zmiany&lt;/h1&gt;

&lt;p&gt;Refaktoryzacja objęła zarówno stronę frontendową, jak i backendową. Kod jest teraz bardziej uniwersalny, łatwiejszy do modyfikacji. Stworzyłem dla niego również osobne &lt;a href=&quot;https://github.com/C0deboy/Email-form&quot;&gt;repozytorium&lt;/a&gt; na GitHubie.&lt;/p&gt;

&lt;h1 id=&quot;javascript&quot;&gt;Javascript&lt;/h1&gt;

&lt;p&gt;Pobieranie oraz walidacja danych przebiega teraz automatycznie. Aby dodać nowe pole do formularza wystarczy dorzucić label wraz z inputem, który musi mieć klasę form-data. Wymagany jest też atrybut name. Opcjonalnie możemy dodać reguły walidacji HTML, które zostaną sprawdzone, czyli, np. min/maxlenght, required itd. Kompletne pole wygląda tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-live=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;polite&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Test
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-data&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minlength=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxlength=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;78&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Działa to w następujący sposób:&lt;/p&gt;

&lt;p&gt;Elementy są pobierane automatycznie pętlą i tworzą obiekt JSON:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.form-data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dzięki temu możemy w wygodny sposób operować na naszych elementach z wykorzystaniem pętli.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;
Używam tu anonimowych funkcji strzałkowych ( () =&amp;gt; {} ), jest to składnia ES6. Są odpowiednikiem funkcji anonimowej w tradycyjnym zapisie: function () {}
&lt;/p&gt;

&lt;p&gt;Nasze komunikaty o błędach teraz przechowywane są w jednym obiekcie JSON, aby można było je łatwiej modyfikować, a co najważniejsze, tylko w jednym miejscu. Dodatkowo posługuję się funkcjami strzałkowymi, które w czytelny sposób budują komunikat ze zmiennych podanych w ich parametrach.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'tooShort'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pole &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; musi zawierać co najmniej &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; znaki!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'tooLong'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pole &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; może zawierać co najwyżej &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; znaków!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'empty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pole &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; nie może być puste!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pole &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; jest niepoprawne!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'errorsInForm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;W formularzu występują błędy!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Potwierdź, że nie jesteś robotem!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mniejsza zmiana dotknęła zamykania formularza, gdzie teraz wszystkie pola są czyszczone przez pętlę, a nie ręcznie:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;oraz również wartości inputów do wysłania pobierane są pętlą (z wyjątkiem recaptcha):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'g-recaptcha-response'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grecaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Większa zmiana dotknęła też walidacji. Teraz sprawdzane jest każde pole osobno i komunikaty o błędach pojawią się pod każdym z nich. Nie tylko jeden pod przyciskiem “Wyślij”, tak jak było to wcześniej. Tam teraz pojawia się tylko ogólna informacja o (nie)powodzeniu wysłania wiadomości.&lt;/p&gt;

&lt;p&gt;Wszystkie błędy, które przyjdą od strony PHP w postaci JSON, oznaczane są automatycznie z pomocą pętli:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;sendEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;formAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'errorsInForm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Podobnie wygląda walidacja po stronie JS. Tu każde pole jest sprawdzane za pomocą HTML5 validation API dla określonych reguł oraz generowane są wcześniej utworzone przez nas komunikaty.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validateEmailForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valueMissing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'empty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tooShort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'minlength'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tooShort'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tooLong&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'maxlength'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tooLong'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeMismatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grecaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Zmianie uległa także nasza funkcja oznaczająca niepoprawne pola. Teraz tworzy i dodaje komunikat pod niepoprawnym polem.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wrongInput'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wrongInput'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wrongInput'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clearErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I jak widać, odseparowałem funkcję do czyszczenia błędów, która jest uruchamiana, gdy pole uzyska focus:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clearErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wrongInput'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;formAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Osobno na callbacku od recaptchy musiałem podpiąć dla niej focus (tabindex wymagany), co aktywuje funkcję czyszczącą komunikat (clearErrors):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--...--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;g-recaptcha&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tabindex=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-sitekey=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6LevbxMUAAAAAIa8dsrFNJn0S_b_t5K8INV4z2JD&quot;&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;data-callback=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RecaptchaClearMsg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--...--&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RecaptchaClearMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.g-recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;php&quot;&gt;PHP&lt;/h1&gt;

&lt;p&gt;Tu też sporo zmian. Podpiąłem &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composera&lt;/a&gt; do zarządzania zależnościami. Do walidacji stworzona jest funkcja korzystająca z zewnętrznego narzędzia do walidacji danych: &lt;a href=&quot;https://github.com/Respect/Validation&quot;&gt;Respect Validation&lt;/a&gt;. Błędy przechowywane są teraz w tablicy, a email zostanie wysłany tylko wtedy, gdy będzie pusta:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateContactForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'userEmail'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'subject'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$validationMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'validationMessages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rules&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;/** @var $validator Validator */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NestedValidationException&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$validationMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validateReCaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'g-recaptcha-response'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Potwierdź, że nie jesteś robotem!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Plik konfiguracyjny &lt;span class=&quot;file&quot;&gt;settings.php&lt;/span&gt; został wzbogacony o treści komunikatów, które są podmieniane z tymi z RespectValidation:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'reCaptcha'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'mailer'&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'host'&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'port'&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'username'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'validationMessages'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'stringType'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Musi być typu string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'length'&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Musi zawierać od  do  znaków'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Niepoprawny email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'notEmpty'&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Pole nie może być puste'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'NotSent'&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Coś poszło nie tak :('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'Sent'&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Wysłano! Dzięki za wiadomość'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Cały kod został również podzielony na osobne funkcje, z drobnymi modyfikacjami:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateReCaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://www.google.com/recaptcha/api/siteverify?'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'reCaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'response'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file_get_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'success'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_Mailer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mailer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_SmtpTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'port'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_Mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_Message&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mailer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'subject'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'text/plain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'userEmail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReplyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'userEmail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$mailer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prepareMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A obsługa wysłania formularza znajduję się w osobnym pliku &lt;span class=&quot;file&quot;&gt;ajaxsend.php&lt;/span&gt;:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/functions.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validateContactForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;http_response_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'errors'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;http_response_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'status'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'validationMessages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;http_response_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'status'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'validationMessages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'NotSent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Całość prezentuję się w następujący sposób:&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/C0deboy/Lmjmmyfc/embed/result,js,html,css/dark/&quot;&gt;&lt;/script&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><category term="Formularz-kontaktowy" /><summary type="html">W tym poście opisuję refaktoryzację naszego wcześniejszego formularza. Jeśli trafiłeś tu bezpośrednio, zajrzyj do pierwszego postu, gdzie opisuję założenia i tworzę podstawową strukturę formularza. Wpisy w tej serii: HTML + otwieranie / zamykanie JQuery Walidacja HTML5/JS + AJAX Walidacja PHP + Swiftmailer Dostępność formularza Zrefaktoryzowana wersja + Github Zmiany Refaktoryzacja objęła zarówno stronę frontendową, jak i backendową. Kod jest teraz bardziej uniwersalny, łatwiejszy do modyfikacji. Stworzyłem dla niego również osobne repozytorium na GitHubie. Javascript Pobieranie oraz walidacja danych przebiega teraz automatycznie. Aby dodać nowe pole do formularza wystarczy dorzucić label wraz z inputem, który musi mieć klasę form-data. Wymagany jest też atrybut name. Opcjonalnie możemy dodać reguły walidacji HTML, które zostaną sprawdzone, czyli, np. min/maxlenght, required itd. Kompletne pole wygląda tak: &amp;lt;label aria-live=&quot;polite&quot;&amp;gt; Test &amp;lt;input class=&quot;form-data&quot; name=&quot;test&quot; placeholder=&quot;Test&quot; minlength=&quot;4&quot; maxlength=&quot;78&quot; required&amp;gt; &amp;lt;/label&amp;gt; Działa to w następujący sposób: Elementy są pobierane automatycznie pętlą i tworzą obiekt JSON: const formDataElements = {}; const inputs = document.querySelectorAll('.form-data'); inputs.forEach((el) =&amp;gt; { formDataElements[el.getAttribute('name')] = el; }); Dzięki temu możemy w wygodny sposób operować na naszych elementach z wykorzystaniem pętli. Używam tu anonimowych funkcji strzałkowych ( () =&amp;gt; {} ), jest to składnia ES6. Są odpowiednikiem funkcji anonimowej w tradycyjnym zapisie: function () {} Nasze komunikaty o błędach teraz przechowywane są w jednym obiekcie JSON, aby można było je łatwiej modyfikować, a co najważniejsze, tylko w jednym miejscu. Dodatkowo posługuję się funkcjami strzałkowymi, które w czytelny sposób budują komunikat ze zmiennych podanych w ich parametrach. const customErrors = { 'tooShort': (fieldName, min) =&amp;gt; &quot;Pole &quot; + fieldName + &quot; musi zawierać co najmniej &quot; + min + &quot; znaki!&quot;, 'tooLong': (fieldName, max) =&amp;gt; &quot;Pole &quot; + fieldName + &quot; może zawierać co najwyżej &quot; + max + &quot; znaków!&quot;, 'empty': (fieldName) =&amp;gt; &quot;Pole &quot; + fieldName + &quot; nie może być puste!&quot;, 'type': (fieldName) =&amp;gt; &quot;Pole &quot; + fieldName + &quot; jest niepoprawne!&quot;, 'errorsInForm': &quot;W formularzu występują błędy!&quot;, 'recaptcha': &quot;Potwierdź, że nie jesteś robotem!&quot;, }; Mniejsza zmiana dotknęła zamykania formularza, gdzie teraz wszystkie pola są czyszczone przez pętlę, a nie ręcznie: for (const input in formDataElements) { formDataElements[input].value = ''; } oraz również wartości inputów do wysłania pobierane są pętlą (z wyjątkiem recaptcha): const formData = { 'g-recaptcha-response': grecaptcha.getResponse(), }; for (const el in formDataElements) { formData[el] = formDataElements[el].value; } Większa zmiana dotknęła też walidacji. Teraz sprawdzane jest każde pole osobno i komunikaty o błędach pojawią się pod każdym z nich. Nie tylko jeden pod przyciskiem “Wyślij”, tak jak było to wcześniej. Tam teraz pojawia się tylko ogólna informacja o (nie)powodzeniu wysłania wiadomości. Wszystkie błędy, które przyjdą od strony PHP w postaci JSON, oznaczane są automatycznie z pomocą pętli: sendEmail.fail(function (error) { for (var el in error.responseJSON.errors) { if (el === 'recaptcha') { markWrongInput(recaptcha, error.responseJSON.errors[el]); } else { markWrongInput(formDataElements[el], error.responseJSON.errors[el]); } } formAlert.innerHTML = customErrors['errorsInForm']; }); Podobnie wygląda walidacja po stronie JS. Tu każde pole jest sprawdzane za pomocą HTML5 validation API dla określonych reguł oraz generowane są wcześniej utworzone przez nas komunikaty. function validateEmailForm() { let valid = true; for (const el in formDataElements) { const fieldName = formDataElements[el].parentElement.innerText; if (formDataElements[el].validity.valueMissing === true) { markWrongInput(formDataElements[el], customErrors['empty'](fieldName)); } else if (formDataElements[el].validity.tooShort === true) { const min = formDataElements[el].getAttribute('minlength'); markWrongInput(formDataElements[el], customErrors['tooShort'](fieldName, min)); } else if (formDataElements[el].validity.tooLong === true) { const max = formDataElements[el].getAttribute('maxlength'); markWrongInput(formDataElements[el], customErrors['tooLong'](fieldName, max)); } else if (formDataElements[el].validity.typeMismatch === true) { markWrongInput(formDataElements[el], customErrors['type'](fieldName)); } if (formDataElements[el].validity.valid === false) { valid = false; } } if (grecaptcha.getResponse().length === 0) { markWrongInput(recaptcha, customErrors['recaptcha']); valid = false; } return valid; } Zmianie uległa także nasza funkcja oznaczająca niepoprawne pola. Teraz tworzy i dodaje komunikat pod niepoprawnym polem. function markWrongInput(wrongElement, alert) { if (wrongElement.classList.contains('wrongInput')) { return; } const errorMessageEl = document.createElement('p'); errorMessageEl.classList.add(&quot;error&quot;); errorMessageEl.classList.add('wrongInput'); errorMessageEl.textContent = alert; wrongElement.parentElement.append(errorMessageEl); wrongElement.classList.add('wrongInput'); wrongElement.addEventListener(&quot;focus&quot;, clearErrors); } I jak widać, odseparowałem funkcję do czyszczenia błędów, która jest uruchamiana, gdy pole uzyska focus: function clearErrors() { this.classList.remove('wrongInput'); this.parentElement.removeChild(this.parentElement.getElementsByClassName('error')[0]); formAlert.innerHTML = ''; } Osobno na callbacku od recaptchy musiałem podpiąć dla niej focus (tabindex wymagany), co aktywuje funkcję czyszczącą komunikat (clearErrors): &amp;lt;!--...--&amp;gt; &amp;lt;div class=&quot;g-recaptcha&quot; tabindex=&quot;-1&quot; data-sitekey=&quot;6LevbxMUAAAAAIa8dsrFNJn0S_b_t5K8INV4z2JD&quot; data-callback=&quot;RecaptchaClearMsg&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!--...--&amp;gt; function RecaptchaClearMsg() { document.querySelector('.g-recaptcha').focus(); } PHP Tu też sporo zmian. Podpiąłem Composera do zarządzania zależnościami. Do walidacji stworzona jest funkcja korzystająca z zewnętrznego narzędzia do walidacji danych: Respect Validation. Błędy przechowywane są teraz w tablicy, a email zostanie wysłany tylko wtedy, gdy będzie pusta: function validateContactForm(array $form): array { $errors = []; $rules = [ 'userEmail' =&amp;gt; (new Validator())-&amp;gt;addRules([new NotEmpty(), new Email()]), 'subject' =&amp;gt; (new Validator())-&amp;gt;addRules([new NotEmpty(), new StringType(), new Length(4, 78)]), 'message' =&amp;gt; (new Validator())-&amp;gt;addRules([new NotEmpty(), new StringType(), new Length(8, 6000)]), ]; $validationMessages = (require_once __DIR__ . '/settings.php')['validationMessages']; foreach ($rules as $key =&amp;gt; $validator) { /** @var $validator Validator */ try { $validator-&amp;gt;setName($key)-&amp;gt;assert($form[$key] ?? null); } catch (NestedValidationException $exception) { $exception-&amp;gt;findMessages($validationMessages); $errors[$key] = $exception-&amp;gt;getMessages(); } } if (validateReCaptcha($form['g-recaptcha-response'] ?? '') === false) { $errors['recaptcha'][] = &quot;Potwierdź, że nie jesteś robotem!&quot;; } return $errors; } Plik konfiguracyjny settings.php został wzbogacony o treści komunikatów, które są podmieniane z tymi z RespectValidation: return [ 'reCaptcha' =&amp;gt; [ 'secret' =&amp;gt; '', ], 'mailer' =&amp;gt; [ 'host' =&amp;gt; '', 'port' =&amp;gt; '', 'username' =&amp;gt; '', 'password' =&amp;gt; '', 'email' =&amp;gt; '', ], 'validationMessages' =&amp;gt; [ 'stringType'=&amp;gt; 'Musi być typu string', 'length' =&amp;gt; 'Musi zawierać od do znaków', 'email' =&amp;gt; 'Niepoprawny email', 'notEmpty' =&amp;gt; 'Pole nie może być puste', 'NotSent' =&amp;gt; 'Coś poszło nie tak :(', 'Sent' =&amp;gt; 'Wysłano! Dzięki za wiadomość' ], ]; Cały kod został również podzielony na osobne funkcje, z drobnymi modyfikacjami: function validateReCaptcha(string $code): bool { $url = 'https://www.google.com/recaptcha/api/siteverify?' . http_build_query([ 'secret' =&amp;gt; (require __DIR__ . '/settings.php')['reCaptcha']['secret'], 'response' =&amp;gt; $code, ]); $content = file_get_contents($url); $response = json_decode($content, true); return $response['success']; } function getMailer(): Swift_Mailer { $config = (require __DIR__ . '/settings.php')['mailer']; $transport = new Swift_SmtpTransport($config['host'], $config['port']); $transport-&amp;gt;setUsername($config['username']); $transport-&amp;gt;setPassword($config['password']); return new Swift_Mailer($transport); } function prepareMail(array $params): Swift_Message { $config = (require __DIR__ . '/settings.php')['mailer']; $mail = new Swift_Message( $params['subject'], $params['message'], 'text/plain', 'UTF-8' ); $mail-&amp;gt;setFrom($params['userEmail']); $mail-&amp;gt;setReplyTo($params['userEmail']); $mail-&amp;gt;setTo($config['email']); return $mail; } function sendMail(array $params): bool { $mailer = getMailer(); return $mailer-&amp;gt;send(prepareMail($params)); } A obsługa wysłania formularza znajduję się w osobnym pliku ajaxsend.php: require_once __DIR__ . '/functions.php'; if ($errors = validateContactForm($_POST)) { http_response_code(400); header('Content-Type: application/json'); echo json_encode(['errors' =&amp;gt; $errors]); } else { if (sendMail($_POST)) { http_response_code(200); echo json_encode(['status' =&amp;gt; (require __DIR__ . '/settings.php')['validationMessages']['Sent']]); } else { http_response_code(500); echo json_encode(['status' =&amp;gt; (require __DIR__ . '/settings.php')['validationMessages']['NotSent']]); } } Całość prezentuję się w następujący sposób:</summary></entry><entry><title type="html">Matura z informatyki - przydatne funkcje - Java</title><link href="https://c0deboy.github.io/devcave/dajsiepoznac2017/matura-informatyka-przydatne-funkcje-w-javie" rel="alternate" type="text/html" title="Matura z informatyki - przydatne funkcje - Java" /><published>2017-04-25T02:13:00+02:00</published><updated>2017-04-25T02:13:00+02:00</updated><id>https://c0deboy.github.io/devcave/dajsiepoznac2017/matura-informatyka-przydatne-funkcje-w-javie</id><content type="html" xml:base="https://c0deboy.github.io/devcave/dajsiepoznac2017/matura-informatyka-przydatne-funkcje-w-javie">&lt;p&gt;W tym poście zaprezentuję funkcje, z których korzystałem rozwiązując zadania maturalne z informatyki. Nie wiem jak w innych językach, ale w Javie jest całkiem sporo wbudowanych, które od razu robią za nas robotę. Jeśli znasz jakieś lepsze/szybsze sposoby na któreś rozwiązanie lub jeszcze inne przydatne funkcje, których nie wymieniłem, to daj znać!&lt;/p&gt;

&lt;h2 id=&quot;wczytanie-pliku&quot;&gt;Wczytanie pliku&lt;/h2&gt;

&lt;p&gt;Od tego zawsze zaczynamy. Ja korzystam z funkcji, która pakuje wszystkie dane z pliku tekstowego do tablicy o rożnych wymiarach, w zależności od zadania. Przykładowo dla tego typu danych:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;AIHAHGHBEAFJAJDI HGIHFEHHJGBCBGD
FBJHCFFGADD EHADJAJBJBEGD
JHGHADJ AGFEHHEHIAEJFC
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;wygląda tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C:\\sciezka\\do\\pliku\\&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNextLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;note&quot;&gt;
Należy pamiętać o escape'owaniu ukośników (\\\\) w ścieżce do pliku.
&lt;/p&gt;

&lt;h2 id=&quot;konwersja-liczb&quot;&gt;Konwersja liczb&lt;/h2&gt;
&lt;p&gt;Jak wiadomo to podstawa. Uzyskamy to szybko dzięki dwóm metodom, które przyjmują liczbę oraz system liczbowy jako argumenty:&lt;/p&gt;
&lt;hX&gt;Z różnych systemów na dziesiętny&lt;/hX&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convertToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hX&gt;I z dziesiętnego na inny:&lt;/hX&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convertInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;zaokroglanie-liczb&quot;&gt;Zaokroglanie liczb&lt;/h2&gt;

&lt;p&gt;Równie często jest to nam potrzebne. Gdy mamy podać tylko wydrukowany wynik to jest to całkiem proste. Z pomocą przychodzi printf, np:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%.2f%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;265.335&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//265,34&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hX&gt;Gdzie:&lt;/hX&gt;
&lt;ul&gt;
  &lt;li&gt;%.2 - określa precyzję, czyli ilość miejsc po przecinku, w tym przypadku 2&lt;/li&gt;
  &lt;li&gt;f - typ danych, w tym przypadku float&lt;/li&gt;
  &lt;li&gt;%n - nowa linia&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jeśli jednak musimy operować na zaokrąglonych liczbach, potrzebne jest nam coś więcej.&lt;/p&gt;

&lt;p&gt;Na Stack OverFlow często znajdowałem takie rozwiązanie:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;100.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;100.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;gdzie zera określają dokładność “przybliżenia”. Jednak nie zawsze zwraca to prawidłową odpowiedź. Przykładowo, jeśli za “x” podstawimy 265.335, to dostaniemy 265.33, co jest oczywiście niepoprawnym wynikiem, bo powinniśmy dostać 265.34.&lt;/p&gt;

&lt;p&gt;Ja rozwiązałem to w ten sposób:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rounded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;f&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rounded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wykorzystuje to podobną metodę co printf, tyle że później parsujemy to na double.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;
Zauważ, że tutaj, jako argument podałem jeszcze Locale.ROOT. Wynika to z tego, że w różnych regionach inaczej jest formatowany tekst i tak dla Polski w metodzie printf/format separatorem liczby typu double jest &quot;,&quot;, co całkowicie nam psuje obliczenia, bo typ double korzysta z &quot;.&quot;. Zmiana Locale na ROOT rozwiązuje ten problem.
&lt;/p&gt;

&lt;h2 id=&quot;maxmin-wartość&quot;&gt;Max/min wartość&lt;/h2&gt;
&lt;p&gt;W zadaniach zazwyczaj proszą o maksymalną lub minimalną wartość z jakiegoś zbioru. Gdy dane przetrzymujemy w tablicy mamy do tego gotowe funkcje:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;suma-wartości&quot;&gt;Suma wartości&lt;/h2&gt;

&lt;p&gt;Również czasem sumowanie wszystkich wartości się zdarza i tu też mamy gotowca:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wszystko dzięki streamom, które są z nami od Java 8. Jeśli operujemy na listach, też mamy gotowe metody do wyznaczania min/max:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//4
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Chociaż do sumowania już jest nieco mniej przyjaźnie i musimy użyć streamów:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;odwracanie-stringa&quot;&gt;Odwracanie stringa&lt;/h2&gt;

&lt;p&gt;Często w zadaniach trzeba odwracać stringi (np. aby sprawdzić czy są tzw. “palindromami”). Można to zrobić błyskawicznie z pomocą StringBuildera.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;operowanie-na-literach-w-słowie&quot;&gt;Operowanie na literach w słowie&lt;/h2&gt;
&lt;p&gt;Tu znacznie ułatwia sprawę funkcja, która każdy znak pakuje nam do tablicy, dzięki czemu później łatwo możemy na nich operować:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Anagram&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//[A, n, a, g, r, a, m]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;znajdowanie-podciągów-w-stringach&quot;&gt;Znajdowanie podciągów w stringach&lt;/h2&gt;
&lt;p&gt;Sprawdzanie czy dany ciąg znaków zawiera inny podciąg jest bajecznie proste:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;fooandbar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;and&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Zdarzyło się też porównywać prefiksy lub sufiksy między stringami, ale również do tego mamy gotowe metody, które sprawdzają czy ciąg zaczyna się lub kończy podanym stringiem:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;fooandbar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//true
&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;fooandbar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Czasem jednak musimy dobrać się do środka ciągów. W jednym zadaniu, z genotypu trzeba było wyciągać geny, które rozpoczynały się od “AA” a kończyły na “BB” i na nich przeprowadzać operację. Do tego typu zadań warto znać klasy Pattern i Matcher oraz umieć posługiwać się regexami. Do tego zadania użyłem metodę podobną do tej, jednak tę przerobiłem do ogólnego użytku, nie tylko pod zadanie:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMatchesBetween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(.*?)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()]);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;W skrócie, znajduję nam wszystkie podciągi miedzy argumentami a i b, oraz pakuje je do listy, którą na koniec konwertujemy na tablicę.&lt;/p&gt;

&lt;p&gt;Gdybyśmy mieli tylko sprawdzać czy dany ciąg pasuje do innego podciągu, moglibyśmy się posłużyć tą metodą:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;fooandbar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo(.*?)bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;note&quot;&gt;
Kluczowy w tych metodach jest regex: &lt;span class=&quot;s&quot;&gt;(.\*?)&lt;/span&gt; gdzie &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt; oznacza dowolny znak, a &lt;span class=&quot;s&quot;&gt;\*?&lt;/span&gt; to &quot;leniwy&quot; kawntyfikator? (ang. Reluctant quantifier), który określa, że &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt; (dowolny znak) może się wystąpić zero lub więcej razy. Jeśli, np. nie uznawalibyśmy pustych ciągów między a i b to użylibyśmy kwantyfikatora &lt;span class=&quot;s&quot;&gt;+?&lt;/span&gt;, który określa, że znak musi wystąpić co najmniej raz. Z kolei inny rodzaj kwantyfikatora - zachłanny (ang. greedy), w np. w postaci &lt;span class=&quot;s&quot;&gt;*&lt;/span&gt; pobrałby najwięcej ile się da, czyli w naszym przypadku od znalezienia pierwszego 'AA'  po ostatnie 'BB'. Różnica miedzy kwantyfikatorami leniwymi a zachłannymi polega na tym, że ten pierwszy dopasuje najmniej jak się da, a drugi jak najwięcej. Po więcej info odsyłam do dokumentacji &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html&quot;&gt;Pattern&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Zaprezentuje to na przykładzie. Dajmy na to, że mamy taką o to tablicę z danymi:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genotypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;genotypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;EBEAADDEDCBCAEBABBDBEADBBDAABBDDACDDECECECBBDDBCBEDAEBDAADCE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;genotypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BCBAAEEDDBEDCBBCCABDAACEBBEBCCCCCABDDDBBAACCEDDCBBCEAAEEADBBDE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;genotypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AADDEEDBBCCEEBBDEEDDAAAACDCDDCDBBEAADDEDDBBDCDDCDCAA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;i wywołując tą metodę na każdym elemencie tej tablicy, dostaniemy nową tablicę z dopasowaniami, które tu w tym przykładzie od razu drukuję:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genotype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genotypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMatchesBetween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genotype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;i output dla poszczególnych kwantyfikatorów wygląda następująco:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//dla (.*?)
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AADDEDCBCAEBABB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AABB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AAEEDDBEDCBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AACEBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AACCEDDCBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAEEADBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AADDEEDBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAAACDCDDCDBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AADDEDDBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//dla (.+?)
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AADDEDCBCAEBABB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AABBDDACDDECECECBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AAEEDDBEDCBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AACEBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AACCEDDCBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAEEADBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AADDEEDBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAAACDCDDCDBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AADDEDDBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//dla (.*)
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AADDEDCBCAEBABBDBEADBBDAABBDDACDDECECECBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AAEEDDBEDCBBCCABDAACEBBEBCCCCCABDDDBBAACCEDDCBBCEAAEEADBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AADDEEDBBCCEEBBDEEDDAAAACDCDDCDBBEAADDEDDBB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ilości-liter---statystyka&quot;&gt;Ilości liter - statystyka&lt;/h2&gt;
&lt;p&gt;Trafiały się też zadania gdzie trzeba było znaleźć ilości liter w słowie i wykonać na tym różne operacje (np. sprawdzanie czy słowa są anagramami). Napisałem do tego taką funkcję, która zwraca tablicę z liczbą poszczególnych liter:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countLetters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//26 liter w alfabecie
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Kluczowym czynnikiem jest tu operacja &lt;code class=&quot;highlight language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;/code&gt;, dzięki której obliczane jest miejsce w tablicy, które powinno zostać policzone w aktualnej iteracji.&lt;/p&gt;

&lt;p class=&quot;idea&quot;&gt;
Jeśli nie wiesz co tu się dzieje, to znak jest przechowywany jako liczba (np. alfabet wielkich liter przyjmuje wartości od 60 - dla A, do 90 - dla Z), a my metodą charAt wyciągamy aktualny znak, dajmy na to 'B'(61) i odejmujemy od tego 'A'(60), zatem dostajemy pozycję 1 (61-60).
&lt;/p&gt;

&lt;p&gt;Nasza tablica dla pewnego słowa po wydrukowaniu wyglądałaby tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&amp;lt;[ class=”idea”&amp;gt;
Warto wiedzieć też, że można inkrementować znaki!
&amp;lt;/[&amp;gt;&lt;/p&gt;

&lt;p&gt;Przykładowo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//B&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mając już taką wiedzę, możemy dostarczyć pełne statystyki jakiegoś tekstu. W jednym z zadań to własnie trzeba było zrobić. Najpierw wpakowałem wszystkie słowa do tablicy i następnie stworzyłem funkcję, która na podstawie podananej tablicy ze słowami, drukuje nam statystyki danego tekstu:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;letterStats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lettersCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lettersCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]++;&lt;/span&gt;
            
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfallLetters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lettersCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lettersCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;100.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfallLetters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; (&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%.2f&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percentage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A wyglądało to tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A: 632 (7.55%)
B: 196 (2.34%)
C: 162 (1.94%)
D: 422 (5.04%)
E: 1093 (13.06%)
F: 213 (2.55%)
G: 151 (1.80%)
H: 566 (6.76%)
I: 522 (6.24%)
J: 2 (0.02%)
K: 64 (0.76%)
L: 402 (4.80%)
M: 193 (2.31%)
N: 557 (6.66%)
O: 641 (7.66%)
P: 93 (1.11%)
Q: 6 (0.07%)
R: 524 (6.26%)
S: 485 (5.80%)
T: 792 (9.46%)
U: 185 (2.21%)
V: 84 (1.00%)
W: 196 (2.34%)
X: 3 (0.04%)
Y: 185 (2.21%)
Z: 0 (0.00%)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I do tej pory to by było na tyle. Jeśli uzbieram większy zbiór przydatnych funkcji lub algorytmów, to przeleję to na kolejny wpis.&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><category term="Matura-Informatyka" /><summary type="html">W tym poście zaprezentuję funkcje, z których korzystałem rozwiązując zadania maturalne z informatyki. Nie wiem jak w innych językach, ale w Javie jest całkiem sporo wbudowanych, które od razu robią za nas robotę. Jeśli znasz jakieś lepsze/szybsze sposoby na któreś rozwiązanie lub jeszcze inne przydatne funkcje, których nie wymieniłem, to daj znać! Wczytanie pliku Od tego zawsze zaczynamy. Ja korzystam z funkcji, która pakuje wszystkie dane z pliku tekstowego do tablicy o rożnych wymiarach, w zależności od zadania. Przykładowo dla tego typu danych: AIHAHGHBEAFJAJDI HGIHFEHHJGBCBGD FBJHCFFGADD EHADJAJBJBEGD JHGHADJ AGFEHHEHIAEJFC ... wygląda tak: private static String[][] readFile(String file) throws IOException{ String[][] array = new String[1000][2]; Scanner data = new Scanner(new File(&quot;C:\\sciezka\\do\\pliku\\&quot;+file)); int i = 0; while (data.hasNextLine()){ array[i][0] = data.next(); array[i][1] = data.next(); i++; } data.close(); return array; } Należy pamiętać o escape'owaniu ukośników (\\\\) w ścieżce do pliku. Konwersja liczb Jak wiadomo to podstawa. Uzyskamy to szybko dzięki dwóm metodom, które przyjmują liczbę oraz system liczbowy jako argumenty: Z różnych systemów na dziesiętny public static int convertToInt(String number, int base){ return Integer.parseInt(number, base); } I z dziesiętnego na inny: public static String convertInt(int number, int base){ return Integer.toString(number, base); } Zaokroglanie liczb Równie często jest to nam potrzebne. Gdy mamy podać tylko wydrukowany wynik to jest to całkiem proste. Z pomocą przychodzi printf, np: System.out.printf(&quot;%.2f%n&quot;, 265.335); //265,34 Gdzie: %.2 - określa precyzję, czyli ilość miejsc po przecinku, w tym przypadku 2 f - typ danych, w tym przypadku float %n - nowa linia Jeśli jednak musimy operować na zaokrąglonych liczbach, potrzebne jest nam coś więcej. Na Stack OverFlow często znajdowałem takie rozwiązanie: Math.round(x*100.0)/100.0 gdzie zera określają dokładność “przybliżenia”. Jednak nie zawsze zwraca to prawidłową odpowiedź. Przykładowo, jeśli za “x” podstawimy 265.335, to dostaniemy 265.33, co jest oczywiście niepoprawnym wynikiem, bo powinniśmy dostać 265.34. Ja rozwiązałem to w ten sposób: public static double round(double x, int n) { String rounded = String.format(Locale.ROOT,&quot;%.&quot;+n+&quot;f&quot;, x); return Double.parseDouble(rounded); } Wykorzystuje to podobną metodę co printf, tyle że później parsujemy to na double. Zauważ, że tutaj, jako argument podałem jeszcze Locale.ROOT. Wynika to z tego, że w różnych regionach inaczej jest formatowany tekst i tak dla Polski w metodzie printf/format separatorem liczby typu double jest &quot;,&quot;, co całkowicie nam psuje obliczenia, bo typ double korzysta z &quot;.&quot;. Zmiana Locale na ROOT rozwiązuje ten problem. Max/min wartość W zadaniach zazwyczaj proszą o maksymalną lub minimalną wartość z jakiegoś zbioru. Gdy dane przetrzymujemy w tablicy mamy do tego gotowe funkcje: public static int max(int[] array) { return Arrays.stream(array).max().getAsInt(); } public static int min(int[] array) { return Arrays.stream(array).min().getAsInt(); } Suma wartości Również czasem sumowanie wszystkich wartości się zdarza i tu też mamy gotowca: public static int sum(int[] array) { return Arrays.stream(array).sum(); } Wszystko dzięki streamom, które są z nami od Java 8. Jeśli operujemy na listach, też mamy gotowe metody do wyznaczania min/max: ArrayList&amp;lt;Integer&amp;gt; numbers = new ArrayList&amp;lt;&amp;gt;(); numbers.addAll(Arrays.asList(1,2,3,4)); Collections.max(numbers); //4 Collections.min(numbers); //1 Chociaż do sumowania już jest nieco mniej przyjaźnie i musimy użyć streamów: numbers.stream().mapToInt(i-&amp;gt;i.intValue()).sum() //10 Odwracanie stringa Często w zadaniach trzeba odwracać stringi (np. aby sprawdzić czy są tzw. “palindromami”). Można to zrobić błyskawicznie z pomocą StringBuildera. public static String reverse(String string) { return new StringBuilder(string).reverse().toString(); } Operowanie na literach w słowie Tu znacznie ułatwia sprawę funkcja, która każdy znak pakuje nam do tablicy, dzięki czemu później łatwo możemy na nich operować: char[] letters = &quot;Anagram&quot;.toCharArray(); //[A, n, a, g, r, a, m] Znajdowanie podciągów w stringach Sprawdzanie czy dany ciąg znaków zawiera inny podciąg jest bajecznie proste: &quot;fooandbar&quot;.contains(&quot;and&quot;); //true Zdarzyło się też porównywać prefiksy lub sufiksy między stringami, ale również do tego mamy gotowe metody, które sprawdzają czy ciąg zaczyna się lub kończy podanym stringiem: &quot;fooandbar&quot;.startsWith(&quot;foo&quot;); //true &quot;fooandbar&quot;.endsWith(&quot;bar&quot;); //true Czasem jednak musimy dobrać się do środka ciągów. W jednym zadaniu, z genotypu trzeba było wyciągać geny, które rozpoczynały się od “AA” a kończyły na “BB” i na nich przeprowadzać operację. Do tego typu zadań warto znać klasy Pattern i Matcher oraz umieć posługiwać się regexami. Do tego zadania użyłem metodę podobną do tej, jednak tę przerobiłem do ogólnego użytku, nie tylko pod zadanie: public static String[] getMatchesBetween(String string, String a, String b) { Pattern between = Pattern.compile(a+&quot;(.*?)&quot;+b); Matcher next = between.matcher(string); ArrayList&amp;lt;String&amp;gt; matches = new ArrayList&amp;lt;&amp;gt;(); while(next.find()){ matches.add(next.group()); } return matches.toArray(new String[matches.size()]); } W skrócie, znajduję nam wszystkie podciągi miedzy argumentami a i b, oraz pakuje je do listy, którą na koniec konwertujemy na tablicę. Gdybyśmy mieli tylko sprawdzać czy dany ciąg pasuje do innego podciągu, moglibyśmy się posłużyć tą metodą: &quot;fooandbar&quot;.matches(&quot;foo(.*?)bar&quot;); //true Kluczowy w tych metodach jest regex: (.\*?) gdzie . oznacza dowolny znak, a \*? to &quot;leniwy&quot; kawntyfikator? (ang. Reluctant quantifier), który określa, że . (dowolny znak) może się wystąpić zero lub więcej razy. Jeśli, np. nie uznawalibyśmy pustych ciągów między a i b to użylibyśmy kwantyfikatora +?, który określa, że znak musi wystąpić co najmniej raz. Z kolei inny rodzaj kwantyfikatora - zachłanny (ang. greedy), w np. w postaci * pobrałby najwięcej ile się da, czyli w naszym przypadku od znalezienia pierwszego 'AA' po ostatnie 'BB'. Różnica miedzy kwantyfikatorami leniwymi a zachłannymi polega na tym, że ten pierwszy dopasuje najmniej jak się da, a drugi jak najwięcej. Po więcej info odsyłam do dokumentacji Pattern Zaprezentuje to na przykładzie. Dajmy na to, że mamy taką o to tablicę z danymi: String[] genotypes = new String[3]; genotypes[0] = &quot;EBEAADDEDCBCAEBABBDBEADBBDAABBDDACDDECECECBBDDBCBEDAEBDAADCE&quot;; genotypes[1] = &quot;BCBAAEEDDBEDCBBCCABDAACEBBEBCCCCCABDDDBBAACCEDDCBBCEAAEEADBBDE&quot;; genotypes[2] = &quot;AADDEEDBBCCEEBBDEEDDAAAACDCDDCDBBEAADDEDDBBDCDDCDCAA&quot;; i wywołując tą metodę na każdym elemencie tej tablicy, dostaniemy nową tablicę z dopasowaniami, które tu w tym przykładzie od razu drukuję: for (String genotype : genotypes) { System.out.println(Arrays.toString(getMatchesBetween(genotype, &quot;AA&quot;, &quot;BB&quot;))); } i output dla poszczególnych kwantyfikatorów wygląda następująco: //dla (.*?) [AADDEDCBCAEBABB, AABB] [AAEEDDBEDCBB, AACEBB, AACCEDDCBB, AAEEADBB] [AADDEEDBB, AAAACDCDDCDBB, AADDEDDBB] //dla (.+?) [AADDEDCBCAEBABB, AABBDDACDDECECECBB] [AAEEDDBEDCBB, AACEBB, AACCEDDCBB, AAEEADBB] [AADDEEDBB, AAAACDCDDCDBB, AADDEDDBB] //dla (.*) [AADDEDCBCAEBABBDBEADBBDAABBDDACDDECECECBB] [AAEEDDBEDCBBCCABDAACEBBEBCCCCCABDDDBBAACCEDDCBBCEAAEEADBB] [AADDEEDBBCCEEBBDEEDDAAAACDCDDCDBBEAADDEDDBB] Ilości liter - statystyka Trafiały się też zadania gdzie trzeba było znaleźć ilości liter w słowie i wykonać na tym różne operacje (np. sprawdzanie czy słowa są anagramami). Napisałem do tego taką funkcję, która zwraca tablicę z liczbą poszczególnych liter: public static int[] countLetters(String word) { int[] letters = new int[26];//26 liter w alfabecie for ( int i = 0; i &amp;lt; word.length(); i++ ) { letters[word.charAt(i)-'A']++; } return letters; } Kluczowym czynnikiem jest tu operacja word.charAt(i)-'A', dzięki której obliczane jest miejsce w tablicy, które powinno zostać policzone w aktualnej iteracji. Jeśli nie wiesz co tu się dzieje, to znak jest przechowywany jako liczba (np. alfabet wielkich liter przyjmuje wartości od 60 - dla A, do 90 - dla Z), a my metodą charAt wyciągamy aktualny znak, dajmy na to 'B'(61) i odejmujemy od tego 'A'(60), zatem dostajemy pozycję 1 (61-60). Nasza tablica dla pewnego słowa po wydrukowaniu wyglądałaby tak: // A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0] &amp;lt;[ class=”idea”&amp;gt; Warto wiedzieć też, że można inkrementować znaki! &amp;lt;/[&amp;gt; Przykładowo: char a = 'A'; a++; System.out.println(a); //B Mając już taką wiedzę, możemy dostarczyć pełne statystyki jakiegoś tekstu. W jednym z zadań to własnie trzeba było zrobić. Najpierw wpakowałem wszystkie słowa do tablicy i następnie stworzyłem funkcję, która na podstawie podananej tablicy ze słowami, drukuje nam statystyki danego tekstu: private static void letterStats(String[] text) { int[] lettersCount = new int[26]; for (String word : text) { for(int i = 0; i&amp;lt;word.length(); i++){ lettersCount[word.charAt(i)-'A']++; } } double numberOfallLetters = Arrays.stream(lettersCount).sum(); char a = 'A'; for (int count : lettersCount) { double percentage = count*100.0/numberOfallLetters; System.out.println(a++ + &quot;: &quot; + count + &quot; (&quot; + String.format(Locale.ROOT, &quot;%.2f&quot;, percentage) + &quot;%)&quot;); } } A wyglądało to tak: A: 632 (7.55%) B: 196 (2.34%) C: 162 (1.94%) D: 422 (5.04%) E: 1093 (13.06%) F: 213 (2.55%) G: 151 (1.80%) H: 566 (6.76%) I: 522 (6.24%) J: 2 (0.02%) K: 64 (0.76%) L: 402 (4.80%) M: 193 (2.31%) N: 557 (6.66%) O: 641 (7.66%) P: 93 (1.11%) Q: 6 (0.07%) R: 524 (6.26%) S: 485 (5.80%) T: 792 (9.46%) U: 185 (2.21%) V: 84 (1.00%) W: 196 (2.34%) X: 3 (0.04%) Y: 185 (2.21%) Z: 0 (0.00%) I do tej pory to by było na tyle. Jeśli uzbieram większy zbiór przydatnych funkcji lub algorytmów, to przeleję to na kolejny wpis.</summary></entry><entry><title type="html">Co dalej z projektem jaki-jezyk-programowania.pl</title><link href="https://c0deboy.github.io/devcave/dajsiepoznac2017/co-dalej-z-projektem-jaki-jezyk-programowania" rel="alternate" type="text/html" title="Co dalej z projektem jaki-jezyk-programowania.pl" /><published>2017-04-22T02:00:00+02:00</published><updated>2017-04-22T02:00:00+02:00</updated><id>https://c0deboy.github.io/devcave/dajsiepoznac2017/co-dalej-z-projektem-jaki-jezyk-programowania</id><content type="html" xml:base="https://c0deboy.github.io/devcave/dajsiepoznac2017/co-dalej-z-projektem-jaki-jezyk-programowania">&lt;p&gt;Projekt będzie nadal rozwijany, jednak aktualnie przebiega to dosyć ociężale, niewiele się zmieniło. Wynika to z kilku czynników:&lt;/p&gt;

&lt;h2 id=&quot;działam-sam&quot;&gt;Działam sam.&lt;/h2&gt;

&lt;p&gt;Jak już wcześniej wspominałem, działam sam, na bieżąco ucząc się i przelewając całą wiedzę na stronę. Rozważam pomoc innych osób przy projekcie, ale obecnie nie mam czasu nawet tym się zająć. No właśnie… czas.&lt;/p&gt;

&lt;h2 id=&quot;brak-czasu-matura&quot;&gt;Brak czasu… matura&lt;/h2&gt;
&lt;p&gt;Obecnie większość mojego czasu idzie na przygotowywanie się do matury (mat-inf), swoją drogą wrzucę niedługo wpis z przydatnymi funkcjami w Javie, z których korzystałem podczas robienia zadań maturalnych, może komuś coś się przyda. Dlatego nie poświęcam tyle czasu na projekt/programowanie ile bym chciał. Tak więc na pełen etat zajmę się tym po maturach ;)&lt;/p&gt;

&lt;h2 id=&quot;dalsze-plany&quot;&gt;Dalsze plany&lt;/h2&gt;
&lt;p&gt;Pomysłów na to, co mogłoby się znaleźć na stronie jest wiele, jednak nie wiem, czy wszystko będę w stanie sam zrealizować. Ciężko to przewidzieć, wyjdzie w praniu. W każdym razie, w pierwszej kolejności zajmę się tym, co jest aktualnie na stronie. Wydaje mi się jednak, że tak czy inaczej, będę potrzebował pomocy kogoś z większym doświadczeniem i to może nawet nie jednej osoby, a więcej, bo projekt, którego się podjąłem, jest dosyć obszerny, a wiedza zdobywana z samego internetu nie jest miarodajna.&lt;/p&gt;

&lt;p&gt;To, co wymaga poprawy/rozbudowy w pierwszej kolejności:&lt;/p&gt;

&lt;hX&gt;Zawartość strony, w szczególności:&lt;/hX&gt;
&lt;ul&gt;
  &lt;li&gt;Opisy języków&lt;/li&gt;
  &lt;li&gt;Ścieżki wyboru języka&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chciałbym też dodać tooltipy z definicją (która będzie pobierana z jakiegoś miejsca), do powtarzających się słów na stronie (np. przy opisie języków), żeby nie wyjaśniać każdego słowa osobno w opisie. Jednak jeszcze nie do końca wiem jak to zrealizować. No i warto by było od czasu do czasu dorzucić coś do FAQ.&lt;/p&gt;

&lt;hX&gt;Od strony technicznej:&lt;/hX&gt;
&lt;ul&gt;
  &lt;li&gt;Dostępność&lt;/li&gt;
  &lt;li&gt;Refaktoryzacja&lt;/li&gt;
  &lt;li&gt;Poprawne wyświetlanie we wszystkich przeglądarkach&lt;/li&gt;
  &lt;li&gt;Rozwiązanie problemu statycznych stron&lt;/li&gt;
  &lt;li&gt;Może jakiś nowy system “quizu”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To tak w pierwszej kolejności. Jeśli masz coś, co powinienem dodać do tej listy, to pisz śmiało ;).&lt;/p&gt;

&lt;p&gt;Ponadto rozmyślałem, żeby w późniejszym czasie, jak już obecne cele zostaną zrealizowane, rozbudować stronę o najpopularniejsze i najważniejsze frameworki dla danego języka. Innym pomysłem jest też stworzenie “słownika programisty” (w podobnym formacie jak FAQ), jakichś list “must know”, a może nawet polecanych książek czy stron, z których warto czerpać wiedzę. Jednak są to tak obszerne tematy i zrobienie tego dla każdego języka byłoby dla jednej osoby nie lada wyzwaniem, więc na razie zostaje to w strefie rozmyślań. Zobaczymy jak to się potoczy.&lt;/p&gt;

&lt;h2 id=&quot;podsumowując&quot;&gt;Podsumowując&lt;/h2&gt;
&lt;p&gt;Projekt zamierzam dalej rozwijać po delikatnym zastoju. Czy projekt się utrzyma, to się okaże, ale tak czy inaczej, z pewnością wyniosę z niego sporo wiedzy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jeśli chciałbyś podzielić się swoją wiedzą, pomóc w rozwoju projektu czy cokolwiek innego to śmiało pisz. Ktoś do współpracy też mile widziany ;)&lt;/strong&gt;&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><summary type="html">Projekt będzie nadal rozwijany, jednak aktualnie przebiega to dosyć ociężale, niewiele się zmieniło. Wynika to z kilku czynników: Działam sam. Jak już wcześniej wspominałem, działam sam, na bieżąco ucząc się i przelewając całą wiedzę na stronę. Rozważam pomoc innych osób przy projekcie, ale obecnie nie mam czasu nawet tym się zająć. No właśnie… czas. Brak czasu… matura Obecnie większość mojego czasu idzie na przygotowywanie się do matury (mat-inf), swoją drogą wrzucę niedługo wpis z przydatnymi funkcjami w Javie, z których korzystałem podczas robienia zadań maturalnych, może komuś coś się przyda. Dlatego nie poświęcam tyle czasu na projekt/programowanie ile bym chciał. Tak więc na pełen etat zajmę się tym po maturach ;) Dalsze plany Pomysłów na to, co mogłoby się znaleźć na stronie jest wiele, jednak nie wiem, czy wszystko będę w stanie sam zrealizować. Ciężko to przewidzieć, wyjdzie w praniu. W każdym razie, w pierwszej kolejności zajmę się tym, co jest aktualnie na stronie. Wydaje mi się jednak, że tak czy inaczej, będę potrzebował pomocy kogoś z większym doświadczeniem i to może nawet nie jednej osoby, a więcej, bo projekt, którego się podjąłem, jest dosyć obszerny, a wiedza zdobywana z samego internetu nie jest miarodajna. To, co wymaga poprawy/rozbudowy w pierwszej kolejności: Zawartość strony, w szczególności: Opisy języków Ścieżki wyboru języka Chciałbym też dodać tooltipy z definicją (która będzie pobierana z jakiegoś miejsca), do powtarzających się słów na stronie (np. przy opisie języków), żeby nie wyjaśniać każdego słowa osobno w opisie. Jednak jeszcze nie do końca wiem jak to zrealizować. No i warto by było od czasu do czasu dorzucić coś do FAQ. Od strony technicznej: Dostępność Refaktoryzacja Poprawne wyświetlanie we wszystkich przeglądarkach Rozwiązanie problemu statycznych stron Może jakiś nowy system “quizu” To tak w pierwszej kolejności. Jeśli masz coś, co powinienem dodać do tej listy, to pisz śmiało ;). Ponadto rozmyślałem, żeby w późniejszym czasie, jak już obecne cele zostaną zrealizowane, rozbudować stronę o najpopularniejsze i najważniejsze frameworki dla danego języka. Innym pomysłem jest też stworzenie “słownika programisty” (w podobnym formacie jak FAQ), jakichś list “must know”, a może nawet polecanych książek czy stron, z których warto czerpać wiedzę. Jednak są to tak obszerne tematy i zrobienie tego dla każdego języka byłoby dla jednej osoby nie lada wyzwaniem, więc na razie zostaje to w strefie rozmyślań. Zobaczymy jak to się potoczy. Podsumowując Projekt zamierzam dalej rozwijać po delikatnym zastoju. Czy projekt się utrzyma, to się okaże, ale tak czy inaczej, z pewnością wyniosę z niego sporo wiedzy. Jeśli chciałbyś podzielić się swoją wiedzą, pomóc w rozwoju projektu czy cokolwiek innego to śmiało pisz. Ktoś do współpracy też mile widziany ;)</summary></entry><entry><title type="html">Light aria tooltips</title><link href="https://c0deboy.github.io/devcave/dajsiepoznac2017/light-aria-tooltips" rel="alternate" type="text/html" title="Light aria tooltips" /><published>2017-04-13T02:00:00+02:00</published><updated>2017-04-13T02:00:00+02:00</updated><id>https://c0deboy.github.io/devcave/dajsiepoznac2017/light-aria-tooltips</id><content type="html" xml:base="https://c0deboy.github.io/devcave/dajsiepoznac2017/light-aria-tooltips">&lt;p&gt;Postanowiłem stworzyć lekkie i niezależne (w czystym JS lub jak to woli pure JS) tooltipy. Chciałem również zadbać o ich dostępność. Sam mechanizm dosyć przyjemnie się pisało, ale ta druga część to już koszmar.&lt;/p&gt;

&lt;h2 id=&quot;ah-ta-dostępność&quot;&gt;Ah ta dostępność…&lt;/h2&gt;

&lt;p&gt;Szczerze to już rzygam głosem screen rederów, jak je słyszę to robi mi się nie dobrze. 3/4 czasu poświęciłem na testowanie dostępności tych tooltipów, a i tak nie rozwiązałem problemu. Tzn. w większości przypadków działa prawidłowo, ale gdy opakuję zwykłe słowo(np. w span) tooltipem to screen readery tego nie czytają.&lt;/p&gt;

&lt;p&gt;Spróbowałem chyba każdą możliwą kombinację aria-live, describedby, labeledby itd. i nic. Zmieniałem również położenie tooltipa: poza elementem, który go wywołuje, jak i w środku tego elementu (chociaż ta opcja raczej odpada, bo chciałbym, aby nad każdym elementem mógł się pojawić tooltip, a np. w image już nie da rady). Bez żadnego skutku.&lt;/p&gt;

&lt;h2 id=&quot;dziwne-zachowania&quot;&gt;Dziwne zachowania&lt;/h2&gt;

&lt;p&gt;Screen readery (testowałem NVDA i ChromeVOX) zachowują się co najmniej dziwnie. Jeśli “tabujemy” od góry do elementu z tooltipem to czyta co innego, jak od dołu (shift+tab) - co innego. I właśnie od tyłu zwykłe słowo z tooltipem jest już prawidłowo interpretowane.&lt;/p&gt;

&lt;p&gt;Dwa takie same elementy z identycznymi właściwościami? O nie. Dla screen readerów to całkiem coś innego. Przykład?
&lt;img src=&quot;/img/dwa-elementy.png&quot; alt=&quot;Dwa elementy span na stronie&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oba (Jak to działa?) wygenerowane za pomocą tej samej funkcji. Ale jak są odczytywane na mojej stronie? Pierwszy to “Jak to działa - nagłówek”. A drugi? “Jak to działa - na podstawie twoich odpowiedzi…” czyli poprawnie… FUCK LOGIC.&lt;/p&gt;

&lt;p&gt;Już nie wspomnę o tym, że co innego czytają, gdy odpalimy tooltipa kliknięciem, co innego, gdy tabem, a co innego gdy jest hover.&lt;/p&gt;

&lt;p&gt;Może ktoś pomoże? ;)&lt;/p&gt;

&lt;p&gt;Obecnie testuje dwie wersje:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1 - tooltipy są generowane i wstawiane do DOM od razu po wczytaniu strony, a tylko pokazywane, gdy dany element usyska focus&lt;/li&gt;
  &lt;li&gt;2 - tooltipy są generowane i pokazywane dynamicznie, gdy dany element uzyska focus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Można podejrzeć na fiddle:&lt;/p&gt;

&lt;h2 id=&quot;wersja-1&quot;&gt;Wersja 1&lt;/h2&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/C0deboy/999rrzo1/embed/result,js,html,css/dark/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;wersja-2&quot;&gt;Wersja 2&lt;/h2&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/C0deboy/nv2npbnm/embed/result,js,html,css/dark/&quot;&gt;&lt;/script&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><summary type="html">Postanowiłem stworzyć lekkie i niezależne (w czystym JS lub jak to woli pure JS) tooltipy. Chciałem również zadbać o ich dostępność. Sam mechanizm dosyć przyjemnie się pisało, ale ta druga część to już koszmar. Ah ta dostępność… Szczerze to już rzygam głosem screen rederów, jak je słyszę to robi mi się nie dobrze. 3/4 czasu poświęciłem na testowanie dostępności tych tooltipów, a i tak nie rozwiązałem problemu. Tzn. w większości przypadków działa prawidłowo, ale gdy opakuję zwykłe słowo(np. w span) tooltipem to screen readery tego nie czytają. Spróbowałem chyba każdą możliwą kombinację aria-live, describedby, labeledby itd. i nic. Zmieniałem również położenie tooltipa: poza elementem, który go wywołuje, jak i w środku tego elementu (chociaż ta opcja raczej odpada, bo chciałbym, aby nad każdym elementem mógł się pojawić tooltip, a np. w image już nie da rady). Bez żadnego skutku. Dziwne zachowania Screen readery (testowałem NVDA i ChromeVOX) zachowują się co najmniej dziwnie. Jeśli “tabujemy” od góry do elementu z tooltipem to czyta co innego, jak od dołu (shift+tab) - co innego. I właśnie od tyłu zwykłe słowo z tooltipem jest już prawidłowo interpretowane. Dwa takie same elementy z identycznymi właściwościami? O nie. Dla screen readerów to całkiem coś innego. Przykład? Oba (Jak to działa?) wygenerowane za pomocą tej samej funkcji. Ale jak są odczytywane na mojej stronie? Pierwszy to “Jak to działa - nagłówek”. A drugi? “Jak to działa - na podstawie twoich odpowiedzi…” czyli poprawnie… FUCK LOGIC. Już nie wspomnę o tym, że co innego czytają, gdy odpalimy tooltipa kliknięciem, co innego, gdy tabem, a co innego gdy jest hover. Może ktoś pomoże? ;) Obecnie testuje dwie wersje: 1 - tooltipy są generowane i wstawiane do DOM od razu po wczytaniu strony, a tylko pokazywane, gdy dany element usyska focus 2 - tooltipy są generowane i pokazywane dynamicznie, gdy dany element uzyska focus Można podejrzeć na fiddle: Wersja 1 Wersja 2</summary></entry><entry><title type="html">Google like a pro</title><link href="https://c0deboy.github.io/devcave/dajsiepoznac2017/google-like-a-pro" rel="alternate" type="text/html" title="Google like a pro" /><published>2017-04-07T09:00:00+02:00</published><updated>2017-04-07T09:00:00+02:00</updated><id>https://c0deboy.github.io/devcave/dajsiepoznac2017/google-like-a-pro</id><content type="html" xml:base="https://c0deboy.github.io/devcave/dajsiepoznac2017/google-like-a-pro">&lt;p&gt;Google to najlepszy przyjaciel programisty. Sprawne wyszukiwanie informacji to bardzo ważna umiejętność i robi to każdy bez względu na poziom zaawansowania. Większość problemów, zwłaszcza początkujących programistów, na pewno została już gdzieś rozwiązana. Trzeba mieć tego świadomość. Zanim założysz kolejny wątek na forum, który już się pojawił pewnie nie jednokrotnie, Googluj. W tym poście zaprezentuję sposoby, które używam, aby dostać się do tego czego potrzebuję.&lt;/p&gt;

&lt;h2 id=&quot;1-nie-wiem-jak-zrobić-x&quot;&gt;1# Nie wiem jak zrobić x&lt;/h2&gt;
&lt;p&gt;Można próbować po polsku, ale 90% rozwiązań jest w języku angielskim. Wystarczy, że wyszukasz problem w stylu “How to x”, a nawet jest duże prawdopodobieństwo, że znajdziesz to, czego szukasz wpisując same słowa kluczowe (oczywiście w języku angielskim).&lt;/p&gt;

&lt;p&gt;Szukając odpowiedzi na dany problem &lt;u&gt;zwracaj uwagę na daty opublikowania odpowiedzi/postu&lt;/u&gt;, bo po drodze można się natknąć na masę przestarzałych rozwiązań, a nie jest to coś, co my jako programiści chcielibyśmy stosować. Dotyczy to również Stack OverFlow ;)&lt;/p&gt;

&lt;p&gt;Warto korzystać z opcji wyszukiwania oferowaną przez Google: Narzędzia -&amp;gt; Kiedykolwiek i wybieramy interesujący nas okres&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/google/google-search-date.png&quot; alt=&quot;Narzędzia wyszukiwania Google&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-za-dużo-wyników-ze-strony-której-nie-lubisz&quot;&gt;2# Za dużo wyników ze strony, której nie lubisz?&lt;/h2&gt;
&lt;p&gt;Użyj w wyszukiwarce operatora “-site:”, np. tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-site:w3schools.com twoje-zapytanie&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;gdy nie postawisz “-“ przed “site” dostaniesz odwrotny efekt - wyniki tylko z tej strony.&lt;/p&gt;

&lt;h2 id=&quot;3-poszukujesz-pdf-a&quot;&gt;3# Poszukujesz PDF-a?&lt;/h2&gt;
&lt;p&gt;Dodaj do zapytania:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;filetype:pdf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;a pokażą Ci się tylko PDF-y.&lt;/p&gt;

&lt;h2 id=&quot;4-grafiki-które-możesz-wykorzystać&quot;&gt;4# Grafiki, które możesz wykorzystać&lt;/h2&gt;
&lt;p&gt;Skąd brać grafiki na stronę/projekt? Możesz skorzystać z tego:&lt;/p&gt;

&lt;p&gt;Google Grafika -&amp;gt; Narzędzia -&amp;gt; Prawa do użytkowania -&amp;gt; Oznaczone do ponownego wykorzystania&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/google/google-search-grapchics.png&quot; alt=&quot;Narzędzia wyszukiwania Grafik Google&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-szukasz-podobnej-grafiki-albo-o-innych-wymiarach&quot;&gt;5# Szukasz podobnej grafiki albo o innych wymiarach?&lt;/h2&gt;

&lt;p&gt;Spróbuj wyszukiwania obrazem klikając na nim PPM:
&lt;img src=&quot;/img/google/google-search-byimage.png&quot; alt=&quot;Narzędzia wyszukiwania Grafik Google&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-strona-którą-chciałeś-odwiedzić-jest-offline&quot;&gt;6# Strona, którą chciałeś odwiedzić jest offline?&lt;/h2&gt;
&lt;p&gt;Skorzystaj z &lt;a href=&quot;http://cachedview.com/&quot;&gt;Cachedview&lt;/a&gt;, gdzie możesz podejrzeć wcześniejsze kopie strony.&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><summary type="html">Google to najlepszy przyjaciel programisty. Sprawne wyszukiwanie informacji to bardzo ważna umiejętność i robi to każdy bez względu na poziom zaawansowania. Większość problemów, zwłaszcza początkujących programistów, na pewno została już gdzieś rozwiązana. Trzeba mieć tego świadomość. Zanim założysz kolejny wątek na forum, który już się pojawił pewnie nie jednokrotnie, Googluj. W tym poście zaprezentuję sposoby, które używam, aby dostać się do tego czego potrzebuję. 1# Nie wiem jak zrobić x Można próbować po polsku, ale 90% rozwiązań jest w języku angielskim. Wystarczy, że wyszukasz problem w stylu “How to x”, a nawet jest duże prawdopodobieństwo, że znajdziesz to, czego szukasz wpisując same słowa kluczowe (oczywiście w języku angielskim). Szukając odpowiedzi na dany problem zwracaj uwagę na daty opublikowania odpowiedzi/postu, bo po drodze można się natknąć na masę przestarzałych rozwiązań, a nie jest to coś, co my jako programiści chcielibyśmy stosować. Dotyczy to również Stack OverFlow ;) Warto korzystać z opcji wyszukiwania oferowaną przez Google: Narzędzia -&amp;gt; Kiedykolwiek i wybieramy interesujący nas okres 2# Za dużo wyników ze strony, której nie lubisz? Użyj w wyszukiwarce operatora “-site:”, np. tak: -site:w3schools.com twoje-zapytanie gdy nie postawisz “-“ przed “site” dostaniesz odwrotny efekt - wyniki tylko z tej strony. 3# Poszukujesz PDF-a? Dodaj do zapytania: filetype:pdf a pokażą Ci się tylko PDF-y. 4# Grafiki, które możesz wykorzystać Skąd brać grafiki na stronę/projekt? Możesz skorzystać z tego: Google Grafika -&amp;gt; Narzędzia -&amp;gt; Prawa do użytkowania -&amp;gt; Oznaczone do ponownego wykorzystania 5# Szukasz podobnej grafiki albo o innych wymiarach? Spróbuj wyszukiwania obrazem klikając na nim PPM: 6# Strona, którą chciałeś odwiedzić jest offline? Skorzystaj z Cachedview, gdzie możesz podejrzeć wcześniejsze kopie strony.</summary></entry></feed>