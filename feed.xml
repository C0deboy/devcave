<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.6.2">Jekyll</generator><link href="https://devcave.pl/feed.xml" rel="self" type="application/atom+xml" /><link href="https://devcave.pl/" rel="alternate" type="text/html" /><updated>2017-11-15T21:16:10+01:00</updated><id>https://devcave.pl/</id><title type="html">devcave.pl</title><subtitle>Devcave - jaskinia programisty. Blog programisty na tematy związane z branżą IT, a szczególnie z programowaniem. Pracuję głownie z językami Java i Javascript, ale na blogu nie zabraknie tematów ogólnych, dla każdego programisty.</subtitle><entry><title type="html">Formularz kontaktowy bez backendu/bez PHP</title><link href="https://devcave.pl/frontend/formularz-kontaktowy-bez-backendu" rel="alternate" type="text/html" title="Formularz kontaktowy bez backendu/bez PHP" /><published>2017-11-15T13:00:00+01:00</published><updated>2017-11-15T13:00:00+01:00</updated><id>https://devcave.pl/frontend/formularz-kontaktowy-bez-backendu</id><content type="html" xml:base="https://devcave.pl/frontend/formularz-kontaktowy-bez-backendu">&lt;p&gt;Podczas DSP2017 tworzyłem formularz kontaktowy dla &lt;a href=&quot;https://jaki-jezyk-programowania.pl/&quot;&gt;jaki-jezyk-programowania.pl&lt;/a&gt; z wykorzystaniem PHP, który działał na wykupionym serwerze. Później  jednak przeniosłem swoją stronę i bloga na Github Pages, gdzie z PHP już nie można było zrobić użytku. Wysyłanie wiadomości email bez backendu wydawało mi się niemożliwe i myślałem, że już muszę zrezygnować z formularza kontaktowego na stronie. Jednak na ratunek przyszła mi strona &lt;a href=&quot;https://formspree.io/&quot;&gt;formspree.io&lt;/a&gt;, za pośrednictwem której możliwe jest wysyłanie wiadomości email na dowolnego maila.&lt;/p&gt;

&lt;h1 id=&quot;co-zawiera-i-jak-działa-formularz&quot;&gt;Co zawiera i jak działa formularz?&lt;/h1&gt;
&lt;p&gt;Formularz jest ulepszoną wersją tego, który tworzyłem podczas DSP2017. Tyle, że bez PHP. Jednak jeśli nie widziałeś wcześniejszych postów to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Jest otwierany w formie okienka za pomocą przycisku.&lt;/li&gt;
  &lt;li&gt;Jest wysyłany asynchronicznie, wykorzystując AJAX - czyli bez przeładowania strony.&lt;/li&gt;
  &lt;li&gt;Walidacja odbywa się w Javascript z wykorzystaniem Validation API. Gdy coś jest nie tak, użytkownik dostaje wiadomość.&lt;/li&gt;
  &lt;li&gt;Zadbałem też o kwestie dostępności, np. komunikaty mogą być odczytane przez czytniki ekranowe, obsługa klawiaturą (m. in. zamykanie ESC czy zapętlone tabowanie) itd.&lt;/li&gt;
  &lt;li&gt;Jest w pełni responsywny - poprawnie wyświetla się na każdym ekranie.&lt;/li&gt;
  &lt;li&gt;Formularz można też otworzyć z linka, np. &lt;a href=&quot;https://jaki-jezyk-programowania.pl/#formularz-kontaktowy&quot;&gt;jaki-jezyk-programowania.pl/#formularz-kontaktowy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Udostępniam go na &lt;a href=&quot;https://github.com/C0deboy/contact-form-no-backend&quot;&gt;Githubie&lt;/a&gt; w osobnym repozytorium. Podejrzyj online &lt;a href=&quot;https://c0deboy.github.io/contact-form-no-backend/&quot;&gt;tutaj&lt;/a&gt;. Możesz go wykorzystać na swojej stronie. Jedyne czego wymaga to HTML, Javascript i jQuery - ale praktycznie tylko do AJAX. Jeśli nie używasz na swojej stronie jQuery nie ma sensu dołączać tej kobyły tylko do tego. Możesz przepisać to z użyciem czegoś lżejszego lub w czystym Javascriptcie.&lt;/p&gt;

&lt;h1 id=&quot;kroki-które-musisz-wykonać&quot;&gt;Kroki, które musisz wykonać&lt;/h1&gt;

&lt;h2 id=&quot;pliki&quot;&gt;Pliki&lt;/h2&gt;
&lt;p&gt;Pobierz paczkę z &lt;a href=&quot;https://github.com/C0deboy/contact-form-no-backend&quot;&gt;Githuba&lt;/a&gt;. Umieść plik JS i CSS w swoim projekcie.&lt;/p&gt;

&lt;h2 id=&quot;przygotowanie-strony-z-formularzem&quot;&gt;Przygotowanie strony z formularzem&lt;/h2&gt;

&lt;p&gt;Otwórz plik &lt;span class=&quot;file&quot;&gt;index.html&lt;/span&gt;, skąd będziesz mógł wziąć potrzebne elementy. Zamieszczę je również tutaj, ale z czasem mogą ulec zmianie, więc lepiej je brać bezpośrednio z &lt;span class=&quot;file&quot;&gt;index.html&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;I tak jak w tym pliku, w sekcji &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; na swojej stronie załącz arkusz styli CSS, reCAPTCHA i Font Awesome - jeśli chcesz mieć ładne ikonki:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;css/form.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.google.com/recaptcha/api.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Przed końcem sekcji &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; załącz formularz:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;formularz-kontaktowy&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contact&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialog&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Formularz kontaktowy&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;emailForm&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://formspree.io/your.email@example.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;half&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-live=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;polite&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            Twój email
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-data&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wpisz tu twój email&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;half&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-live=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;polite&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            Temat
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-data&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_subject&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wpisz tu temat wiadomości&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minlength=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxlength=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;78&quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-live=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;polite&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            Wiadomość
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-data&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wpisz tu twoją wiadomość&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minlength=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;maxlength=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6000&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recaptcha-label&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-live=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;polite&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;g-recaptcha&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tabindex=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-sitekey=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6LevbxMUAAAAAIa8dsrFNJn0S_b_t5K8INV4z2JD&quot;&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;data-callback=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recaptchaClearErr&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;emailFormSubmit main-btn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Wyślij&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;emailFormAlert&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-live=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;polite&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close-contact-btn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close-btn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Zamknij formularz kontaktowy&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Zamknij formularz kontaktowy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-times close-form&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;oraz jQuery i plik JS z obsługą formularza:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://code.jquery.com/jquery-3.2.1.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;js/emailform.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Następnie umieść przycisk do otwierania formularza w wybranym przez siebie miejscu:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open-contact-btn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-btn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-envelope-o&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Formularz kontaktowy
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;twój-email-i-site-key&quot;&gt;Twój email i site key&lt;/h2&gt;

&lt;p&gt;Podaj twój email w atrybucie &lt;code class=&quot;highlight&quot;&gt;&lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;/code&gt; formularza:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;emailForm&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://formspree.io/your.email@example.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Zdobądź &lt;a href=&quot;https://www.google.com/recaptcha/admin&quot;&gt;reCAPTCHA V2&lt;/a&gt; site key i kopiuj wklej go do atrybutu &lt;code class=&quot;highlight&quot;&gt;&lt;span class=&quot;na&quot;&gt;data-sitekey&lt;/span&gt;&lt;/code&gt; w:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;g-recaptcha&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tabindex=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-sitekey=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6Lc9_xMUAAAAAFPVNhvDKb9lMXHGI4o7-zhqkTgL&quot;&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;data-callback=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;recaptchaClearErr&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ostatni-krok&quot;&gt;Ostatni krok&lt;/h2&gt;
&lt;p&gt;Użyj formularza i wyślij pierwszą wiadomość - obojętnie co. Dostaniesz maila od formspree.io, gdzie będziesz mógł potwierdzić, że chcesz otrzymywać maile ze swojej strony.&lt;/p&gt;

&lt;p&gt;I gotowe. Od tej pory wszystkie maila wysłane za pomocą tego formularza będą trafiać na twoją skrzynkę.&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="Frontend" /><category term="Frontend" /><category term="Jak-zrobić" /><category term="Formularz-kontaktowy" /><summary type="html">Podczas DSP2017 tworzyłem formularz kontaktowy dla jaki-jezyk-programowania.pl z wykorzystaniem PHP, który działał na wykupionym serwerze. Później jednak przeniosłem swoją stronę i bloga na Github Pages, gdzie z PHP już nie można było zrobić użytku. Wysyłanie wiadomości email bez backendu wydawało mi się niemożliwe i myślałem, że już muszę zrezygnować z formularza kontaktowego na stronie. Jednak na ratunek przyszła mi strona formspree.io, za pośrednictwem której możliwe jest wysyłanie wiadomości email na dowolnego maila. Co zawiera i jak działa formularz? Formularz jest ulepszoną wersją tego, który tworzyłem podczas DSP2017. Tyle, że bez PHP. Jednak jeśli nie widziałeś wcześniejszych postów to: Jest otwierany w formie okienka za pomocą przycisku. Jest wysyłany asynchronicznie, wykorzystując AJAX - czyli bez przeładowania strony. Walidacja odbywa się w Javascript z wykorzystaniem Validation API. Gdy coś jest nie tak, użytkownik dostaje wiadomość. Zadbałem też o kwestie dostępności, np. komunikaty mogą być odczytane przez czytniki ekranowe, obsługa klawiaturą (m. in. zamykanie ESC czy zapętlone tabowanie) itd. Jest w pełni responsywny - poprawnie wyświetla się na każdym ekranie. Formularz można też otworzyć z linka, np. jaki-jezyk-programowania.pl/#formularz-kontaktowy Udostępniam go na Githubie w osobnym repozytorium. Podejrzyj online tutaj. Możesz go wykorzystać na swojej stronie. Jedyne czego wymaga to HTML, Javascript i jQuery - ale praktycznie tylko do AJAX. Jeśli nie używasz na swojej stronie jQuery nie ma sensu dołączać tej kobyły tylko do tego. Możesz przepisać to z użyciem czegoś lżejszego lub w czystym Javascriptcie. Kroki, które musisz wykonać Pliki Pobierz paczkę z Githuba. Umieść plik JS i CSS w swoim projekcie. Przygotowanie strony z formularzem Otwórz plik index.html, skąd będziesz mógł wziąć potrzebne elementy. Zamieszczę je również tutaj, ale z czasem mogą ulec zmianie, więc lepiej je brać bezpośrednio z index.html. I tak jak w tym pliku, w sekcji &amp;lt;head&amp;gt; na swojej stronie załącz arkusz styli CSS, reCAPTCHA i Font Awesome - jeśli chcesz mieć ładne ikonki: &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/form.css&quot;&amp;gt; &amp;lt;script src=&quot;https://www.google.com/recaptcha/api.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;&amp;gt; Przed końcem sekcji &amp;lt;body&amp;gt; załącz formularz: &amp;lt;div id=&quot;formularz-kontaktowy&quot; class=&quot;contact&quot; role=&quot;dialog&quot; aria-label=&quot;Formularz kontaktowy&quot; aria-hidden=&quot;true&quot;&amp;gt; &amp;lt;form class=&quot;emailForm&quot; method=&quot;POST&quot; action=&quot;https://formspree.io/your.email@example.com&quot;&amp;gt; &amp;lt;label class=&quot;half&quot; aria-live=&quot;polite&quot;&amp;gt; Twój email &amp;lt;input class=&quot;form-data&quot; name=&quot;email&quot; type=&quot;email&quot; placeholder=&quot;Wpisz tu twój email&quot; required&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;label class=&quot;half&quot; aria-live=&quot;polite&quot;&amp;gt; Temat &amp;lt;input class=&quot;form-data&quot; name=&quot;_subject&quot; placeholder=&quot;Wpisz tu temat wiadomości&quot; minlength=&quot;4&quot; maxlength=&quot;78&quot; required&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;label aria-live=&quot;polite&quot;&amp;gt; Wiadomość &amp;lt;textarea class=&quot;form-data&quot; name=&quot;message&quot; placeholder=&quot;Wpisz tu twoją wiadomość&quot; minlength=&quot;4&quot; maxlength=&quot;6000&quot; required&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;label class=&quot;recaptcha-label&quot; aria-live=&quot;polite&quot;&amp;gt; &amp;lt;div class=&quot;g-recaptcha&quot; tabindex=&quot;-1&quot; data-sitekey=&quot;6LevbxMUAAAAAIa8dsrFNJn0S_b_t5K8INV4z2JD&quot; data-callback=&quot;recaptchaClearErr&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;button class=&quot;emailFormSubmit main-btn&quot; name=&quot;submit&quot; type=&quot;submit&quot;&amp;gt;Wyślij&amp;lt;/button&amp;gt; &amp;lt;div class=&quot;emailFormAlert&quot; aria-live=&quot;polite&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;button type=&quot;button&quot; id=&quot;close-contact-btn&quot; class=&quot;close-btn&quot; aria-label=&quot;Zamknij formularz kontaktowy&quot; title=&quot;Zamknij formularz kontaktowy&quot;&amp;gt; &amp;lt;i class=&quot;fa fa-times close-form&quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; oraz jQuery i plik JS z obsługą formularza: &amp;lt;script src=&quot;https://code.jquery.com/jquery-3.2.1.min.js&quot; integrity=&quot;sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&quot;js/emailform.js&quot;&amp;gt;&amp;lt;/script&amp;gt; Następnie umieść przycisk do otwierania formularza w wybranym przez siebie miejscu: &amp;lt;button id=&quot;open-contact-btn&quot; class=&quot;main-btn&quot;&amp;gt; &amp;lt;i class=&quot;fa fa-envelope-o&quot; aria-hidden=&quot;true&quot;&amp;gt;&amp;lt;/i&amp;gt; Formularz kontaktowy &amp;lt;/button&amp;gt; Twój email i site key Podaj twój email w atrybucie action formularza: &amp;lt;form class=&quot;emailForm&quot; method=&quot;POST&quot; action=&quot;https://formspree.io/your.email@example.com&quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/form&amp;gt; Zdobądź reCAPTCHA V2 site key i kopiuj wklej go do atrybutu data-sitekey w: &amp;lt;div class=&quot;g-recaptcha&quot; tabindex=&quot;-1&quot; data-sitekey=&quot;6Lc9_xMUAAAAAFPVNhvDKb9lMXHGI4o7-zhqkTgL&quot; data-callback=&quot;recaptchaClearErr&quot;&amp;gt;&amp;lt;/div&amp;gt; Ostatni krok Użyj formularza i wyślij pierwszą wiadomość - obojętnie co. Dostaniesz maila od formspree.io, gdzie będziesz mógł potwierdzić, że chcesz otrzymywać maile ze swojej strony. I gotowe. Od tej pory wszystkie maila wysłane za pomocą tego formularza będą trafiać na twoją skrzynkę.</summary></entry><entry><title type="html">Wyszukiwarka na statycznych stronach/blogu bez backendu</title><link href="https://devcave.pl/frontend/wyszukiwarka-na-blogu-bez-backendu" rel="alternate" type="text/html" title="Wyszukiwarka na statycznych stronach/blogu bez backendu" /><published>2017-11-10T13:00:00+01:00</published><updated>2017-11-10T13:00:00+01:00</updated><id>https://devcave.pl/frontend/wyszukiwarka-na-blogu-bez-backendu</id><content type="html" xml:base="https://devcave.pl/frontend/wyszukiwarka-na-blogu-bez-backendu">&lt;p&gt;Zastanawiałem się niedawno czy możliwe jest zrobienie wyszukiwarki na statycznej stronie/blogu bez użycia technologii backendowych (chciałem mieć taką na blogu). Okazuję się, że tak - zdziwiłbym się, jeśli było by  inaczej, bo czego to nie można zrobić w IT? Pokażę jak to zrobić wykorzystując projekt na Githubie &lt;a href=&quot;https://github.com/daviddarnes/jekyll-search-js&quot;&gt;jekyll-search-js&lt;/a&gt;, który zmodyfikowałem na swoje potrzeby. Niby jest on typowo pod Jekylla, ale można wykorzystać to w innych technologiach - kluczowe jest wygenerowanie wcześniej pliku JSON z mapą naszych linków do wyszukiwania.&lt;/p&gt;

&lt;h1 id=&quot;generowanie-pliku-z-mapą-wyszukiwania&quot;&gt;Generowanie pliku z mapą wyszukiwania&lt;/h1&gt;

&lt;p&gt;Bez tego nasza wyszukiwarka się nie obejdzie. To w nim będzie się odbywało wyszukiwanie elementów. Jeśli mamy możliwość wygenerować taki plik, to będziemy mogli zrobić wyszukiwarkę. Dlatego nie jest to ograniczone do Jekylla jak nazwa wskazuje. Zapewne można to zrobić na co najmniej kilka sposobów ;)&lt;/p&gt;

&lt;p&gt;W Jekyllu jest to całkiem proste. Po ściągnięciu paczki z Githuba umieszczamy ją w zasobach projektu i otwieramy plik &lt;span class=&quot;file&quot;&gt;search.json&lt;/span&gt;. W domyślnej wersji do wyszukiwarki trafią nie tylko posty, ale również podstrony. Na blogu chciałem wyszukiwarkę tylko dla postów i zmodyfikowałem nieco kod:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;---
layout: null
sitemap: false
---

&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
[
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where_exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'collection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'collection.output != false'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;collection&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;in&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;collections&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where_exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'doc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'doc.sitemap != false'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;doc&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;in&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docs&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%-m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
      {
        &quot;title&quot;: &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;,
        &quot;subtitle&quot;: &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;,
        &quot;date&quot;: &quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%-d&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;stycznia&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;lutego&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'3'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;marca&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'4'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;kwietnia&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'5'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;maja&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'6'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;czerwca&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'7'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;lipca&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'8'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;sierpnia&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'9'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;września&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'10'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;października&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'11'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;listopada&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'12'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;grudnia&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endcase&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%Y&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;,
        &quot;url&quot;: &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;doc.url&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
      }&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;unless&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forloop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;,&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endunless&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
]
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endcapture&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lstrip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ponadto, dodałem wszystkie brakujące informację o poście - podtytuł i datę, a usunąłem miedzy innymi content, bo nie chcę w wyszukiwarce pokazywać treści postu, tylko sam odnośnik. Te brzydkie “casey” po środku odpowiadają za tłumaczenie miesięcy na polski. Niestety w Jekyllu nie ma lepszego rozwiązania.&lt;/p&gt;

&lt;p&gt;Po wygenerowaniu pliku przez Jekyll wygląda to tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Projekt jaki-jezyk-programowania.pl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Wprowadzenie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1 marca 2017&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/dajsiepoznac2017/wprowadzenie&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Przełącznik motywu, tryb nocny na blogu/stronie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tryb ciemny/jasny w łatwy sposób, tylko JS.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2 listopada 2017&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/frontend/przelacznik-motywu-ciemny-na-strone&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Liceum vs technikum - co wybrać jako programista?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Moje spostrzeżenia i podsumowanie 4 lat w technikum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5 listopada 2017&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/wybory-programisty/liceum-vs-technikum-co-wybrac&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Wyszukiwarka na statycznych stronach/blogu bez backendu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tylko Javascript, na przykładzie bloga na Jekyllu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10 listopada 2017&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/frontend/wyszukiwarka-na-blogu-bez-backendu&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Czyli mamy plik z danymi o każdym poście na stronie, gotowy do obróbki.&lt;/p&gt;

&lt;h1 id=&quot;przeszukiwanie-i-pokazywanie-wyników&quot;&gt;Przeszukiwanie i pokazywanie wyników&lt;/h1&gt;

&lt;p&gt;Tu całą robotę zrobi za nas Javascript. W paczce są jeszcze 2 pliki &lt;span class=&quot;file&quot;&gt;search.js&lt;/span&gt; i &lt;span class=&quot;file&quot;&gt;fetch.js&lt;/span&gt;. Ten drugi odpowiada za dobieranie się do wygenerowanego pliku JSON, a całą logikę realizuje &lt;span class=&quot;file&quot;&gt;search.js&lt;/span&gt;. Tak więc, &lt;span class=&quot;file&quot;&gt;fetch.js&lt;/span&gt; zostawiamy w spokoju, a pod własne potrzeby modyfikujemy ten pierwszy. Kluczowe są dwie metody - &lt;code class=&quot;highlight language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;findResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, gdzie możemy zmodyfikować sposób dopasowywania wyników i &lt;code class=&quot;highlight language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;displayResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, gdzie modyfikujemy sposób prezentacji.&lt;/p&gt;

&lt;p&gt;U siebie, wyszukiwanie zmodyfikowałem tak, aby były brane pod uwagę pojedyncze słowa, a nie całe frazy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resultsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;i class=&quot;fa fa-spinner fa-pulse fa-2x fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' | '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*&amp;lt;--*/&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'gi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Z kolejnych słów wpisanych w wyszukiwarce budowane jest wyrażenie regularne, oddzielając je '|' - co znaczy, że będzie dopasowane dowolne słowo, a nie tak jak domyślnie - całe zdania. U mnie działa to o wiele lepiej.&lt;/p&gt;

&lt;p&gt;Warstwę prezentacji zmodyfikowałem o klasy występujące na blogu i wcześniej dodane pola:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displayResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`
        &amp;lt;li class=&quot;result&quot;&amp;gt;
            &amp;lt;article class=&quot;result__article  article&quot;&amp;gt;
                &amp;lt;div class=&quot;post-preview&quot;&amp;gt;
                  &amp;lt;a href=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
                    &amp;lt;h2 class=&quot;post-title&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/h2&amp;gt;
                    &amp;lt;h3 class=&quot;post-subtitle&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/h3&amp;gt;
                  &amp;lt;/a&amp;gt;
          
                  &amp;lt;p class=&quot;post-meta&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/p&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/article&amp;gt;
            
            &amp;lt;hr&amp;gt;
        &amp;lt;/li&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resultsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;p&amp;gt;Nic nie znaleziono&amp;lt;/p&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resultsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pozostało nam dołączyć wyszukiwarkę do naszej strony, czyli:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;zdefiniować wymagane elementy w HTML&lt;/li&gt;
  &lt;li&gt;załączyć skrypty&lt;/li&gt;
  &lt;li&gt;utworzyć nowy obiekt &lt;code class=&quot;highlight language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;jekyllSearch&lt;/span&gt;&lt;/code&gt; podając kolejno:
    &lt;ul&gt;
      &lt;li&gt;ścieżkę do pliku z mapą wyszukiwania, tu &lt;code class=&quot;highlight&quot;&gt;&lt;span class=&quot;s&quot;&gt;'/dist/js/search/search.json'&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;klasę inputa/pola wyszukiwarki, tu &lt;code class=&quot;highlight&quot;&gt;&lt;span class=&quot;s&quot;&gt;'search-value'&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;pojemnika na wyniki, tu &lt;code class=&quot;highlight&quot;&gt;&lt;span class=&quot;s&quot;&gt;'search-results'&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;i zainicjować go:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-engine&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
    Wyszukaj po tytule/podtytule:
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-value&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wpisz szukaną frazę&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-results&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dist/js/search/fetch.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dist/js/search/search.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jekyllSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'/dist/js/search/search.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'.search-value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'.search-results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A oto efekt - działa zaskakująco dobrze ;)&lt;/p&gt;

&lt;div class=&quot;search-engine&quot;&gt;
  &lt;label&gt;
    Wyszukaj po tytule/podtytule:
    &lt;input class=&quot;search-value&quot; placeholder=&quot;Wpisz szukaną frazę&quot; /&gt;
  &lt;/label&gt;

  &lt;div class=&quot;search-results&quot;&gt;&lt;/div&gt;

  &lt;script src=&quot;/dist/js/search/fetch.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;/dist/js/search/search.min.js&quot;&gt;&lt;/script&gt;

  &lt;script&gt;

    const search = new jekyllSearch(
      '/dist/js/search/search.json',
      '.search-value',
      '.search-results',
    );

    search.init();

    search.getUrlSearchQuery();

  &lt;/script&gt;
&lt;/div&gt;</content><author><name>Codeboy</name></author><category term="Frontend" /><category term="Frontend" /><category term="Jak-zrobić" /><summary type="html">Zastanawiałem się niedawno czy możliwe jest zrobienie wyszukiwarki na statycznej stronie/blogu bez użycia technologii backendowych (chciałem mieć taką na blogu). Okazuję się, że tak - zdziwiłbym się, jeśli było by inaczej, bo czego to nie można zrobić w IT? Pokażę jak to zrobić wykorzystując projekt na Githubie jekyll-search-js, który zmodyfikowałem na swoje potrzeby. Niby jest on typowo pod Jekylla, ale można wykorzystać to w innych technologiach - kluczowe jest wygenerowanie wcześniej pliku JSON z mapą naszych linków do wyszukiwania. Generowanie pliku z mapą wyszukiwania Bez tego nasza wyszukiwarka się nie obejdzie. To w nim będzie się odbywało wyszukiwanie elementów. Jeśli mamy możliwość wygenerować taki plik, to będziemy mogli zrobić wyszukiwarkę. Dlatego nie jest to ograniczone do Jekylla jak nazwa wskazuje. Zapewne można to zrobić na co najmniej kilka sposobów ;) W Jekyllu jest to całkiem proste. Po ściągnięciu paczki z Githuba umieszczamy ją w zasobach projektu i otwieramy plik search.json. W domyślnej wersji do wyszukiwarki trafią nie tylko posty, ale również podstrony. Na blogu chciałem wyszukiwarkę tylko dla postów i zmodyfikowałem nieco kod: --- layout: null sitemap: false --- {% capture json %} [ {% assign collections = site.collections | where_exp:'collection','collection.output != false' %} {% for collection in collections %} {% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %} {% for doc in docs %} {% assign m = doc.date | date: &quot;%-m&quot; %} { &quot;title&quot;: {{ doc.title | jsonify }}, &quot;subtitle&quot;: {{ doc.subtitle | jsonify }}, &quot;date&quot;: &quot;{{ doc.date | date: &quot;%-d&quot; }} {% case m %}{% when '1' %}stycznia{% when '2' %}lutego{% when '3' %}marca{% when '4' %}kwietnia{% when '5' %}maja{% when '6' %}czerwca{% when '7' %}lipca{% when '8' %}sierpnia{% when '9' %}września{% when '10' %}października{% when '11' %}listopada{% when '12' %}grudnia{% endcase %} {{ doc.date | date: &quot;%Y&quot; }}&quot;, &quot;url&quot;: {{ site.baseurl | append: doc.url | jsonify }} }{% unless forloop.last %},{% endunless %} {% endfor %} {% endfor %} ] {% endcapture %} {{ json | lstrip }} Ponadto, dodałem wszystkie brakujące informację o poście - podtytuł i datę, a usunąłem miedzy innymi content, bo nie chcę w wyszukiwarce pokazywać treści postu, tylko sam odnośnik. Te brzydkie “casey” po środku odpowiadają za tłumaczenie miesięcy na polski. Niestety w Jekyllu nie ma lepszego rozwiązania. Po wygenerowaniu pliku przez Jekyll wygląda to tak: [ { &quot;title&quot;: &quot;Projekt jaki-jezyk-programowania.pl&quot;, &quot;subtitle&quot;: &quot;Wprowadzenie&quot;, &quot;date&quot;: &quot;1 marca 2017&quot;, &quot;url&quot;: &quot;/dajsiepoznac2017/wprowadzenie&quot; }, &amp;lt;!-- ... --&amp;gt; { &quot;title&quot;: &quot;Przełącznik motywu, tryb nocny na blogu/stronie&quot;, &quot;subtitle&quot;: &quot;Tryb ciemny/jasny w łatwy sposób, tylko JS.&quot;, &quot;date&quot;: &quot;2 listopada 2017&quot;, &quot;url&quot;: &quot;/frontend/przelacznik-motywu-ciemny-na-strone&quot; }, { &quot;title&quot;: &quot;Liceum vs technikum - co wybrać jako programista?&quot;, &quot;subtitle&quot;: &quot;Moje spostrzeżenia i podsumowanie 4 lat w technikum&quot;, &quot;date&quot;: &quot;5 listopada 2017&quot;, &quot;url&quot;: &quot;/wybory-programisty/liceum-vs-technikum-co-wybrac&quot; }, { &quot;title&quot;: &quot;Wyszukiwarka na statycznych stronach/blogu bez backendu&quot;, &quot;subtitle&quot;: &quot;Tylko Javascript, na przykładzie bloga na Jekyllu&quot;, &quot;date&quot;: &quot;10 listopada 2017&quot;, &quot;url&quot;: &quot;/frontend/wyszukiwarka-na-blogu-bez-backendu&quot; } ] Czyli mamy plik z danymi o każdym poście na stronie, gotowy do obróbki. Przeszukiwanie i pokazywanie wyników Tu całą robotę zrobi za nas Javascript. W paczce są jeszcze 2 pliki search.js i fetch.js. Ten drugi odpowiada za dobieranie się do wygenerowanego pliku JSON, a całą logikę realizuje search.js. Tak więc, fetch.js zostawiamy w spokoju, a pod własne potrzeby modyfikujemy ten pierwszy. Kluczowe są dwie metody - findResults(), gdzie możemy zmodyfikować sposób dopasowywania wyników i displayResults(), gdzie modyfikujemy sposób prezentacji. U siebie, wyszukiwanie zmodyfikowałem tak, aby były brane pod uwagę pojedyncze słowa, a nie całe frazy: async findResults() { this.resultsList.innerHTML = '&amp;lt;i class=&quot;fa fa-spinner fa-pulse fa-2x fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;'; const data = await this.fetchedData(); return data.filter((item) =&amp;gt; { const inputValue = this.searchField.value.trim().replace(/\s/g, ' | ');/*&amp;lt;--*/ const regex = new RegExp(inputValue, 'gi'); return item.title.match(regex) || item.subtitle.match(regex); }); } Z kolejnych słów wpisanych w wyszukiwarce budowane jest wyrażenie regularne, oddzielając je '|' - co znaczy, że będzie dopasowane dowolne słowo, a nie tak jak domyślnie - całe zdania. U mnie działa to o wiele lepiej. Warstwę prezentacji zmodyfikowałem o klasy występujące na blogu i wcześniej dodane pola: async displayResults() { const results = await this.findResults(); const html = results.map(item =&amp;gt; ` &amp;lt;li class=&quot;result&quot;&amp;gt; &amp;lt;article class=&quot;result__article article&quot;&amp;gt; &amp;lt;div class=&quot;post-preview&quot;&amp;gt; &amp;lt;a href=&quot;${item.url}&quot;&amp;gt; &amp;lt;h2 class=&quot;post-title&quot;&amp;gt;${item.title}&amp;lt;/h2&amp;gt; &amp;lt;h3 class=&quot;post-subtitle&quot;&amp;gt;${item.subtitle}&amp;lt;/h3&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;p class=&quot;post-meta&quot;&amp;gt;${item.date}&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/article&amp;gt; &amp;lt;hr&amp;gt; &amp;lt;/li&amp;gt;`).join(''); if ((results.length === 0) || (this.searchField.value === '')) { this.resultsList.innerHTML = '&amp;lt;p&amp;gt;Nic nie znaleziono&amp;lt;/p&amp;gt;'; } else { this.resultsList.innerHTML = html; } } Pozostało nam dołączyć wyszukiwarkę do naszej strony, czyli: zdefiniować wymagane elementy w HTML załączyć skrypty utworzyć nowy obiekt jekyllSearch podając kolejno: ścieżkę do pliku z mapą wyszukiwania, tu '/dist/js/search/search.json' klasę inputa/pola wyszukiwarki, tu 'search-value' pojemnika na wyniki, tu 'search-results' i zainicjować go: &amp;lt;div class=&quot;search-engine&quot;&amp;gt; &amp;lt;label&amp;gt; Wyszukaj po tytule/podtytule: &amp;lt;input class=&quot;search-value&quot; placeholder=&quot;Wpisz szukaną frazę&quot;/&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;div class=&quot;search-results&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&quot;/dist/js/search/fetch.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&quot;/dist/js/search/search.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; const search = new jekyllSearch( '/dist/js/search/search.json', '.search-value', '.search-results', ); search.init(); &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; A oto efekt - działa zaskakująco dobrze ;) Wyszukaj po tytule/podtytule:</summary></entry><entry><title type="html">Liceum vs technikum - co wybrać jako programista?</title><link href="https://devcave.pl/wybory-programisty/liceum-vs-technikum-co-wybrac" rel="alternate" type="text/html" title="Liceum vs technikum - co wybrać jako programista?" /><published>2017-11-05T11:00:00+01:00</published><updated>2017-11-05T11:00:00+01:00</updated><id>https://devcave.pl/wybory-programisty/liceum-vs-technikum-co-wybrac</id><content type="html" xml:base="https://devcave.pl/wybory-programisty/liceum-vs-technikum-co-wybrac">&lt;p&gt;Wiele osób (szczególnie w tym wpisie skupię się na przyszłych programistach), gdy stoi przed wyborem szkoły średniej zastanawia się czy wybrać liceum czy technikum. W tym poście chciałbym opisać swoje spostrzeżenia oraz podsumować opinie, na które się natknąłem. Sam stałem przed tym wyborem i dużo się zastanawiałem. Wybrałem technikum. Dziś myślę, że wybrałbym liceum. Dlaczego? Zapraszam do lektury.&lt;/p&gt;

&lt;h1 id=&quot;różnice-między-technikum-a-liceum&quot;&gt;Różnice między technikum a liceum&lt;/h1&gt;

&lt;h2 id=&quot;długość-nauki&quot;&gt;Długość nauki&lt;/h2&gt;
&lt;p&gt;Pierwszą, oczywistą różnicą jest to, że w technikum spędzimy rok dłużej.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Czy to lepiej czy gorzej to raczej indywidualna kwestia.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mi ten dodatkowy rok się przydał, &lt;strong&gt;ale&lt;/strong&gt; wynikało to z tego, że nie byłem do końca zdecydowany, co chcę robić w życiu. Dopiero pod koniec klasy 3 określiłem się, że chciałbym rozpocząć karierę programisty. Więc ten ostatni rok był w sam raz, bo dzięki niemu miałem okazję nadrobić zaległości i zrobiłem jakoś 5 razy więcej niż przez całe gimnazjum i 2 pierwsze klasy technikum razem wzięte. Po maturze, na którą poświęciłem masę czasu, miałem już solidne podstawy programowania, nawet, by zacząć pierwszą pracę, co w końcu się stało ;) Jeśli nie widziałeś to zobacz &lt;a href=&quot;https://devcave.pl/moje-do%C5%9Bwiadczenia/moja-droga-do-pierwszej-pracy&quot;&gt;moją drogę od 0 do pierwszej pracy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jednak dziś, gdy już wiem co chcę robić w życiu i zakładając, że byłoby tak wcześniej - wybrałbym liceum pod tym względem. Ten dodatkowy rok to również sporo czasu, przez który możemy się czuć nieco w tyle, porównując się ze znajomymi z liceum. Ponadto, jeśli szkoła nie oferuje nam tego, czego oczekujemy (tak jak w moim wypadku), może to być nawet czas zmarnowany.&lt;/p&gt;

&lt;p&gt;Jeśli chcesz iść na studia, jesteś nastawiony na programowanie i nie interesuje Cię nic poza tym, według mnie, nie warto iść do technikum, bo to jest rok w plecy. Nie licz na to, że technikum rozwinie Cię w tym kierunku i będziesz mógł się nazywać programistą. Liceum również tego nie zrobi, ale nie w tym rzecz. W liceum po prostu zyskujesz rok i lepiej skupisz się na maturze. Z programowaniem jest różnie.&lt;/p&gt;

&lt;h2 id=&quot;perspektywy-nauki&quot;&gt;Perspektywy nauki&lt;/h2&gt;
&lt;p&gt;Ta kwestia z kolei zależy od konkretnej szkoły, a pomiędzy miastami może się to bardzo różnić. Bywa i tak, że czasem programowania nauczymy się więcej w liceum, mimo, że - mogłoby się wydawać - to szkoła  &lt;strong&gt;techniczna&lt;/strong&gt; powinna nas bardziej do tego przyuczyć.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wszystko zależy głównie od nauczycieli, a to loteria.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;umiejętności-techniczne&quot;&gt;Umiejętności techniczne&lt;/h3&gt;

&lt;p&gt;W technikum jest więcej styczności ze sprzętem i sieciami - to pewne, ale jeśli zamierzasz być programistą to nie wiem czy to jest czynnik, który powinieneś brać pod uwagę. Można by powiedzieć, że takie rzeczy Ci się przydadzą w życiu, ale według mnie nie jest to niezbędne. Prawda jest taka, że to nie żadne “rocket science” i wszystko jest do wygooglowania w chwili, gdy potrzebne.&lt;/p&gt;

&lt;p&gt;Niektórzy nauczyciele wolą nie męczyć klasy i pozwalają nawet grać na lekcjach. Jest to bardzo na rękę uczniom, a zarazem wygodne dla nauczyciela.&lt;/p&gt;

&lt;p&gt;U mnie gierki na lekcjach to była normalka. Sam &lt;strong&gt;przegrałem&lt;/strong&gt; tak 2 pierwsze klasy. Dopiero później, gdy już byłem ukierunkowany na programowanie, wziąłem się za siebie i byłem wyjątkiem, który nie gra. Niestety w klasie nie miałem zbytnio osób zainteresowanych programowaniem.&lt;/p&gt;

&lt;h3 id=&quot;programowanie&quot;&gt;Programowanie&lt;/h3&gt;
&lt;p&gt;Czyli najważniejsza kwestia w naszym przypadku.&lt;/p&gt;

&lt;p&gt;Niestety, jeśli liczysz, że w szkołach średnich nauczysz się programowania i zyskasz perspektywy pracy to się rozczarujesz. Zazwyczaj skończysz na podstawach HTML, CSS i Javascript - czyli to, co potrzebne do zdania kwalifikacji E.14, a &lt;strong&gt;jeśli będziesz miał farta&lt;/strong&gt;, to może nawet dotkniesz jakiegoś języka OOP.&lt;/p&gt;

&lt;p&gt;Ja niestety, mimo, że poszedłem niby do “najlepszego” technikum w mieście, nie miałem wiele wspólnego z programowaniem z prawdziwego zdarzenia. O OOP to nawet nie słyszałem. A stack technologiczny kończył się na podstawach HTML, CSS i Javascript, wszystko w starych standardach i praktykach. Więc &lt;strong&gt;rankingami nie ma się co sugerować.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;U mnie to wyglądało tak, że kilka ~1h filmów M. Zelenta pokrywało cały materiał w mojej szkole :D Czyli to, co w szkole trwało 2 lata (dwa ostatnie), to mogłem się nauczyć podczas kilku sesji ze wspomnianymi kursami. Ba, nawet o wiele więcej ;)&lt;/p&gt;

&lt;p&gt;To dziwne (nie jestem pewny czy jest to reguła), ale z tego, co zaobserwowałem w wypowiedziach, to w liceum bywa więcej kontaktu z programowaniem - oczywiście na odpowiednim profilu. Polecam popytać osób, które już się uczą jak to wygląda w konkretnym liceum.&lt;/p&gt;

&lt;p&gt;Tak czy inaczej, &lt;strong&gt;programowania będziesz musiał uczyć się na własną rękę&lt;/strong&gt;, bez względu na szkołę średnią. &lt;strong&gt;Ani technikum, ani liceum nie zrobi tego za Ciebie.&lt;/strong&gt; Ba, nawet na studia nie licz. Z wiedzą wyniesioną tylko ze szkoły nie rozwiniesz skrzydeł.&lt;/p&gt;

&lt;h3 id=&quot;przedmioty-maturalne&quot;&gt;Przedmioty maturalne&lt;/h3&gt;
&lt;p&gt;To jak najbardziej indywidualna kwestia szkoły, jednak jest tendencja, że w liceach matura wypada lepiej. Więcej godzin na te przedmioty i bla bla. Ale znowu, &lt;strong&gt;jeśli chcesz osiągnąć dobry wynik to 90% twojego sukcesu zależy od twojego wkładu.&lt;/strong&gt; Wiadomo, jedna szkoła bardziej Ci w tym pomoże, druga mniej. Loteria.&lt;/p&gt;

&lt;p&gt;Nie chcę was tak negatywnie nastawiać do szkoły, ale w moim przypadku było tak, że w 4 klasie &lt;strong&gt;nie chodziłem do szkoły, po to by się więcej nauczyć&lt;/strong&gt; - ironia prawda? Po prostu miałem masę przedmiotów, na których mało co się robiło i jedyne co czułem to, że marnuję czas. W ostatnich miesiącach do szkoły to przychodziłem tylko na matmę - jedyny przedmiot, z którego coś na prawdę wynosiłem. W 4 klasie miałem jakieś 51% frekwencji :D. Wolałem nie iść do szkoły, w tym czasie nauczyć się co zaplanowałem i mieć resztę dnia wolną, niż iść do szkoły, zmarnować 3/4 dnia i uczyć się po nocach. Mówię tu głównie o przygotowaniach do matury.&lt;/p&gt;

&lt;p&gt;Miałem to szczęście, że miałem wyrozumiałego wychowawcę (nauczyciel matematyki) oraz rodziców, którzy po części mnie rozumieli i mi na to przyzwalali. Koniec końców i tak skończyłem z paskiem i wzorowym zachowaniem :D&lt;/p&gt;

&lt;p&gt;Podsumowując, jeśli już masz określony cel i jesteś nastawiony na bycie programistą, wybrałbym liceum - większa szansa na programowanie oraz nie jesteśmy rok w plecy - tym bardziej jeśli planujemy studia. Z kolei, jeśli nigdzie Ci się nie spieszy i chciałbyś podotykać trochę komputerów - wybierz technikum. Z punktu widzenia programowania nie ma różnicy gdzie pójdziesz, wszystko zależy od twojego wkładu.&lt;/p&gt;

&lt;h2 id=&quot;kwalifikacje-zawodowe&quot;&gt;Kwalifikacje zawodowe&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Przynajmniej po technikum będziesz miał zawód&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Heh.&lt;/strong&gt; No to chyba możemy przejść do następnej kwestii. Nie no, należą się słowa uzasadnienia takiej reakcji dla nie wtajemniczonych.&lt;/p&gt;

&lt;p&gt;Ale szczerze? &lt;strong&gt;Dla mnie to nic nie znaczący świstek, który nie popiera żadnych umiejętności.&lt;/strong&gt; Zdałem te kwalifikacje i tak gdzieś leżą i się kurzą. Nawet w CV ich nie załączam. Dlaczego?&lt;/p&gt;

&lt;p&gt;A no dlatego, że osoby, które praktycznie nic nie potrafią mogą z łatwością je zdać. Co jeszcze śmieszniejsze, wszystkie egzaminy możemy bez trudu, nawet kilka dni wcześniej przejrzeć, albo przynajmniej poznać większość pytań, które dostaniemy. Facebookowe grupy dają radę ;)&lt;/p&gt;

&lt;p&gt;Nic nie umiejąc, wystarczy przyjść chwilę wcześniej na egzamin, wystukać pytania na pamięć i gotowe. Naprawdę się dziwię jak to się dzieje, że ludzie tego nie zdają. Chyba nawet na facebooka nie chciało im się wejść. Tak było za mojej kadencji, ale może to się niedługo zmieni.&lt;/p&gt;

&lt;p&gt;Łatwiej jest dostać pracę po technikum z kwalifikacjami zawodowymi? Poza programowaniem - pewnie tak. Tylko wydaję mi się, że na łatwiejszym dostaniu się skończy, bo twoje umiejętności zostaną szybko zweryfikowane i wtedy papierek już nie pomoże. &lt;strong&gt;Dla programisty są bezwartościowe.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;praktyki&quot;&gt;Praktyki&lt;/h2&gt;

&lt;p&gt;W technikum mamy miesięczne praktyki i jest to jedyna rzecz, którą dobrze wspominam ze swojej szkoły. To dlatego, że miałem okazję wyjechać do Anglii (praktycznie za free) na miesiąc. Było to przyjemne doświadczenie, jednak nie związane z programowaniem. Pewnie napiszę kiedyś o tym osobny post i tu podlinkuję ;)&lt;/p&gt;

&lt;p&gt;W skrócie, jeśli uda Ci się trafić na coś fajnego (co nie jest łatwe) to będzie to przyjemnie doświadczenie. W przeciwnym wypadku będziesz podawał papier do drukarki i zapisywał sobie odbyte godziny praktyk (może się tak trafić nawet na projekcie zagranicznym).&lt;/p&gt;

&lt;h1 id=&quot;podsumowanie&quot;&gt;Podsumowanie&lt;/h1&gt;

&lt;p&gt;W tym wpisie irytująco często padło słowo &lt;strong&gt;loteria&lt;/strong&gt;. I tak, to prawda. To co dostaniemy od szkoły, to na jakich ludzi trafimy i jak nauczyciele będą do nas podchodzić to prawdziwa loteria. Dlatego &lt;strong&gt;polecam każdemu skontaktować się z ludźmi, którzy są lub byli w konkretnej szkole&lt;/strong&gt;. Ja tego nie zrobiłem i teraz żałuję, sugerowałem się tylko rankingami, które nic nie znaczą.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tylko osoby z podobnym nastawieniem co ty, będące w szkole, która zamierzasz wybrać, dadzą Ci najlepszą opinię jaką możesz dostać.&lt;/strong&gt;&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="Wybory-programisty" /><category term="Wybory-programisty" /><category term="Moje-doświadczenia" /><summary type="html">Wiele osób (szczególnie w tym wpisie skupię się na przyszłych programistach), gdy stoi przed wyborem szkoły średniej zastanawia się czy wybrać liceum czy technikum. W tym poście chciałbym opisać swoje spostrzeżenia oraz podsumować opinie, na które się natknąłem. Sam stałem przed tym wyborem i dużo się zastanawiałem. Wybrałem technikum. Dziś myślę, że wybrałbym liceum. Dlaczego? Zapraszam do lektury. Różnice między technikum a liceum Długość nauki Pierwszą, oczywistą różnicą jest to, że w technikum spędzimy rok dłużej. Czy to lepiej czy gorzej to raczej indywidualna kwestia. Mi ten dodatkowy rok się przydał, ale wynikało to z tego, że nie byłem do końca zdecydowany, co chcę robić w życiu. Dopiero pod koniec klasy 3 określiłem się, że chciałbym rozpocząć karierę programisty. Więc ten ostatni rok był w sam raz, bo dzięki niemu miałem okazję nadrobić zaległości i zrobiłem jakoś 5 razy więcej niż przez całe gimnazjum i 2 pierwsze klasy technikum razem wzięte. Po maturze, na którą poświęciłem masę czasu, miałem już solidne podstawy programowania, nawet, by zacząć pierwszą pracę, co w końcu się stało ;) Jeśli nie widziałeś to zobacz moją drogę od 0 do pierwszej pracy Jednak dziś, gdy już wiem co chcę robić w życiu i zakładając, że byłoby tak wcześniej - wybrałbym liceum pod tym względem. Ten dodatkowy rok to również sporo czasu, przez który możemy się czuć nieco w tyle, porównując się ze znajomymi z liceum. Ponadto, jeśli szkoła nie oferuje nam tego, czego oczekujemy (tak jak w moim wypadku), może to być nawet czas zmarnowany. Jeśli chcesz iść na studia, jesteś nastawiony na programowanie i nie interesuje Cię nic poza tym, według mnie, nie warto iść do technikum, bo to jest rok w plecy. Nie licz na to, że technikum rozwinie Cię w tym kierunku i będziesz mógł się nazywać programistą. Liceum również tego nie zrobi, ale nie w tym rzecz. W liceum po prostu zyskujesz rok i lepiej skupisz się na maturze. Z programowaniem jest różnie. Perspektywy nauki Ta kwestia z kolei zależy od konkretnej szkoły, a pomiędzy miastami może się to bardzo różnić. Bywa i tak, że czasem programowania nauczymy się więcej w liceum, mimo, że - mogłoby się wydawać - to szkoła techniczna powinna nas bardziej do tego przyuczyć. Wszystko zależy głównie od nauczycieli, a to loteria. Umiejętności techniczne W technikum jest więcej styczności ze sprzętem i sieciami - to pewne, ale jeśli zamierzasz być programistą to nie wiem czy to jest czynnik, który powinieneś brać pod uwagę. Można by powiedzieć, że takie rzeczy Ci się przydadzą w życiu, ale według mnie nie jest to niezbędne. Prawda jest taka, że to nie żadne “rocket science” i wszystko jest do wygooglowania w chwili, gdy potrzebne. Niektórzy nauczyciele wolą nie męczyć klasy i pozwalają nawet grać na lekcjach. Jest to bardzo na rękę uczniom, a zarazem wygodne dla nauczyciela. U mnie gierki na lekcjach to była normalka. Sam przegrałem tak 2 pierwsze klasy. Dopiero później, gdy już byłem ukierunkowany na programowanie, wziąłem się za siebie i byłem wyjątkiem, który nie gra. Niestety w klasie nie miałem zbytnio osób zainteresowanych programowaniem. Programowanie Czyli najważniejsza kwestia w naszym przypadku. Niestety, jeśli liczysz, że w szkołach średnich nauczysz się programowania i zyskasz perspektywy pracy to się rozczarujesz. Zazwyczaj skończysz na podstawach HTML, CSS i Javascript - czyli to, co potrzebne do zdania kwalifikacji E.14, a jeśli będziesz miał farta, to może nawet dotkniesz jakiegoś języka OOP. Ja niestety, mimo, że poszedłem niby do “najlepszego” technikum w mieście, nie miałem wiele wspólnego z programowaniem z prawdziwego zdarzenia. O OOP to nawet nie słyszałem. A stack technologiczny kończył się na podstawach HTML, CSS i Javascript, wszystko w starych standardach i praktykach. Więc rankingami nie ma się co sugerować. U mnie to wyglądało tak, że kilka ~1h filmów M. Zelenta pokrywało cały materiał w mojej szkole :D Czyli to, co w szkole trwało 2 lata (dwa ostatnie), to mogłem się nauczyć podczas kilku sesji ze wspomnianymi kursami. Ba, nawet o wiele więcej ;) To dziwne (nie jestem pewny czy jest to reguła), ale z tego, co zaobserwowałem w wypowiedziach, to w liceum bywa więcej kontaktu z programowaniem - oczywiście na odpowiednim profilu. Polecam popytać osób, które już się uczą jak to wygląda w konkretnym liceum. Tak czy inaczej, programowania będziesz musiał uczyć się na własną rękę, bez względu na szkołę średnią. Ani technikum, ani liceum nie zrobi tego za Ciebie. Ba, nawet na studia nie licz. Z wiedzą wyniesioną tylko ze szkoły nie rozwiniesz skrzydeł. Przedmioty maturalne To jak najbardziej indywidualna kwestia szkoły, jednak jest tendencja, że w liceach matura wypada lepiej. Więcej godzin na te przedmioty i bla bla. Ale znowu, jeśli chcesz osiągnąć dobry wynik to 90% twojego sukcesu zależy od twojego wkładu. Wiadomo, jedna szkoła bardziej Ci w tym pomoże, druga mniej. Loteria. Nie chcę was tak negatywnie nastawiać do szkoły, ale w moim przypadku było tak, że w 4 klasie nie chodziłem do szkoły, po to by się więcej nauczyć - ironia prawda? Po prostu miałem masę przedmiotów, na których mało co się robiło i jedyne co czułem to, że marnuję czas. W ostatnich miesiącach do szkoły to przychodziłem tylko na matmę - jedyny przedmiot, z którego coś na prawdę wynosiłem. W 4 klasie miałem jakieś 51% frekwencji :D. Wolałem nie iść do szkoły, w tym czasie nauczyć się co zaplanowałem i mieć resztę dnia wolną, niż iść do szkoły, zmarnować 3/4 dnia i uczyć się po nocach. Mówię tu głównie o przygotowaniach do matury. Miałem to szczęście, że miałem wyrozumiałego wychowawcę (nauczyciel matematyki) oraz rodziców, którzy po części mnie rozumieli i mi na to przyzwalali. Koniec końców i tak skończyłem z paskiem i wzorowym zachowaniem :D Podsumowując, jeśli już masz określony cel i jesteś nastawiony na bycie programistą, wybrałbym liceum - większa szansa na programowanie oraz nie jesteśmy rok w plecy - tym bardziej jeśli planujemy studia. Z kolei, jeśli nigdzie Ci się nie spieszy i chciałbyś podotykać trochę komputerów - wybierz technikum. Z punktu widzenia programowania nie ma różnicy gdzie pójdziesz, wszystko zależy od twojego wkładu. Kwalifikacje zawodowe Przynajmniej po technikum będziesz miał zawód Heh. No to chyba możemy przejść do następnej kwestii. Nie no, należą się słowa uzasadnienia takiej reakcji dla nie wtajemniczonych. Ale szczerze? Dla mnie to nic nie znaczący świstek, który nie popiera żadnych umiejętności. Zdałem te kwalifikacje i tak gdzieś leżą i się kurzą. Nawet w CV ich nie załączam. Dlaczego? A no dlatego, że osoby, które praktycznie nic nie potrafią mogą z łatwością je zdać. Co jeszcze śmieszniejsze, wszystkie egzaminy możemy bez trudu, nawet kilka dni wcześniej przejrzeć, albo przynajmniej poznać większość pytań, które dostaniemy. Facebookowe grupy dają radę ;) Nic nie umiejąc, wystarczy przyjść chwilę wcześniej na egzamin, wystukać pytania na pamięć i gotowe. Naprawdę się dziwię jak to się dzieje, że ludzie tego nie zdają. Chyba nawet na facebooka nie chciało im się wejść. Tak było za mojej kadencji, ale może to się niedługo zmieni. Łatwiej jest dostać pracę po technikum z kwalifikacjami zawodowymi? Poza programowaniem - pewnie tak. Tylko wydaję mi się, że na łatwiejszym dostaniu się skończy, bo twoje umiejętności zostaną szybko zweryfikowane i wtedy papierek już nie pomoże. Dla programisty są bezwartościowe. Praktyki W technikum mamy miesięczne praktyki i jest to jedyna rzecz, którą dobrze wspominam ze swojej szkoły. To dlatego, że miałem okazję wyjechać do Anglii (praktycznie za free) na miesiąc. Było to przyjemne doświadczenie, jednak nie związane z programowaniem. Pewnie napiszę kiedyś o tym osobny post i tu podlinkuję ;) W skrócie, jeśli uda Ci się trafić na coś fajnego (co nie jest łatwe) to będzie to przyjemnie doświadczenie. W przeciwnym wypadku będziesz podawał papier do drukarki i zapisywał sobie odbyte godziny praktyk (może się tak trafić nawet na projekcie zagranicznym). Podsumowanie W tym wpisie irytująco często padło słowo loteria. I tak, to prawda. To co dostaniemy od szkoły, to na jakich ludzi trafimy i jak nauczyciele będą do nas podchodzić to prawdziwa loteria. Dlatego polecam każdemu skontaktować się z ludźmi, którzy są lub byli w konkretnej szkole. Ja tego nie zrobiłem i teraz żałuję, sugerowałem się tylko rankingami, które nic nie znaczą. Tylko osoby z podobnym nastawieniem co ty, będące w szkole, która zamierzasz wybrać, dadzą Ci najlepszą opinię jaką możesz dostać.</summary></entry><entry><title type="html">Przełącznik motywu, tryb nocny na blogu/stronie</title><link href="https://devcave.pl/frontend/przelacznik-motywu-ciemny-na-strone" rel="alternate" type="text/html" title="Przełącznik motywu, tryb nocny na blogu/stronie" /><published>2017-11-02T13:00:00+01:00</published><updated>2017-11-02T13:00:00+01:00</updated><id>https://devcave.pl/frontend/przelacznik-motywu-ciemny-na-strone</id><content type="html" xml:base="https://devcave.pl/frontend/przelacznik-motywu-ciemny-na-strone">&lt;p&gt;Zawszę doceniam, gdy na stronach/blogach mamy możliwość zmiany motywu na ciemny. Jest to świetna opcja do czytania lub do przeglądania strony bez światła. Dlatego też zaimplementowałem taką funkcję na swoim blogu (w prawym górnym rogu w navbarze).&lt;/p&gt;

&lt;p&gt;Pokażę jak to wykonałem - relatywnie szybko i bezboleśnie, na przykładzie tego bloga ;)&lt;/p&gt;

&lt;h1 id=&quot;przygotowywujemy-przycisk&quot;&gt;Przygotowywujemy przycisk&lt;/h1&gt;

&lt;p&gt;To kwestia gustu. Tutaj jest w navbarze - na liście opcji, z tooltipem i ikonami fontawsome:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;collapse navbar-collapse&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bs-example-navbar-collapse-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav navbar-nav navbar-right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--  ...  --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dark-mode-btn nav-el&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-toggle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tooltip&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-placement=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Zmień motyw&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-sun-o&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;/&lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-moon-o&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;obsługujemy-zmianę-i-zapamiętujemy-wybór-w-localstorage&quot;&gt;Obsługujemy zmianę i zapamiętujemy wybór w LocalStorage&lt;/h1&gt;

&lt;p&gt;Zaimplementowałem to w ten sposób, że po kliknięciu przycisku przełączany jest motyw (u mnie dodawana jest klasa “dark-mode” do body) oraz zapamiętywany jest nasz wybór w &lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/API/Window/localStorage&quot;&gt;localStorage&lt;/a&gt; - czyli w pamięci cache przeglądarki dopóki jej nie wyczyścimy.&lt;/p&gt;

&lt;p&gt;Dałoby się to zrobić za pomocą ciasteczek, ale wykorzystanie localStorage jest bardziej odpowiednie, gdyż nie wysyłamy nic w nagłówku HTTP (nie marnujemy łącza :D) i nie wygaśnie nam to po jakimś czasie. Wszystkie dzieje się w przeglądarce użytkownika. Poza tym, ciasteczka są przeznaczone do odczytywania po stronie serwera.&lt;/p&gt;

&lt;p&gt;Tak więc dodajemy obsługę kliknięcia:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.dark-mode-btn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;darkMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dark-mode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dark-mode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;darkMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlight language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt; odznacza przycisk po kliknięciu, bez tego byłby aktywny.&lt;/p&gt;

&lt;p&gt;Poza tym, przy otwieraniu strony powinien zostać wczytany zapamiętany wybór i zmieniony motyw jeśli jest taka potrzeba:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dark-mode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dark-mode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;U mnie klasa CSS zmieniającą motyw jest aż tak prosta:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.dark-mode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#2a2a2a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e2e2e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wiadomo, jęśli masz więcej elementów, którym będziesz chciał zmienić wygląd po przełączeniu motywu, tym więcej modyfikacji CSS będziesz musiał dokonać. Jeśli chcesz, żeby inne elementy też zmieniały swój wygląd, to będziesz musiał stworzyć selector w CSS, który dziedziczy po &lt;code class=&quot;highlight&quot;&gt;&lt;span class=&quot;na&quot;&gt;.dark-mode&lt;/span&gt;&lt;/code&gt;, czyli np. jeśli masz element div z klasą “whatever”, jego wersję dla ciemnego motywu zdefiniujesz tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.dark-mode&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.whatever&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;rezultacie&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;te&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;warto&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ś&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ę&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ą&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ę&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;za&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;łą&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;cza&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ć&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;tylko&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;wtedy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;kiedy&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ę&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;dzie&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;mia&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ł&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;klas&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ę&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;highlight&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;na&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.dark-mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;dostosowywanie-strony-do-zmian&quot;&gt;Dostosowywanie strony do zmian&lt;/h1&gt;

&lt;p&gt;Pozostało nam dostosować bloga/stronę do takiej zmiany i w niektórych elementach CSS pozmieniać wartości &lt;code class=&quot;highlight&quot;&gt;background&lt;/code&gt; i &lt;code class=&quot;highlight&quot;&gt;color&lt;/code&gt; na &lt;code class=&quot;highlight&quot;&gt;&lt;span class=&quot;m&quot;&gt;inherit&lt;/span&gt;&lt;/code&gt;, aby kolory były dziedziczone z klasy &lt;code class=&quot;highlight&quot;&gt;&lt;span class=&quot;na&quot;&gt;.dark-mode&lt;/span&gt;&lt;/code&gt;. Poza tym, prawdopodobnie czeka nas kilka zmian kolorystycznych, aby dopasować się do dwóch trybów.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;
    Zdaję sobię, że nie u każdego będzie to takie banalne i czasem wasza strona może wymagać głębszej modyfikacji css, aby nasza strona wyglądała dobrze po zmianie motywu. Dlatego dobrze jest dobierać kolory, które wyglądają ładnie w obu motywach. Wtedy pójdzie to tak szybko jak u mnie ;)
&lt;/p&gt;

&lt;p class=&quot;idea&quot;&gt;
Jeśli używasz Disqus na swojej stronie, to przy zmianie motywu sekcja komentarzy może nie wyglądać poprawnie. Jeśli masz zaznaczoną opcję, aby disqus dostosowywał wygląd automatycznie, możesz wymusić jego przeładowanie po zmianie motywu, aby ponownie się dopasowałAC. Wystarczy dodać taką linijkę tam gdzie obsługujemy kliknięcie:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;DISQUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Jest to w try catch, ponieważ zakładam, że nie na każdej stronie masz sekcję komentarzy ;)&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="Frontend" /><category term="Frontend" /><category term="Jak-zrobić" /><category term="Javascript" /><summary type="html">Zawszę doceniam, gdy na stronach/blogach mamy możliwość zmiany motywu na ciemny. Jest to świetna opcja do czytania lub do przeglądania strony bez światła. Dlatego też zaimplementowałem taką funkcję na swoim blogu (w prawym górnym rogu w navbarze). Pokażę jak to wykonałem - relatywnie szybko i bezboleśnie, na przykładzie tego bloga ;) Przygotowywujemy przycisk To kwestia gustu. Tutaj jest w navbarze - na liście opcji, z tooltipem i ikonami fontawsome: &amp;lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&amp;gt; &amp;lt;ul class=&quot;nav navbar-nav navbar-right&quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;li&amp;gt; &amp;lt;button class=&quot;dark-mode-btn nav-el&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; title=&quot;Zmień motyw&quot;&amp;gt; &amp;lt;i class=&quot;fa fa-sun-o&quot; aria-hidden=&quot;true&quot;&amp;gt;&amp;lt;/i&amp;gt;/&amp;lt;i class=&quot;fa fa-moon-o&quot; aria-hidden=&quot;true&quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/button&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; Obsługujemy zmianę i zapamiętujemy wybór w LocalStorage Zaimplementowałem to w ten sposób, że po kliknięciu przycisku przełączany jest motyw (u mnie dodawana jest klasa “dark-mode” do body) oraz zapamiętywany jest nasz wybór w localStorage - czyli w pamięci cache przeglądarki dopóki jej nie wyczyścimy. Dałoby się to zrobić za pomocą ciasteczek, ale wykorzystanie localStorage jest bardziej odpowiednie, gdyż nie wysyłamy nic w nagłówku HTTP (nie marnujemy łącza :D) i nie wygaśnie nam to po jakimś czasie. Wszystkie dzieje się w przeglądarce użytkownika. Poza tym, ciasteczka są przeznaczone do odczytywania po stronie serwera. Tak więc dodajemy obsługę kliknięcia: document.querySelector('.dark-mode-btn').addEventListener('click', (e) =&amp;gt; { const darkMode = document.body.classList.toggle('dark-mode'); e.target.blur(); localStorage.setItem('dark-mode', darkMode); }); e.target.blur(); odznacza przycisk po kliknięciu, bez tego byłby aktywny. Poza tym, przy otwieraniu strony powinien zostać wczytany zapamiętany wybór i zmieniony motyw jeśli jest taka potrzeba: if (JSON.parse(localStorage.getItem('dark-mode'))) { document.body.classList.add('dark-mode'); } U mnie klasa CSS zmieniającą motyw jest aż tak prosta: .dark-mode { background: #2a2a2a; color: #e2e2e2; } Wiadomo, jęśli masz więcej elementów, którym będziesz chciał zmienić wygląd po przełączeniu motywu, tym więcej modyfikacji CSS będziesz musiał dokonać. Jeśli chcesz, żeby inne elementy też zmieniały swój wygląd, to będziesz musiał stworzyć selector w CSS, który dziedziczy po .dark-mode, czyli np. jeśli masz element div z klasą “whatever”, jego wersję dla ciemnego motywu zdefiniujesz tak: .dark-mode .whatever { key: property; key: property; key: property; } W rezultacie te wartości będą się załączać tylko wtedy, kiedy body będzie miało klasę &amp;lt;code class=&quot;highlight&quot;&amp;gt;&amp;lt;span class=&quot;na&quot;&amp;gt;.dark-mode&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;. Dostosowywanie strony do zmian Pozostało nam dostosować bloga/stronę do takiej zmiany i w niektórych elementach CSS pozmieniać wartości background i color na inherit, aby kolory były dziedziczone z klasy .dark-mode. Poza tym, prawdopodobnie czeka nas kilka zmian kolorystycznych, aby dopasować się do dwóch trybów. Zdaję sobię, że nie u każdego będzie to takie banalne i czasem wasza strona może wymagać głębszej modyfikacji css, aby nasza strona wyglądała dobrze po zmianie motywu. Dlatego dobrze jest dobierać kolory, które wyglądają ładnie w obu motywach. Wtedy pójdzie to tak szybko jak u mnie ;) Jeśli używasz Disqus na swojej stronie, to przy zmianie motywu sekcja komentarzy może nie wyglądać poprawnie. Jeśli masz zaznaczoną opcję, aby disqus dostosowywał wygląd automatycznie, możesz wymusić jego przeładowanie po zmianie motywu, aby ponownie się dopasowałAC. Wystarczy dodać taką linijkę tam gdzie obsługujemy kliknięcie: try { DISQUS.reset({ reload: true }); } catch (e) {} Jest to w try catch, ponieważ zakładam, że nie na każdej stronie masz sekcję komentarzy ;)</summary></entry><entry><title type="html">Moja droga do pierwszej pracy</title><link href="https://devcave.pl/moje-do%C5%9Bwiadczenia/moja-droga-do-pierwszej-pracy" rel="alternate" type="text/html" title="Moja droga do pierwszej pracy" /><published>2017-10-29T13:00:00+01:00</published><updated>2017-10-29T13:00:00+01:00</updated><id>https://devcave.pl/moje-do%C5%9Bwiadczenia/moja-droga-do-pierwszej-pracy</id><content type="html" xml:base="https://devcave.pl/moje-do%C5%9Bwiadczenia/moja-droga-do-pierwszej-pracy">&lt;p&gt;Minęło sporo czasu od ostatniego postu. Przez ten okres całkowicie poświęciłem się nauce Javy i jej technologii, aby jak najszybciej mieć szansę na dostanie pracy. I udało się! Chciałem się tym tutaj podzielić i przedstawić całą drogę od początku do końca.&lt;/p&gt;

&lt;h1 id=&quot;jak-zaczynałem&quot;&gt;Jak zaczynałem&lt;/h1&gt;

&lt;p&gt;Programowania zacząłem się uczyć (tak bardziej na poważnie, z myślą bycia programistą) gdzieś na początku 4 klasy technikum informatycznego (2016 rok). Wcześniej nie byłem jeszcze pewien, co chciałbym robić w przyszłości. Jak pewnie w większości techników, programowanie opierało się na programowaniu webowym, czyli wokół HTML, CSS i Javascript. Były to jednak takie podstawy, że praktycznie nie było możliwe napisanie czegoś konkretnego z taką wiedzą. O OOP to nawet nie słyszałem.  Dlatego zacząłem interesować się tym tematem i uczyć się na własną rękę. Wtedy trafiłem na kursy M. Zelenta, które były dla mnie po prostu idealne. Ponadto, dzięki nim dostałem tyle motywacji i tak mnie zachęciły do działania, że o niczym innym już nie myślałem i to właśnie z programowaniem chciałem wiązać przyszłość (trwa to do dziś). Jednak po jakimś czasie okazało się, że wiedza wyniesiona z technikum (przynajmniej w moim wypadku) oraz częściowo z kursów okazała się stertą złych praktyk, o czym szybko się przekonałem dzięki zakładaniu wątków na &lt;a href=&quot;https://forum.pasja-informatyki.pl/&quot;&gt;Forum Pasja Informatyki&lt;/a&gt; z moimi projektami - pisanymi w celu nauki technologii webowych. Dzięki wielu osobom z forum, m.in. &lt;a href=&quot;https://forum.pasja-informatyki.pl/user/Krzycho92&quot;&gt;Krzycho92&lt;/a&gt;, &lt;a href=&quot;https://forum.pasja-informatyki.pl/user/argeento&quot;&gt;argeento&lt;/a&gt; oraz później &lt;a href=&quot;https://forum.pasja-informatyki.pl/user/Comandeer&quot;&gt;Comandeer&lt;/a&gt; i &lt;a href=&quot;https://forum.pasja-informatyki.pl/user/Ivan&quot;&gt;Ivan&lt;/a&gt;, wiele się nauczyłem i po części feedback z forum motywował mnie do dalszej pracy.&lt;/p&gt;

&lt;h1 id=&quot;moje-projekty&quot;&gt;Moje projekty&lt;/h1&gt;
&lt;p&gt;Zrobiłem &lt;a href=&quot;/moje-projekty/&quot;&gt;listę moich projektów&lt;/a&gt;, żeby mieć się z czego pośmiać za parę lat, ale też z myślą, że ktoś zobaczy jak wygląda mniej więcej progres projektów i na jakim etapie można się starać o pierwszą pracę.&lt;/p&gt;

&lt;p&gt;I tak na początku pomijając jakieś śmieszne stronki na ocenę do szkoły, moim pierwszym projektem była gra &lt;a href=&quot;/moje-projekty/#kolko-krzyzyk&quot;&gt;kółko i krzyżyk&lt;/a&gt; zrobiona w HTML, CSS i Javascript. Miałem tu też pierwszą styczność z Gitem. Później w tych samych technologiach razem z kolegą zrobiliśmy kopię &lt;a href=&quot;/moje-projekty#game-of-life&quot;&gt;Game of Life&lt;/a&gt; Johna Conwaya (Ciężko to nazwać grą :D).&lt;/p&gt;

&lt;p&gt;Gdzieś w między czasie wygrałem konkurs świąteczny (100zł na książkę :D) zajmując 1 miejsce z 72 głosami (drugie miało 35), którego celem było wykonanie animacji znaków ASCII w dowolnej technologii zorganizowany przez &lt;a href=&quot;https://forum.pasja-informatyki.pl/&quot;&gt;Forum Pasja Informatyki&lt;/a&gt;. &lt;a href=&quot;/moje-projekty/#swieta-asci-art&quot;&gt;Animacja&lt;/a&gt; w HTML, CSS, Javascript wyglądała tak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swieta-asci-art.gif&quot; alt=&quot;Animacja świąteczna&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dało mi to sporo satysfakcji :D&lt;/p&gt;

&lt;p&gt;Po drodze, na potrzeby szkolne, wykonaliśmy z kolegą &lt;a href=&quot;/moje-projekty#zwierciadła-i-soczewki&quot;&gt;aplikację webową&lt;/a&gt; symulującą szkolne rysowanie obrazów w zwierciadłach i soczewkach.&lt;/p&gt;

&lt;p&gt;Następnym moim &lt;a href=&quot;/moje-projekty#jaki-jezyk-programowania&quot;&gt;projektem&lt;/a&gt;, już nieco większym, który rozwijam do dziś, była strona &lt;a href=&quot;https://jaki-jezyk-programowania.pl/&quot;&gt;jaki-jezyk-programowania.pl&lt;/a&gt;. Prace wystartowały w styczniu 2017 roku. To tu, podczas budowania strony, nauczyłem się najwięcej z technologii webowych. Poznałem Bootstrapa i jQuery. Zacząłem używać ES6 i buildować projekt z pomocą webpacka. O jakość kodu dbał mi ESLint. Nie mówiąc już ile pochłonąłem wiedzy teoretycznej na temat różnych technologii. Jest to projekt na który poświeciłem największą ilość czasu.&lt;/p&gt;

&lt;p&gt;Zacząłem pisać tego bloga dzięki inicjatywie DajSiePoznac2017 z wykorzystaniem narzędzia Jekyll - opisywałem to &lt;a href=&quot;https://devcave.pl/dajsiepoznac2017/instalacja-jekyll&quot;&gt;wcześniej&lt;/a&gt; na blogu. Był to nieco burzliwy okres, gdyż częstotliwość postów była 2 na tydzień, w między czasie rozwijałem &lt;a href=&quot;https://jaki-jezyk-programowania.pl/&quot;&gt;jaki-jezyk-programowania.pl&lt;/a&gt;. Na dodatek byłem niedługo przed maturą i poświęcałem masę czasu na naukę do rozszerzeń - matematyki i informatyki, przez to bardzo mało czasu zostawało mi na programowanie. Dosłownie katowałem się tym, a koniec końców nie udało mi się uzyskać satysfakcjonującego wyniku z matury - o tym później. Co do blogowania to było to miłe doświadczenie i chyba do tego wracam ;)&lt;/p&gt;

&lt;p&gt;Jako odskocznia od typowych projektów zacząłem tworzyć &lt;a href=&quot;/moje-projekty#remake-tank1990&quot;&gt;remake&lt;/a&gt; retro gry Battle City/Tank 1990 w Phaserze. Pewnie każdy ją kojarzy z dzieciństwa. Gra nie jest dokończona, zatrzymałem się na podstawowych elementach mechaniki gry (bez leveli, różnych czołgów i zbierania ulepszeń) by zająć się w pełnym wymiarze tym czym zacząłem się uczyć w między czasie - Javą, jej technologiami i OOP. Tworzenie gry było ciekawym doświadczeniem, myślę, że kiedyś do niej wrócę lub zabiorę się za jakąś nową.&lt;/p&gt;

&lt;p&gt;Tak więc, moim kolejnym celem była Java. W tej technologii chciałem pracować i miał to być mój główny język programowania.&lt;/p&gt;

&lt;p&gt;Zbliżały się wakacje, więc pomyślałem, że może znajdę jakieś praktyki żeby nabrać trochę doświadczenia. Niestety, mieszkam w Kielcach, gdzie jest bardzo mało ofert pracy dla programistów - tym bardziej Juniorów. O dziwo, była jedna oferta praktyk. Uradowany zaaplikowałem, jednak spóźniłem się, bo rekrutacja już się zakończyła. Zaproponowano mi, że jeśli czuję się na siłach to mogę zaaplikować na stanowisko Juniora. Dopiero zaczynałem z Javą, więc tego nie zrobiłem.&lt;/p&gt;

&lt;p&gt;Po opanowaniu podstaw Javy zabrałem się za tworzenie nowego projektu – &lt;a href=&quot;/moje-projekty#todo-list-app&quot;&gt;aplikacji&lt;/a&gt; do zarządzania “todo” listami. Coś w rodzaju Trello. Był to świetny projekt do nauki, mogłem wykorzystać większość technologii, które miałem w planach się nauczyć. I tak kolejno poznałem technologie: Servlet, JSP, JSTL, Spring, Hibernate, zarządzanie zależnościami w Maven i podstawy testowania z JUnit i Mockito. Projekt stawiałem z wykorzystaniem Tomcata.&lt;/p&gt;

&lt;p&gt;Podczas swojej nauki przeczytałem kilka książek i obejrzałem wiele tutoriali. Kindle miałem praktycznie zawsze przy sobie i jak tylko nadarzyła się okazja to się uczyłem.&lt;/p&gt;

&lt;h1 id=&quot;seria-porażek-i&quot;&gt;Seria porażek i…&lt;/h1&gt;

&lt;p&gt;W między czasie, na początku budowania aplikacji, odbywały się rekrutacje na studia. Po przeanalizowaniu +/- praca vs studia, chciałem mimo wszystko studiować, ale złożyłem aplikację na wcześniej wspomniane stanowisko tak z ciekawości, żeby zobaczyć, na czym stoję i mieć ewentualną alternatywę - jeśli udałoby się z pracą, a nie ze studiami.&lt;/p&gt;

&lt;p&gt;Pewnego dnia, miła Pani z HR zadzwoniła do mnie w odpowiedzi na aplikację. Myślałem, że rozmowę kwalifikacyjną odbędę w firmie, a przez telefon ustalimy tylko kiedy. Myliłem się :D. Pierwsza wstępna rozmowa jest przez telefon. Musiałem odpowiedzieć na szereg pytań technicznych i rozmawiać po angielsku. Stresowałem się niesamowicie, w ogóle nie spodziewałem się takiej rozmowy. Kilka pytań technicznych pomieszałem, a część anglojęzyczna poszła w miarę. Pani z HR powiedziała, że mojej wiedzy jest jeszcze trochę za mało, żeby przejść dalszy proces rekrutacji i zasugerowała spróbowanie jeszcze raz za jakiś czas, jak będę umiał więcej. Trochę mnie to przygasiło, ale niedługo potem dało kopa do dalszej pracy ;)&lt;/p&gt;

&lt;p&gt;Tak więc, moim celem było dostanie się na informatykę do Wrocławia na PWR - i tylko tam. Nie złożyłem aplikacji nigdzie indziej. Miałem ambicję na jakąś lepszą uczelnie, żeby nie iść na jakąś zapchaj dziurę i coś właściwie z niej wynieść. PWR vs AGH w Krakowie vs PW w Warszawie było optymalnym wyborem, jeśli chodzi o trudność dostania się. Również było to atrakcyjne miasto. Miałem nadzieję, ze mi się uda. Nie wiem czy to było dobre myślenie, bo niestety nie dostałem się z pierwszej rekrutacji.&lt;/p&gt;

&lt;p&gt;Po tej porażce, zacząłem na maksa poświęcać się na nauce Javy przy wspomnianej aplikacji. Skupiałem się na technologiach, które były wymagane w tej ofercie. Miałem jeszcze nadzieje na dostanie się na PWR z kolejnych rekrutacji, jednak mimo wytrwania do ostatniej - 5 (każdorazowo zdzierali ze mnie 80zł za rekrutacje), nie dostałem się. Progi dużo skoczyły w tym roku - a matura mimo włożonego trudu nie poszła najlepiej. Tak więc straciłem możliwość studiowania w tym roku.&lt;/p&gt;

&lt;p&gt;Później biłem się z myślami i mówiłem sobie, że mogłem iść gdzieś indziej, choćby PK w Krakowie. Rodzice mówili to samo, bo przecież jak to bez studiów. Może to i racja, bo studia aż tak programowania nie udoskonalają, a i tak bym sam się rozwijał na boku. Przynajmniej studia mniej wymagające zabierałyby mi mniej czasu, więc miałbym go więcej na samorozwój. No ale wybór pozostał jeden - szukanie pracy. Dobrze, że stale rozwijałem się i uczyłem bo pozostałbym z niczym. Musiałbym chyba skoczyć na budowlankę :D.&lt;/p&gt;

&lt;p&gt;Z aktualnym stackiem technologicznym, który poznałem do tej pory - przynajmniej na poziomie podstawowym, spełniałem wymagania kilku ofert pracy dla junior programistów Javy. Jednak największym moim problemem był brak komercyjnego doświadczenia, a większość firm tego wymaga nawet dla Juniorów. Sporo ofert pracy w wymaganiach miało też ukończenie szkoły wyższej. Jest to dla mnie troszeczkę ironiczne, ale stawiam ze firmy mają jakieś plusy z tego, żę biorą studentów.&lt;/p&gt;

&lt;p&gt;Postanowiłem więc, że poszukam lokalnie oraz w Krakowie, bo nie mam aż tak daleko, a to miasto jest zdecydowanie atrakcyjniejsze jeśli chodzi o pracę. Przeglądając oferty pracy natrafiłem na ofertę, na którą wcześniej aplikowałem z niepowodzeniem. Pracowałem intensywnie przez ostatnie miesiące - nadrobiłem sporo zaległości i poznałem nowe technologie, więc uznałem, że spróbuję jeszcze raz. Zgodnie z zaleceniami :D. Byłem jednak sceptycznie do tego nastawiony. Niestety była to jedyna oferta dla Juniorów w Kielcach. Oprócz jednej - która miała nieco większe wymagania. Mimo wszystko złożyłem aplikację tu i tu. Poza tym znalazłem kilka ofert w Krakowie. Również na nie zaaplikowałem.&lt;/p&gt;

&lt;p&gt;Pierwszą odpowiedź dostałem po kilku dniach - mailowo. Była to anglojęzyczna firma z Krakowa. Zostałem poproszony o wykonanie testu programistycznego - napisanie &lt;a href=&quot;https://github.com/C0deboy/X-Formation-java-developer-test&quot;&gt;aplikacji&lt;/a&gt; konsolowej do zamawiania jedzenia. Wykonałem to, ale koniec końców dostałem odpowiedź, że napisany przeze mnie program nie spełnia ich oczekiwań. Poprosiłem o feedback, żeby wiedzieć, co było nie tak i ku mojemu zdziwieniu otrzymałem dobrze opisaną listę rzeczy (nawet z linkami do książek/konferencji), nad którymi mógłbym popracować i zachęcano mnie do aplikowania po jakimś czasie.&lt;/p&gt;

&lt;p&gt;Inne firmy się nie odzywały, pewnie ze względu na brak doświadczenia i że jestem zaraz po technikum, bez studiów. Wiele firm obawia się tego, że po krótkim czasie uciekniemy od nich (choćby na studia), po tym jak oni zainwestują w nasz rozwój. Nie wiedziałem, co ze sobą zrobić. Nie mogłem się na niczym skupić, cały czas myślałem o pracy.&lt;/p&gt;

&lt;p&gt;Dopiero po 2 tygodniach dostałem telefon od firmy, do której już wcześniej aplikowałem z niepowodzeniem. Tym razem poszło mi o wiele lepiej. Zostałem zaproszony na rozmowę. Firma bardzo mi się podobała wizualnie - był to nowy budynek. Również ludzie wydawali się całkiem mili. Tam czekała mnie jednogodzinna rozmowa techniczna, po części po angielsku oraz 3 godziny na napisanie jakieś przykładowej aplikacji konsolowej. W moim przypadku była to symulacja prostego “systemu bankowego”. Zakładanie kont użytkowników (w tym admina, który zarządzał kontami). Tworzenie i przypisywanie im kont bankowych. Zapisywanie i odczytywanie tych danych z xml i jakieś proste przelewy między kontami. To tak mniej więcej. Rozmowa poszła mi bardzo dobrze. Z aplikacją było już trochę gorzej. Robiłem ją trochę chaotycznie i na stresie. Na koniec jednak, gdy musiałem wychodzić, powiedziałem co zrobiłbym tu inaczej i było wzięte to pod uwagę.&lt;/p&gt;

&lt;p&gt;Po całym procesie miałem mieszane uczucia. Nie byłem pewny czy poszło mi wystarczająco dobrze. Na odpowiedź musiałem czekać prawie 2 tygodnie i zaczynałem dostawać świra. To była moja jedyna szansa na pracę w tym momencie. Firma wydawała mi się idealna, na dodatek na miejscu, więc do wypłaty mogłem sobie doliczyć bez problemu minimum jakieś 1200 zł - ze względów na brak kosztów utrzymania się w innym mieście.&lt;/p&gt;

&lt;p&gt;W końcu, pewnego dnia zadzwonił telefon. Byłem tak ze zestresowany, że ciężko mi było mówić. Powiedzieli mi, że rozmowa poszła mi dobrze, z językiem angielskim raczej nie będę miał problemu (firma ma klientów zagranicznych), jednak napisana przeze mnie aplikacja nie była idealna. Mimo wszystko, po chwili dowiedziałem się, że DOSTAŁEM PRACE! Ulga jaką poczułem była nie do opisania. Dostałem dobrą rekomendację od programisty, z którym miałem rozmowę kwalifikacyjną, wydawałem im się na ambitną osobą i uznali, że dadzą mi szansę. W dodatku, podobno jestem pierwszą tak młodą osobą przyjętą do pracy w historii firmy. To też fajne uczucie :D&lt;/p&gt;

&lt;p&gt;Pracę zaczynam od nowego roku. Umowę mam już podpisaną. Jestem zadowolony, że mi się udało. Mam nadzieję, że przyjemnie będzie mi się tam pracowało, nabiorę sporo doświadczenia i będę to miło wspominał.&lt;/p&gt;

&lt;h1 id=&quot;podsumowanie&quot;&gt;Podsumowanie&lt;/h1&gt;

&lt;p&gt;Nie uważam, że przyszło mi to jakoś łatwo. Poświęciłem na to dużo wolnego czasu i włożyłem w to sporo wysiłku. Pracę znalazłem stosunkowo szybko, nawet w mieście takim jak Kielce, gdzie rynek dla programistów jest ubogi. Więcej trwał proces czekania na odpowiedź niż szukałem pracy.&lt;/p&gt;

&lt;p&gt;Co do studiów, to żałuję i nie żałuję. Z jednej strony fajna sprawa, z drugiej cieszę się, że mogę sobie pracować nad własnymi rzeczami i wreszcie zacznę zarabiać w swoim zawodzie, a co najważniejsze – nabierać komercyjnego doświadczenia. Jak słyszę moich znajomych jak to mają na studiach to chyba nawet bardziej jestem za tą pracą :D Oczywiście jeszcze nie jest powiedziane, że kiedyś na nie nie trafię.&lt;/p&gt;

&lt;p&gt;Może ktoś przez ten wpis zda sobie sprawę, że już pora wyjść z jaskini i zacząć się rozglądać za pierwszą pracą? Kto wie ;)&lt;/p&gt;

&lt;p&gt;Swoją drogą, planuję kiedyś zrobić wpis właśnie na temat praca vs studia ;) Powstał już post &lt;a href=&quot;https://devcave.pl/wybory-programisty/liceum-vs-technikum-co-wybrac&quot;&gt;technikum vs liceum&lt;/a&gt;, więc to będzie dobre uzupełnienie.&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="Moje-doświadczenia" /><category term="Pierwsza-praca" /><category term="Moje-doświadczenia" /><summary type="html">Minęło sporo czasu od ostatniego postu. Przez ten okres całkowicie poświęciłem się nauce Javy i jej technologii, aby jak najszybciej mieć szansę na dostanie pracy. I udało się! Chciałem się tym tutaj podzielić i przedstawić całą drogę od początku do końca. Jak zaczynałem Programowania zacząłem się uczyć (tak bardziej na poważnie, z myślą bycia programistą) gdzieś na początku 4 klasy technikum informatycznego (2016 rok). Wcześniej nie byłem jeszcze pewien, co chciałbym robić w przyszłości. Jak pewnie w większości techników, programowanie opierało się na programowaniu webowym, czyli wokół HTML, CSS i Javascript. Były to jednak takie podstawy, że praktycznie nie było możliwe napisanie czegoś konkretnego z taką wiedzą. O OOP to nawet nie słyszałem. Dlatego zacząłem interesować się tym tematem i uczyć się na własną rękę. Wtedy trafiłem na kursy M. Zelenta, które były dla mnie po prostu idealne. Ponadto, dzięki nim dostałem tyle motywacji i tak mnie zachęciły do działania, że o niczym innym już nie myślałem i to właśnie z programowaniem chciałem wiązać przyszłość (trwa to do dziś). Jednak po jakimś czasie okazało się, że wiedza wyniesiona z technikum (przynajmniej w moim wypadku) oraz częściowo z kursów okazała się stertą złych praktyk, o czym szybko się przekonałem dzięki zakładaniu wątków na Forum Pasja Informatyki z moimi projektami - pisanymi w celu nauki technologii webowych. Dzięki wielu osobom z forum, m.in. Krzycho92, argeento oraz później Comandeer i Ivan, wiele się nauczyłem i po części feedback z forum motywował mnie do dalszej pracy. Moje projekty Zrobiłem listę moich projektów, żeby mieć się z czego pośmiać za parę lat, ale też z myślą, że ktoś zobaczy jak wygląda mniej więcej progres projektów i na jakim etapie można się starać o pierwszą pracę. I tak na początku pomijając jakieś śmieszne stronki na ocenę do szkoły, moim pierwszym projektem była gra kółko i krzyżyk zrobiona w HTML, CSS i Javascript. Miałem tu też pierwszą styczność z Gitem. Później w tych samych technologiach razem z kolegą zrobiliśmy kopię Game of Life Johna Conwaya (Ciężko to nazwać grą :D). Gdzieś w między czasie wygrałem konkurs świąteczny (100zł na książkę :D) zajmując 1 miejsce z 72 głosami (drugie miało 35), którego celem było wykonanie animacji znaków ASCII w dowolnej technologii zorganizowany przez Forum Pasja Informatyki. Animacja w HTML, CSS, Javascript wyglądała tak: Dało mi to sporo satysfakcji :D Po drodze, na potrzeby szkolne, wykonaliśmy z kolegą aplikację webową symulującą szkolne rysowanie obrazów w zwierciadłach i soczewkach. Następnym moim projektem, już nieco większym, który rozwijam do dziś, była strona jaki-jezyk-programowania.pl. Prace wystartowały w styczniu 2017 roku. To tu, podczas budowania strony, nauczyłem się najwięcej z technologii webowych. Poznałem Bootstrapa i jQuery. Zacząłem używać ES6 i buildować projekt z pomocą webpacka. O jakość kodu dbał mi ESLint. Nie mówiąc już ile pochłonąłem wiedzy teoretycznej na temat różnych technologii. Jest to projekt na który poświeciłem największą ilość czasu. Zacząłem pisać tego bloga dzięki inicjatywie DajSiePoznac2017 z wykorzystaniem narzędzia Jekyll - opisywałem to wcześniej na blogu. Był to nieco burzliwy okres, gdyż częstotliwość postów była 2 na tydzień, w między czasie rozwijałem jaki-jezyk-programowania.pl. Na dodatek byłem niedługo przed maturą i poświęcałem masę czasu na naukę do rozszerzeń - matematyki i informatyki, przez to bardzo mało czasu zostawało mi na programowanie. Dosłownie katowałem się tym, a koniec końców nie udało mi się uzyskać satysfakcjonującego wyniku z matury - o tym później. Co do blogowania to było to miłe doświadczenie i chyba do tego wracam ;) Jako odskocznia od typowych projektów zacząłem tworzyć remake retro gry Battle City/Tank 1990 w Phaserze. Pewnie każdy ją kojarzy z dzieciństwa. Gra nie jest dokończona, zatrzymałem się na podstawowych elementach mechaniki gry (bez leveli, różnych czołgów i zbierania ulepszeń) by zająć się w pełnym wymiarze tym czym zacząłem się uczyć w między czasie - Javą, jej technologiami i OOP. Tworzenie gry było ciekawym doświadczeniem, myślę, że kiedyś do niej wrócę lub zabiorę się za jakąś nową. Tak więc, moim kolejnym celem była Java. W tej technologii chciałem pracować i miał to być mój główny język programowania. Zbliżały się wakacje, więc pomyślałem, że może znajdę jakieś praktyki żeby nabrać trochę doświadczenia. Niestety, mieszkam w Kielcach, gdzie jest bardzo mało ofert pracy dla programistów - tym bardziej Juniorów. O dziwo, była jedna oferta praktyk. Uradowany zaaplikowałem, jednak spóźniłem się, bo rekrutacja już się zakończyła. Zaproponowano mi, że jeśli czuję się na siłach to mogę zaaplikować na stanowisko Juniora. Dopiero zaczynałem z Javą, więc tego nie zrobiłem. Po opanowaniu podstaw Javy zabrałem się za tworzenie nowego projektu – aplikacji do zarządzania “todo” listami. Coś w rodzaju Trello. Był to świetny projekt do nauki, mogłem wykorzystać większość technologii, które miałem w planach się nauczyć. I tak kolejno poznałem technologie: Servlet, JSP, JSTL, Spring, Hibernate, zarządzanie zależnościami w Maven i podstawy testowania z JUnit i Mockito. Projekt stawiałem z wykorzystaniem Tomcata. Podczas swojej nauki przeczytałem kilka książek i obejrzałem wiele tutoriali. Kindle miałem praktycznie zawsze przy sobie i jak tylko nadarzyła się okazja to się uczyłem. Seria porażek i… W między czasie, na początku budowania aplikacji, odbywały się rekrutacje na studia. Po przeanalizowaniu +/- praca vs studia, chciałem mimo wszystko studiować, ale złożyłem aplikację na wcześniej wspomniane stanowisko tak z ciekawości, żeby zobaczyć, na czym stoję i mieć ewentualną alternatywę - jeśli udałoby się z pracą, a nie ze studiami. Pewnego dnia, miła Pani z HR zadzwoniła do mnie w odpowiedzi na aplikację. Myślałem, że rozmowę kwalifikacyjną odbędę w firmie, a przez telefon ustalimy tylko kiedy. Myliłem się :D. Pierwsza wstępna rozmowa jest przez telefon. Musiałem odpowiedzieć na szereg pytań technicznych i rozmawiać po angielsku. Stresowałem się niesamowicie, w ogóle nie spodziewałem się takiej rozmowy. Kilka pytań technicznych pomieszałem, a część anglojęzyczna poszła w miarę. Pani z HR powiedziała, że mojej wiedzy jest jeszcze trochę za mało, żeby przejść dalszy proces rekrutacji i zasugerowała spróbowanie jeszcze raz za jakiś czas, jak będę umiał więcej. Trochę mnie to przygasiło, ale niedługo potem dało kopa do dalszej pracy ;) Tak więc, moim celem było dostanie się na informatykę do Wrocławia na PWR - i tylko tam. Nie złożyłem aplikacji nigdzie indziej. Miałem ambicję na jakąś lepszą uczelnie, żeby nie iść na jakąś zapchaj dziurę i coś właściwie z niej wynieść. PWR vs AGH w Krakowie vs PW w Warszawie było optymalnym wyborem, jeśli chodzi o trudność dostania się. Również było to atrakcyjne miasto. Miałem nadzieję, ze mi się uda. Nie wiem czy to było dobre myślenie, bo niestety nie dostałem się z pierwszej rekrutacji. Po tej porażce, zacząłem na maksa poświęcać się na nauce Javy przy wspomnianej aplikacji. Skupiałem się na technologiach, które były wymagane w tej ofercie. Miałem jeszcze nadzieje na dostanie się na PWR z kolejnych rekrutacji, jednak mimo wytrwania do ostatniej - 5 (każdorazowo zdzierali ze mnie 80zł za rekrutacje), nie dostałem się. Progi dużo skoczyły w tym roku - a matura mimo włożonego trudu nie poszła najlepiej. Tak więc straciłem możliwość studiowania w tym roku. Później biłem się z myślami i mówiłem sobie, że mogłem iść gdzieś indziej, choćby PK w Krakowie. Rodzice mówili to samo, bo przecież jak to bez studiów. Może to i racja, bo studia aż tak programowania nie udoskonalają, a i tak bym sam się rozwijał na boku. Przynajmniej studia mniej wymagające zabierałyby mi mniej czasu, więc miałbym go więcej na samorozwój. No ale wybór pozostał jeden - szukanie pracy. Dobrze, że stale rozwijałem się i uczyłem bo pozostałbym z niczym. Musiałbym chyba skoczyć na budowlankę :D. Z aktualnym stackiem technologicznym, który poznałem do tej pory - przynajmniej na poziomie podstawowym, spełniałem wymagania kilku ofert pracy dla junior programistów Javy. Jednak największym moim problemem był brak komercyjnego doświadczenia, a większość firm tego wymaga nawet dla Juniorów. Sporo ofert pracy w wymaganiach miało też ukończenie szkoły wyższej. Jest to dla mnie troszeczkę ironiczne, ale stawiam ze firmy mają jakieś plusy z tego, żę biorą studentów. Postanowiłem więc, że poszukam lokalnie oraz w Krakowie, bo nie mam aż tak daleko, a to miasto jest zdecydowanie atrakcyjniejsze jeśli chodzi o pracę. Przeglądając oferty pracy natrafiłem na ofertę, na którą wcześniej aplikowałem z niepowodzeniem. Pracowałem intensywnie przez ostatnie miesiące - nadrobiłem sporo zaległości i poznałem nowe technologie, więc uznałem, że spróbuję jeszcze raz. Zgodnie z zaleceniami :D. Byłem jednak sceptycznie do tego nastawiony. Niestety była to jedyna oferta dla Juniorów w Kielcach. Oprócz jednej - która miała nieco większe wymagania. Mimo wszystko złożyłem aplikację tu i tu. Poza tym znalazłem kilka ofert w Krakowie. Również na nie zaaplikowałem. Pierwszą odpowiedź dostałem po kilku dniach - mailowo. Była to anglojęzyczna firma z Krakowa. Zostałem poproszony o wykonanie testu programistycznego - napisanie aplikacji konsolowej do zamawiania jedzenia. Wykonałem to, ale koniec końców dostałem odpowiedź, że napisany przeze mnie program nie spełnia ich oczekiwań. Poprosiłem o feedback, żeby wiedzieć, co było nie tak i ku mojemu zdziwieniu otrzymałem dobrze opisaną listę rzeczy (nawet z linkami do książek/konferencji), nad którymi mógłbym popracować i zachęcano mnie do aplikowania po jakimś czasie. Inne firmy się nie odzywały, pewnie ze względu na brak doświadczenia i że jestem zaraz po technikum, bez studiów. Wiele firm obawia się tego, że po krótkim czasie uciekniemy od nich (choćby na studia), po tym jak oni zainwestują w nasz rozwój. Nie wiedziałem, co ze sobą zrobić. Nie mogłem się na niczym skupić, cały czas myślałem o pracy. Dopiero po 2 tygodniach dostałem telefon od firmy, do której już wcześniej aplikowałem z niepowodzeniem. Tym razem poszło mi o wiele lepiej. Zostałem zaproszony na rozmowę. Firma bardzo mi się podobała wizualnie - był to nowy budynek. Również ludzie wydawali się całkiem mili. Tam czekała mnie jednogodzinna rozmowa techniczna, po części po angielsku oraz 3 godziny na napisanie jakieś przykładowej aplikacji konsolowej. W moim przypadku była to symulacja prostego “systemu bankowego”. Zakładanie kont użytkowników (w tym admina, który zarządzał kontami). Tworzenie i przypisywanie im kont bankowych. Zapisywanie i odczytywanie tych danych z xml i jakieś proste przelewy między kontami. To tak mniej więcej. Rozmowa poszła mi bardzo dobrze. Z aplikacją było już trochę gorzej. Robiłem ją trochę chaotycznie i na stresie. Na koniec jednak, gdy musiałem wychodzić, powiedziałem co zrobiłbym tu inaczej i było wzięte to pod uwagę. Po całym procesie miałem mieszane uczucia. Nie byłem pewny czy poszło mi wystarczająco dobrze. Na odpowiedź musiałem czekać prawie 2 tygodnie i zaczynałem dostawać świra. To była moja jedyna szansa na pracę w tym momencie. Firma wydawała mi się idealna, na dodatek na miejscu, więc do wypłaty mogłem sobie doliczyć bez problemu minimum jakieś 1200 zł - ze względów na brak kosztów utrzymania się w innym mieście. W końcu, pewnego dnia zadzwonił telefon. Byłem tak ze zestresowany, że ciężko mi było mówić. Powiedzieli mi, że rozmowa poszła mi dobrze, z językiem angielskim raczej nie będę miał problemu (firma ma klientów zagranicznych), jednak napisana przeze mnie aplikacja nie była idealna. Mimo wszystko, po chwili dowiedziałem się, że DOSTAŁEM PRACE! Ulga jaką poczułem była nie do opisania. Dostałem dobrą rekomendację od programisty, z którym miałem rozmowę kwalifikacyjną, wydawałem im się na ambitną osobą i uznali, że dadzą mi szansę. W dodatku, podobno jestem pierwszą tak młodą osobą przyjętą do pracy w historii firmy. To też fajne uczucie :D Pracę zaczynam od nowego roku. Umowę mam już podpisaną. Jestem zadowolony, że mi się udało. Mam nadzieję, że przyjemnie będzie mi się tam pracowało, nabiorę sporo doświadczenia i będę to miło wspominał. Podsumowanie Nie uważam, że przyszło mi to jakoś łatwo. Poświęciłem na to dużo wolnego czasu i włożyłem w to sporo wysiłku. Pracę znalazłem stosunkowo szybko, nawet w mieście takim jak Kielce, gdzie rynek dla programistów jest ubogi. Więcej trwał proces czekania na odpowiedź niż szukałem pracy. Co do studiów, to żałuję i nie żałuję. Z jednej strony fajna sprawa, z drugiej cieszę się, że mogę sobie pracować nad własnymi rzeczami i wreszcie zacznę zarabiać w swoim zawodzie, a co najważniejsze – nabierać komercyjnego doświadczenia. Jak słyszę moich znajomych jak to mają na studiach to chyba nawet bardziej jestem za tą pracą :D Oczywiście jeszcze nie jest powiedziane, że kiedyś na nie nie trafię. Może ktoś przez ten wpis zda sobie sprawę, że już pora wyjść z jaskini i zacząć się rozglądać za pierwszą pracą? Kto wie ;) Swoją drogą, planuję kiedyś zrobić wpis właśnie na temat praca vs studia ;) Powstał już post technikum vs liceum, więc to będzie dobre uzupełnienie.</summary></entry><entry><title type="html">Podsumowanie DSP2017</title><link href="https://devcave.pl/dajsiepoznac2017/podsumowanie-dsp2017" rel="alternate" type="text/html" title="Podsumowanie DSP2017" /><published>2017-05-30T02:12:00+02:00</published><updated>2017-05-30T02:12:00+02:00</updated><id>https://devcave.pl/dajsiepoznac2017/podsumowanie-dsp2017</id><content type="html" xml:base="https://devcave.pl/dajsiepoznac2017/podsumowanie-dsp2017">&lt;p&gt;Cieszę się, że dotrwałem do samego końca. Konkurs DSP2017 był dla mnie miłym doświadczeniem, dzięki niemu dowiedziałem się jak to jest blogować i śmiało mogę powiedziecie, że nie jest to łatwa sprawa, tym bardziej, jeśli mówimy o regularnym blogowaniu. Wymaga to wiele naszego wkładu, wysiłku i czasu. W moim przypadku było jeszcze gorzej, bo akurat w okresie trwania konkursu tego ostatniego miałem najmniej, co było dodatkowym utrudnieniem. Ciekawy jestem ile z tych prawie 1000 osób dotrwało do końca.&lt;/p&gt;

&lt;p&gt;Blogowanie samo w sobie nawet mi się podobało, ale fakt, że moja wiedza o programowaniu jest niewielka i nie mam zbyt wiele ciekawych doświadczeń w programistycznym życiu, z których mogłoby powstawać wpisy, powodowało, że pisałem trochę na siłę. Blogowanie o tworzeniu samego projektu nie wydaje mi się ciekawym tematem.&lt;/p&gt;

&lt;p&gt;Jednak pomaga to ułożyć w naszej głowie zdobywaną wiedzę, lepiej zrozumieć dany temat oraz łatwiej go zapamiętać. Ponadto jest to też magazyn naszej wiedzy, można łatwo do tego wrócić, co jest dodatkowym plusem. Ba, samo pisanie jest nauką. Więc na pewno na tym nic nie straciłem, wszystko na plus!&lt;/p&gt;

&lt;p&gt;Nie wiem czy będę dalej prowadził tego bloga, w chwili obecnej zapowiadają się dosyć pracowite wakacje. Może wrócę do tego, gdy nabiorę więcej doświadczenia, którym będę mógł się dzielić w postaci wpisów. Zobaczymy.&lt;/p&gt;

&lt;h3 id=&quot;podsumowując&quot;&gt;Podsumowując&lt;/h3&gt;

&lt;p&gt;Cieszę się, że zdecydowałem się wziąć udział w konkursie i że dotrwałem do końca. Była to fajna inicjatywa, która pokazała mi nieco świat blogowania. Nie zmieniło to jednak nic, jeśli chodzi o pokazywanie się w Internecie. Nie “dałem się poznać”, odzew był praktycznie zerowy, więc ta idea jest nieco koloryzowana. Pewnie wielu z Was ma takie odczucie. Jest to ciężkie zadanie. Podobnie ma się sprawa z proszeniem o pomoc przy projekcie, szukanie chętnych do współpracy czy zwykły code review. Jeśli któreś z wyżej wymienionych uda nam się osiągnąć, to powinniśmy być naprawdę wdzięczni, bo wydaję mi się, że nie jest to takie proste, na jakie się wydaje.&lt;/p&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><summary type="html">Cieszę się, że dotrwałem do samego końca. Konkurs DSP2017 był dla mnie miłym doświadczeniem, dzięki niemu dowiedziałem się jak to jest blogować i śmiało mogę powiedziecie, że nie jest to łatwa sprawa, tym bardziej, jeśli mówimy o regularnym blogowaniu. Wymaga to wiele naszego wkładu, wysiłku i czasu. W moim przypadku było jeszcze gorzej, bo akurat w okresie trwania konkursu tego ostatniego miałem najmniej, co było dodatkowym utrudnieniem. Ciekawy jestem ile z tych prawie 1000 osób dotrwało do końca. Blogowanie samo w sobie nawet mi się podobało, ale fakt, że moja wiedza o programowaniu jest niewielka i nie mam zbyt wiele ciekawych doświadczeń w programistycznym życiu, z których mogłoby powstawać wpisy, powodowało, że pisałem trochę na siłę. Blogowanie o tworzeniu samego projektu nie wydaje mi się ciekawym tematem. Jednak pomaga to ułożyć w naszej głowie zdobywaną wiedzę, lepiej zrozumieć dany temat oraz łatwiej go zapamiętać. Ponadto jest to też magazyn naszej wiedzy, można łatwo do tego wrócić, co jest dodatkowym plusem. Ba, samo pisanie jest nauką. Więc na pewno na tym nic nie straciłem, wszystko na plus! Nie wiem czy będę dalej prowadził tego bloga, w chwili obecnej zapowiadają się dosyć pracowite wakacje. Może wrócę do tego, gdy nabiorę więcej doświadczenia, którym będę mógł się dzielić w postaci wpisów. Zobaczymy. Podsumowując Cieszę się, że zdecydowałem się wziąć udział w konkursie i że dotrwałem do końca. Była to fajna inicjatywa, która pokazała mi nieco świat blogowania. Nie zmieniło to jednak nic, jeśli chodzi o pokazywanie się w Internecie. Nie “dałem się poznać”, odzew był praktycznie zerowy, więc ta idea jest nieco koloryzowana. Pewnie wielu z Was ma takie odczucie. Jest to ciężkie zadanie. Podobnie ma się sprawa z proszeniem o pomoc przy projekcie, szukanie chętnych do współpracy czy zwykły code review. Jeśli któreś z wyżej wymienionych uda nam się osiągnąć, to powinniśmy być naprawdę wdzięczni, bo wydaję mi się, że nie jest to takie proste, na jakie się wydaje.</summary></entry><entry><title type="html">Git - usuwanie pliku z repozytorium</title><link href="https://devcave.pl/dajsiepoznac2017/git-usuwanie-pliku-z-repozytorium" rel="alternate" type="text/html" title="Git - usuwanie pliku z repozytorium" /><published>2017-05-24T02:12:00+02:00</published><updated>2017-05-24T02:12:00+02:00</updated><id>https://devcave.pl/dajsiepoznac2017/git-usuwanie-pliku-z-repozytorium</id><content type="html" xml:base="https://devcave.pl/dajsiepoznac2017/git-usuwanie-pliku-z-repozytorium">&lt;p&gt;Komu nie zdarzyło się chociaż raz przez pomyłkę / nieuwagę / niewiedzę wrzucić wrażliwy plik do repozytorium? Jeśli tobie, to zazdroszczę. Jednak nie wszystko stracone! Można się go pozbyć.&lt;/p&gt;

&lt;h1&gt;BFG Repo-Cleaner&lt;/h1&gt;
&lt;p&gt;Z pomocą przychodzi &lt;a href=&quot;https://rtyley.github.io/bfg-repo-cleaner/&quot;&gt;BFG&lt;/a&gt;! Pobieramy go z oficjalnej strony i kilkoma poleceniami pozbędziemy się niechcianego pliku z repozytorium Git-a:&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Zakładam, że pobrany plik jest na pulpicie.&lt;/u&gt;
Otwieramy konsolę i przechodzimy na pulpit:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Desktop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Następnie musimy sklonować nasze repozytorium:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone &lt;span class=&quot;nt&quot;&gt;--mirror&lt;/span&gt; https://github.com/Nazwa-użytkownika/nazwa-repozytorium&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;note&quot;&gt;
Jeśli używasz GitHub Desktop - dodaj ścieżkę do cmd git-a do zmiennej systemowej Path, aby móc korzystać z gita także w terminalu. Powinna wyglądać mniej więcej tak: &lt;span class=&quot;path&quot;&gt;C:\Users\Nazwa-użytkownika\AppData\Local\GitHub\PortableGit_(id)\cmd&lt;/span&gt;. Zmienne systemowe znajdziesz w &lt;span class=&quot;path&quot;&gt;Panel sterowania -&amp;gt; System i zabezpieczenia -&amp;gt; System -&amp;gt; Zaawansowane ustawienia systemu -&amp;gt; Zmienne środowiskowe -&amp;gt; Zmienne Systemowe&lt;/span&gt;. &lt;u&gt;Pamiętaj o średniku przed wklejeniem ścieżki&lt;/u&gt;.
&lt;/p&gt;

&lt;p&gt;Jak pewnie zauważyłeś, jest to plik jar, więc do jego uruchomienia będzie potrzebna nam Java.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;
Jeśli nie masz &lt;a href=&quot;https://www.java.com/pl/download/&quot;&gt;Javy&lt;/a&gt;, zaopatrz się w nią! Jeśli nie chcesz za każdym razem podawać pełnej ścieżki (domyślnie: &lt;span class=&quot;path&quot;&gt;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Java\jdk1.7.0\bin&lt;/span&gt;) do plików wykonywalnych Javy, dodaj ją również do [Path](https://www.java.com/pl/download/help/path.xml).
&lt;/p&gt;

&lt;p&gt;Uruchamiamy go z flagą –delete-files oraz nazwą pliku(&lt;u&gt;nie ścieżka&lt;/u&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; bfg-wersja.jar &lt;span class=&quot;nt&quot;&gt;--delete-files&lt;/span&gt; nazwa-pliku.x&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Następnie przechodzimy do sklonowanego repozytorium&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;nazwa-repozytorium.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I uruchamiamy komendę:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reflog expire &lt;span class=&quot;nt&quot;&gt;--expire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;now &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git gc &lt;span class=&quot;nt&quot;&gt;--prune&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;now &lt;span class=&quot;nt&quot;&gt;--aggressive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Gdy nie było po drodze żadnych błędów i jesteśmy zadowoleni z wyniku, możemy pushować ;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git push&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><category term="Git" /><summary type="html">Komu nie zdarzyło się chociaż raz przez pomyłkę / nieuwagę / niewiedzę wrzucić wrażliwy plik do repozytorium? Jeśli tobie, to zazdroszczę. Jednak nie wszystko stracone! Można się go pozbyć. BFG Repo-Cleaner Z pomocą przychodzi BFG! Pobieramy go z oficjalnej strony i kilkoma poleceniami pozbędziemy się niechcianego pliku z repozytorium Git-a: Zakładam, że pobrany plik jest na pulpicie. Otwieramy konsolę i przechodzimy na pulpit: cd Desktop Następnie musimy sklonować nasze repozytorium: git clone --mirror https://github.com/Nazwa-użytkownika/nazwa-repozytorium Jeśli używasz GitHub Desktop - dodaj ścieżkę do cmd git-a do zmiennej systemowej Path, aby móc korzystać z gita także w terminalu. Powinna wyglądać mniej więcej tak: C:\Users\Nazwa-użytkownika\AppData\Local\GitHub\PortableGit_(id)\cmd. Zmienne systemowe znajdziesz w Panel sterowania -&amp;gt; System i zabezpieczenia -&amp;gt; System -&amp;gt; Zaawansowane ustawienia systemu -&amp;gt; Zmienne środowiskowe -&amp;gt; Zmienne Systemowe. Pamiętaj o średniku przed wklejeniem ścieżki. Jak pewnie zauważyłeś, jest to plik jar, więc do jego uruchomienia będzie potrzebna nam Java. Jeśli nie masz Javy, zaopatrz się w nią! Jeśli nie chcesz za każdym razem podawać pełnej ścieżki (domyślnie: C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Java\jdk1.7.0\bin) do plików wykonywalnych Javy, dodaj ją również do [Path](https://www.java.com/pl/download/help/path.xml). Uruchamiamy go z flagą –delete-files oraz nazwą pliku(nie ścieżka) java -jar bfg-wersja.jar --delete-files nazwa-pliku.x Następnie przechodzimy do sklonowanego repozytorium cd nazwa-repozytorium.git I uruchamiamy komendę: git reflog expire --expire=now --all &amp;amp;&amp;amp; git gc --prune=now --aggressive Gdy nie było po drodze żadnych błędów i jesteśmy zadowoleni z wyniku, możemy pushować ;) git push</summary></entry><entry><title type="html">Webpack - zarządzanie modułami</title><link href="https://devcave.pl/dajsiepoznac2017/webpack-dzielimy-kod-na-moduly" rel="alternate" type="text/html" title="Webpack - zarządzanie modułami" /><published>2017-05-22T02:12:00+02:00</published><updated>2017-05-22T02:12:00+02:00</updated><id>https://devcave.pl/dajsiepoznac2017/webpack-dzielimy-kod-na-moduly</id><content type="html" xml:base="https://devcave.pl/dajsiepoznac2017/webpack-dzielimy-kod-na-moduly">&lt;p&gt;Dzielenie kodu na moduły pozwala odseparować niezwiązane ze sobą części, co wpływa na porządek w projekcie. Gdy pracujemy z danym elementem strony nie chcemy przecież przekopywać się przez masę innych niezwiązanych ze sobą funkcji w celu znalezienia tego, czego szukamy. No dobrze, podzielimy nasz kod, np. na 15 plików JS i 10 plików CSS, ale czy to oznacza, że teraz powinniśmy załączyć 15 tagów &amp;#60;script&amp;#62; i 10 tagów &amp;#60;link&amp;#62; w pliku HTML? Oczywiście, że nie! Duża ilość osobno podpiętych plików znacząco wpływa na wydajność ładowania naszej aplikacji, gdyż każdy plik to osobne żądanie HTTP. Tu z pomocą przychodzi nam Webpack.&lt;/p&gt;

&lt;h1 id=&quot;webpack&quot;&gt;Webpack&lt;/h1&gt;

&lt;p&gt;Webpack - jest to narzędzie, które pozwoli nam spiąć wszystkie nasze moduły w jeden plik, tzw. bundle. Dzięki temu później będziemy mogli załączyć na stronę pojedynczy plik, co jest dużo bardziej wydajnym rozwiązaniem. Ponadto, Webpack może dla nas zoptymalizować wielkość plików czy nawet przetranspilować kod ES6 używając Babel i wiele więcej. Wszystko dzięki dodatkowym loaderom i pluginom.&lt;/p&gt;

&lt;h2 id=&quot;instalacja&quot;&gt;Instalacja&lt;/h2&gt;

&lt;p&gt;Webpack dodajemy do naszych dev-zależności poleceniem:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install webpack &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;konfiguracja&quot;&gt;Konfiguracja&lt;/h2&gt;

&lt;p&gt;Konfiguracja Webpacka przechowywana jest domyślnie w pliku &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt;, a jej podstawowa wersja wygląda tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/main.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/start.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[name].bundle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hx&gt;Gdzie:&lt;/hx&gt;
&lt;ul&gt;
  &lt;li&gt;entry - para nazwa - ścieżka, gdzie podajemy nazwę oraz wskazujemy plik, który łączy moduły.&lt;/li&gt;
  &lt;li&gt;path - folder, do którego będą trafiać nasze paczki.&lt;/li&gt;
  &lt;li&gt;filename - nazwa paczki, która powstanie z nazwy w entry i “.bundle.js”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lączenie-plików&quot;&gt;Lączenie plików&lt;/h2&gt;

&lt;p&gt;Aby Webpack wiedział jakie pliki ma połączyć, musimy to podać w plikach zadeklarowanych w entry. Służy do tego metoda:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'scieżka'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Dla przykładu:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./nav.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./laptop.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./typing.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./startBtn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;note&quot;&gt;
Zamiast scieżki można też podać nazwę pakietu zainstalowanego przez npm, tak jak w przykładzie: &lt;code class=&quot;highlight language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;h2 id=&quot;webpack--babel&quot;&gt;Webpack + Babel&lt;/h2&gt;

&lt;p&gt;Teraz pozostało dla ułatwienia stworzyć sobie skrypt, który będzie uruchamiał webpacka. W tym celu do pliku &lt;span class=&quot;file&quot;&gt;package.json&lt;/span&gt; dodajemy  linię:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;i teraz możemy stworzyć nasze pliki polecenim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm run build&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aby stworzyć zoptymalizowaną wersję, musimy do skryptu przekazać parametr -p. Parametry do skryptów poprzedzamy –, a więc w ten sposób:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm run build &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;warning&quot;&gt;
Jeżeli używasz ES6, to operacja ta nie powiedzie się, gdyż optymalizacja nie działa z ES6. Problem ten rozwiąże Babel.
&lt;/p&gt;

&lt;p&gt;Babel transpiluje kod ES6 na zrozumiały dla starszych przeglądarek. Standardowo instalujemy go za pomocą npm:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install babel-loader babel-core babel-preset-es2015 &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ponadto musimy dodać go do konfiguracji w &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'es2015'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;

&lt;p&gt;Pliki JS mamy z głowy, ale co z CSS? Do nich musimy pobrać kolejny loader, gdyż Webpack domyślnie wspiera tylko JS. A więc:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install css-loader style-loader &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Następnie dodajemy loadery oraz plik CSS do &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/home/main.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./css/main.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'es2015'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pliki możemy łączyć standardowo za pomocą funkcji @import, np. plik &lt;span class=&quot;file&quot;&gt;main.css&lt;/span&gt; może wyglądać tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('./home/plik1.css')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('./home/plik2.css')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('./home/plik3.css')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*itd.*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Jednak Webpack nie łączy tą metoda wszystkich importów w jeden plik. Dodaje go inline do DOM, co ma kilka wad. Wydajność jest lepsza tylko dla małych ilości CSS. Uniemożliwia to ładowanie naszych plików CSS do cache przeglądarki, bo poprostu ich nie ma! Wtedy, za każdym odświeżeniem strony wszystko musi być załadowane od nowa, co w przypadku dużych ilości styli nie jest zbyt optymalne. Rozwiązaniem jest plugin ExtractTextPlugin, dzięki któremu połączymy pliki CSS w jeden i będziemy go mogli tradycyjnie załączyć w HTML. Instalacja:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install extract-text-webpack-plugin &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Następnie w pliku &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt; dodajemy stałą:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'extract-text-webpack-plugin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oraz podmieniamy loadery CSS i definiujemy nowy plugin:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./[name].bundle.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Teraz, dzięki Webpackowi, możemy dzielić do woli pliki JS i CSS, a ostatecznie załączymy ich tzw. bundle.&lt;/p&gt;

&lt;p class=&quot;warning&quot;&gt;
Jeśli w twoich plikach, które łączysz, wystepują importy czcionek (np. w Bootstrap) Webpack wyrzuci błędy. Można to rozwiązać z pomocą &lt;a href=&quot;https://github.com/webpack-contrib/url-loader&quot;&gt;url-loader&lt;/a&gt;, &lt;u&gt;jednak warto je pominąć&lt;/u&gt;, gdyż często załączane jest kilka formatów (woff, woff2, eot, ttf). Url-loader przetworzyłby je wszystkie, co skutkowałoby ogromnym plikiem CSS. Normalnie, przeglądarka wybiera tylko jeden odpowiedni, a resztę pomija. Dlatego lepiej skorzystać z opcji dla css-loader, która wyłącza przetwarzanie @import url(), ale normalnie działa z @import:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Będziemy musieli wtedy inaczej łączyć pliki CSS (bez url()), np:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'./home/plik1.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'./home/plik2.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'./home/plik3.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*itd.*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;edit&quot;&gt;EDIT:&lt;/h2&gt;

&lt;p class=&quot;warning&quot;&gt;Okazuje się, że jeśli z podaną konfiguracją używamy kilka &quot;entries&quot; na raz (zarówno pliki JS jak i CSS) powstają duplikaty dla plików CSS w wersji JS. Aby to obejść musimy nieco zmienić konfigurację &lt;span class=&quot;file&quot;&gt;webpack.config.js&lt;/span&gt; :
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'extract-text-webpack-plugin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'home.bundle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/home/main.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'home.bundle.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./css/home/merge.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'faq.bundle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./js/faq.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[name]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'es2015'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;fallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./[name]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><category term="Javascript" /><summary type="html">Dzielenie kodu na moduły pozwala odseparować niezwiązane ze sobą części, co wpływa na porządek w projekcie. Gdy pracujemy z danym elementem strony nie chcemy przecież przekopywać się przez masę innych niezwiązanych ze sobą funkcji w celu znalezienia tego, czego szukamy. No dobrze, podzielimy nasz kod, np. na 15 plików JS i 10 plików CSS, ale czy to oznacza, że teraz powinniśmy załączyć 15 tagów &amp;#60;script&amp;#62; i 10 tagów &amp;#60;link&amp;#62; w pliku HTML? Oczywiście, że nie! Duża ilość osobno podpiętych plików znacząco wpływa na wydajność ładowania naszej aplikacji, gdyż każdy plik to osobne żądanie HTTP. Tu z pomocą przychodzi nam Webpack. Webpack Webpack - jest to narzędzie, które pozwoli nam spiąć wszystkie nasze moduły w jeden plik, tzw. bundle. Dzięki temu później będziemy mogli załączyć na stronę pojedynczy plik, co jest dużo bardziej wydajnym rozwiązaniem. Ponadto, Webpack może dla nas zoptymalizować wielkość plików czy nawet przetranspilować kod ES6 używając Babel i wiele więcej. Wszystko dzięki dodatkowym loaderom i pluginom. Instalacja Webpack dodajemy do naszych dev-zależności poleceniem: npm install webpack --save-dev Konfiguracja Konfiguracja Webpacka przechowywana jest domyślnie w pliku webpack.config.js, a jej podstawowa wersja wygląda tak: const path = require('path'); module.exports = { entry: { home: './js/main.js', start: './js/start.js', }, output: { path: path.join(__dirname, 'dist'), filename: '[name].bundle.js', }, }; Gdzie: entry - para nazwa - ścieżka, gdzie podajemy nazwę oraz wskazujemy plik, który łączy moduły. path - folder, do którego będą trafiać nasze paczki. filename - nazwa paczki, która powstanie z nazwy w entry i “.bundle.js” Lączenie plików Aby Webpack wiedział jakie pliki ma połączyć, musimy to podać w plikach zadeklarowanych w entry. Służy do tego metoda: require('scieżka'); Dla przykładu: require('jquery'); require('./nav.js'); require('./laptop.js'); require('./typing.js'); require('./startBtn'); Zamiast scieżki można też podać nazwę pakietu zainstalowanego przez npm, tak jak w przykładzie: require('jquery'); Webpack + Babel Teraz pozostało dla ułatwienia stworzyć sobie skrypt, który będzie uruchamiał webpacka. W tym celu do pliku package.json dodajemy linię: //... &quot;scripts&quot;: { //... &quot;build&quot;: &quot;webpack&quot;, }, //... i teraz możemy stworzyć nasze pliki polecenim: npm run build Aby stworzyć zoptymalizowaną wersję, musimy do skryptu przekazać parametr -p. Parametry do skryptów poprzedzamy –, a więc w ten sposób: npm run build -- -p Jeżeli używasz ES6, to operacja ta nie powiedzie się, gdyż optymalizacja nie działa z ES6. Problem ten rozwiąże Babel. Babel transpiluje kod ES6 na zrozumiały dla starszych przeglądarek. Standardowo instalujemy go za pomocą npm: npm install babel-loader babel-core babel-preset-es2015 --save-dev Ponadto musimy dodać go do konfiguracji w webpack.config.js //... module: { loaders: [ { test: /\.js$/, loader: 'babel-loader', query: { presets: ['es2015', { modules: false }], }, }, ], }, CSS Pliki JS mamy z głowy, ale co z CSS? Do nich musimy pobrać kolejny loader, gdyż Webpack domyślnie wspiera tylko JS. A więc: npm install css-loader style-loader --save-dev Następnie dodajemy loadery oraz plik CSS do webpack.config.js: entry: { home: './js/home/main.js', global: './css/main.css', }, //... module: { loaders: [ { test: /\.js$/, loader: 'babel-loader', query: { presets: ['es2015', { modules: false }], }, }, { test: /\.css$/, use: ['style-loader', 'css-loader'], }, ], }, Pliki możemy łączyć standardowo za pomocą funkcji @import, np. plik main.css może wyglądać tak: @import url('./home/plik1.css'); @import url('./home/plik2.css'); @import url('./home/plik3.css'); /*itd.*/ Jednak Webpack nie łączy tą metoda wszystkich importów w jeden plik. Dodaje go inline do DOM, co ma kilka wad. Wydajność jest lepsza tylko dla małych ilości CSS. Uniemożliwia to ładowanie naszych plików CSS do cache przeglądarki, bo poprostu ich nie ma! Wtedy, za każdym odświeżeniem strony wszystko musi być załadowane od nowa, co w przypadku dużych ilości styli nie jest zbyt optymalne. Rozwiązaniem jest plugin ExtractTextPlugin, dzięki któremu połączymy pliki CSS w jeden i będziemy go mogli tradycyjnie załączyć w HTML. Instalacja: npm install extract-text-webpack-plugin --save-dev Następnie w pliku webpack.config.js dodajemy stałą: const ExtractTextPlugin = require('extract-text-webpack-plugin'); Oraz podmieniamy loadery CSS i definiujemy nowy plugin: //... loaders: [ //... { test: /\.css$/, use: ExtractTextPlugin.extract({ fallback: 'style-loader', use: 'css-loader', }), }, ], plugins: [ new ExtractTextPlugin('./[name].bundle.css'), ], Teraz, dzięki Webpackowi, możemy dzielić do woli pliki JS i CSS, a ostatecznie załączymy ich tzw. bundle. Jeśli w twoich plikach, które łączysz, wystepują importy czcionek (np. w Bootstrap) Webpack wyrzuci błędy. Można to rozwiązać z pomocą url-loader, jednak warto je pominąć, gdyż często załączane jest kilka formatów (woff, woff2, eot, ttf). Url-loader przetworzyłby je wszystkie, co skutkowałoby ogromnym plikiem CSS. Normalnie, przeglądarka wybiera tylko jeden odpowiedni, a resztę pomija. Dlatego lepiej skorzystać z opcji dla css-loader, która wyłącza przetwarzanie @import url(), ale normalnie działa z @import: //... { test: /\.css$/, use: ExtractTextPlugin.extract({ fallback: 'style-loader', use: { loader: 'css-loader', options: { url: false, }, }, }), }, Będziemy musieli wtedy inaczej łączyć pliki CSS (bez url()), np: @import './home/plik1.css'; @import './home/plik2.css'; @import './home/plik3.css'; /*itd.*/ EDIT: Okazuje się, że jeśli z podaną konfiguracją używamy kilka &quot;entries&quot; na raz (zarówno pliki JS jak i CSS) powstają duplikaty dla plików CSS w wersji JS. Aby to obejść musimy nieco zmienić konfigurację webpack.config.js : const path = require('path'); const ExtractTextPlugin = require('extract-text-webpack-plugin'); module.exports = { entry: { 'home.bundle.js': './js/home/main.js', 'home.bundle.css': './css/home/merge.css', 'faq.bundle.js': './js/faq.js', }, output: { path: path.join(__dirname, 'dist'), filename: '[name]', }, module: { loaders: [ { test: /\.js$/, loader: 'babel-loader', { modules: false }, query: { presets: ['es2015'], }, }, { test: /\.css$/, use: ExtractTextPlugin.extract({ fallback: 'style-loader', use: 'css-loader', }), }, ], }, plugins: [ new ExtractTextPlugin('./[name]'), ], };</summary></entry><entry><title type="html">NPM i ESLint</title><link href="https://devcave.pl/dajsiepoznac2017/npm-zaleznosci-i-ESLint" rel="alternate" type="text/html" title="NPM i ESLint" /><published>2017-05-20T02:12:00+02:00</published><updated>2017-05-20T02:12:00+02:00</updated><id>https://devcave.pl/dajsiepoznac2017/npm-zaleznosci-i-ESLint</id><content type="html" xml:base="https://devcave.pl/dajsiepoznac2017/npm-zaleznosci-i-ESLint">&lt;p&gt;Przyszła kolej zająć się strukturą plików, zależnościami oraz zadbać o spójność kodu.&lt;/p&gt;

&lt;h1 id=&quot;npm&quot;&gt;NPM&lt;/h1&gt;

&lt;p&gt;NPM - to menadżer pakietów, który pomoże nam opisać projekt i zdefiniować zależności, których wymaga. Od tego momentu pozbędę się wszystkich zewnętrznych bibliotek z repozytorium na Gicie, bo nie powinno ich tam być. Teraz będzie znajdował się tam sam projekt, a dzięki NPM, wszystkie zależności, które są zdefiniowane w pliku &lt;span class=&quot;file&quot;&gt;package.json&lt;/span&gt; będą mogły być zainstalowane jedną prostą komendą:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oczywiście najpierw musimy mieć NPM, ale instalacja jest banalnie prosta. Ja zainstalowałem &lt;a href=&quot;&quot;&gt;Node.js&lt;/a&gt;, gdzie NPM jest dołączony.&lt;/p&gt;

&lt;h1 id=&quot;definiowanie-zależności&quot;&gt;Definiowanie zależności&lt;/h1&gt;

&lt;p&gt;Aby utworzyć plik &lt;span class=&quot;file&quot;&gt;package.json&lt;/span&gt; dla naszego projektu, możemy posłużyć się poleceniem:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;które na podstawie kilku pytań wygeneruje go dla nas automatycznie.&lt;/p&gt;

&lt;p&gt;Następnie, aby pobrać nasze zależności i je dołączyć do pliku &lt;span class=&quot;file&quot;&gt;package.json&lt;/span&gt; wykonujemy polecenie:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install nazwa-pakietu &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;gdy paczki są niezbędne do uruchamiania środowiska/aplikacji (np. JQuery, Bootstrap), lub&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install nazwa-pakietu &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;gdy paczka niezbędna jest do rozwijania i testowania aplikacji (np. ESLint).&lt;/p&gt;

&lt;p&gt;Wszystkie nasz paczki  trafiaja do folderu &lt;span class=&quot;folder&quot;&gt;node_modules&lt;/span&gt;. Znajdziemy tam też całą masę innych zależności, które są wymagane przez nasze zależności, więc nie powinniśmy się przestraszyć ilością podfolderów w nim zawartych. Nasze paczki znajdziemy po tej samej nazwie, którą wywołaliśmy do instalacji, a interesujące nas pliki zazwyczaj w podfolderze &lt;span class=&quot;folder&quot;&gt;dist&lt;/span&gt;. Dla przykładu, w HTML załączamy je w ten sposób:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Head --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;node_modules/bootstrap/dist/css/libs/bootstrap.min.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Body --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;node_modules/jquery/dist/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;node_modules/bootstrap/dist/js/bootstrap.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;eslint&quot;&gt;ESLint&lt;/h1&gt;

&lt;p&gt;ESLint - jest to narzędzie, które dba o to, aby nasz styl kodu JS był zgodny z wcześniej zdefiniowanymi standardami. Wszystko za sprawą reguł, które możemy definiować też sami. Np. jeśli zadeklarujemy regułę, że po każdym if ma się znaleźć klamra ({), to ESLint dopilnuje, aby ta reguła była przez nas przestrzegana i wskaże nam miejsce, gdzie popełniliśmy błąd. Dzięki temu nasz kod będzie spójny i czysty.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;idea&quot;&gt;Można też użyć gotowych popularnych styli jak np. styl Google czy airbnb. Osobiście używam ten od airbnb.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Instalujemy ESLint i dodajemy do zależności, ale z parametrem -dev, gdyż to potrzebne jest tylko nam - developerom.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install eslint &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;konfiguracja&quot;&gt;Konfiguracja&lt;/h2&gt;
&lt;p&gt;Potrzebny będzie nam plik konfiguracyjny &lt;span class=&quot;file&quot;&gt;.eslintrc.json &lt;/span&gt;. Możemy automatycznie go wygenerować za pomocą polecenia:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;node_modules\.bin\eslint --init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;i odpowiedzi na kilka pytań. Teraz możemy dodać skrypt NPM dla ESlinta, który będziemy mogli uruchamiać w terminalu.&lt;/p&gt;

&lt;p&gt;W naszym pliku powinien się znajdować już jeden skrypt (jeśli zostawiliśmy pytanie “test command” puste):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
},&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Możemy edytować ten lub dodać nowy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&quot;scripts&quot;: {
    &quot;lint&quot;: &quot;eslint js/*.js&quot;
},&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dzięki temu skryptowi będziemy mogli w konsoli uruchomić polecenie:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm run lint&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Które sprawdzi dla nas wszystkie pliki JS w folderze &lt;span class=&quot;folder&quot;&gt;js&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Jednak używanie ESLint w konsoli nie jest zbyt szczęśliwe, gdyż musimy ręcznie odszukiwać błędy. Dlatego dobrym rozwiązaniem jest aktywować go w naszym IDE, jeśli wspiera taką opcję. Ja używam tego od JetBrains i na szczęście jest taka opcja, co znacznie ułatwia pracę.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;
Jeśli używasz PHPStorm lub WebStorm to znajdziesz taką opcję w: File | Settings | Languages and Frameworks | JavaScript | Code Quality Tools | ESLint
&lt;/p&gt;

&lt;p class=&quot;idea&quot;&gt;
Jeśli ESLint zgłasza błedy z elementów Jquery(np. $), DOM(np. document) dodaj do pliku &lt;span class=&quot;file&quot;&gt;.eslintrc.json &lt;/span&gt;
informację:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  &quot;env&quot;: {
    &quot;browser&quot;: true,
    &quot;jquery&quot;: true
  },&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><category term="Javascript" /><summary type="html">Przyszła kolej zająć się strukturą plików, zależnościami oraz zadbać o spójność kodu. NPM NPM - to menadżer pakietów, który pomoże nam opisać projekt i zdefiniować zależności, których wymaga. Od tego momentu pozbędę się wszystkich zewnętrznych bibliotek z repozytorium na Gicie, bo nie powinno ich tam być. Teraz będzie znajdował się tam sam projekt, a dzięki NPM, wszystkie zależności, które są zdefiniowane w pliku package.json będą mogły być zainstalowane jedną prostą komendą: npm install Oczywiście najpierw musimy mieć NPM, ale instalacja jest banalnie prosta. Ja zainstalowałem Node.js, gdzie NPM jest dołączony. Definiowanie zależności Aby utworzyć plik package.json dla naszego projektu, możemy posłużyć się poleceniem: npm init które na podstawie kilku pytań wygeneruje go dla nas automatycznie. Następnie, aby pobrać nasze zależności i je dołączyć do pliku package.json wykonujemy polecenie: npm install nazwa-pakietu --save gdy paczki są niezbędne do uruchamiania środowiska/aplikacji (np. JQuery, Bootstrap), lub npm install nazwa-pakietu --save-dev gdy paczka niezbędna jest do rozwijania i testowania aplikacji (np. ESLint). Wszystkie nasz paczki trafiaja do folderu node_modules. Znajdziemy tam też całą masę innych zależności, które są wymagane przez nasze zależności, więc nie powinniśmy się przestraszyć ilością podfolderów w nim zawartych. Nasze paczki znajdziemy po tej samej nazwie, którą wywołaliśmy do instalacji, a interesujące nas pliki zazwyczaj w podfolderze dist. Dla przykładu, w HTML załączamy je w ten sposób: &amp;lt;!-- Head --&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;node_modules/bootstrap/dist/css/libs/bootstrap.min.css&quot;&amp;gt; &amp;lt;!-- Body --&amp;gt; &amp;lt;script src=&quot;node_modules/jquery/dist/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&quot;node_modules/bootstrap/dist/js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; ESLint ESLint - jest to narzędzie, które dba o to, aby nasz styl kodu JS był zgodny z wcześniej zdefiniowanymi standardami. Wszystko za sprawą reguł, które możemy definiować też sami. Np. jeśli zadeklarujemy regułę, że po każdym if ma się znaleźć klamra ({), to ESLint dopilnuje, aby ta reguła była przez nas przestrzegana i wskaże nam miejsce, gdzie popełniliśmy błąd. Dzięki temu nasz kod będzie spójny i czysty. Można też użyć gotowych popularnych styli jak np. styl Google czy airbnb. Osobiście używam ten od airbnb. Instalujemy ESLint i dodajemy do zależności, ale z parametrem -dev, gdyż to potrzebne jest tylko nam - developerom. npm install eslint --save-dev Konfiguracja Potrzebny będzie nam plik konfiguracyjny .eslintrc.json . Możemy automatycznie go wygenerować za pomocą polecenia: node_modules\.bin\eslint --init i odpowiedzi na kilka pytań. Teraz możemy dodać skrypt NPM dla ESlinta, który będziemy mogli uruchamiać w terminalu. W naszym pliku powinien się znajdować już jeden skrypt (jeśli zostawiliśmy pytanie “test command” puste): &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot; }, Możemy edytować ten lub dodać nowy: &quot;scripts&quot;: { &quot;lint&quot;: &quot;eslint js/*.js&quot; }, Dzięki temu skryptowi będziemy mogli w konsoli uruchomić polecenie: npm run lint Które sprawdzi dla nas wszystkie pliki JS w folderze js. Jednak używanie ESLint w konsoli nie jest zbyt szczęśliwe, gdyż musimy ręcznie odszukiwać błędy. Dlatego dobrym rozwiązaniem jest aktywować go w naszym IDE, jeśli wspiera taką opcję. Ja używam tego od JetBrains i na szczęście jest taka opcja, co znacznie ułatwia pracę. Jeśli używasz PHPStorm lub WebStorm to znajdziesz taką opcję w: File | Settings | Languages and Frameworks | JavaScript | Code Quality Tools | ESLint Jeśli ESLint zgłasza błedy z elementów Jquery(np. $), DOM(np. document) dodaj do pliku .eslintrc.json informację: &quot;env&quot;: { &quot;browser&quot;: true, &quot;jquery&quot;: true },</summary></entry><entry><title type="html">Dodajemy formularz kontaktowy 5#</title><link href="https://devcave.pl/dajsiepoznac2017/formularz-kontaktowy-refaktoryzacja" rel="alternate" type="text/html" title="Dodajemy formularz kontaktowy 5#" /><published>2017-05-18T02:12:00+02:00</published><updated>2017-05-18T02:12:00+02:00</updated><id>https://devcave.pl/dajsiepoznac2017/formularz-kontaktowy-refaktoryzacja</id><content type="html" xml:base="https://devcave.pl/dajsiepoznac2017/formularz-kontaktowy-refaktoryzacja">&lt;p&gt;&lt;u&gt;W tym poście opisuję refaktoryzację naszego wcześniejszego formularza.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;Jeśli trafiłeś tu bezpośrednio, zajrzyj do &lt;a href=&quot;https://devcave.pl/dajsiepoznac2017/formularz-kontaktowy-HTML-JS&quot;&gt;pierwszego postu&lt;/a&gt;, gdzie opisuję założenia i tworzę podstawową strukturę formularza.&lt;/p&gt;

&lt;hX&gt;Wpisy w tej serii:&lt;/hX&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcave.pl/dajsiepoznac2017/formularz-kontaktowy-HTML-JS&quot;&gt;HTML + otwieranie / zamykanie JQuery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcave.pl/dajsiepoznac2017/formularz-kontaktowy-walidacja-ajax&quot;&gt;Walidacja HTML5/JS + AJAX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcave.pl/dajsiepoznac2017/formularz-kontaktowy-php-swiftmailer&quot;&gt;Walidacja PHP + Swiftmailer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcave.pl/dajsiepoznac2017/formularz-kontaktowy-dostepnosc&quot;&gt;Dostępność formularza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcave.pl/dajsiepoznac2017/formularz-kontaktowy-refaktoryzacja&quot;&gt;Zrefaktoryzowana wersja + Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;zmiany&quot;&gt;Zmiany&lt;/h1&gt;

&lt;p&gt;Refaktoryzacja objęła zarówno stronę frontendową, jak i backendową. Kod jest teraz bardziej uniwersalny, łatwiejszy do modyfikacji. Stworzyłem dla niego również osobne &lt;a href=&quot;https://github.com/C0deboy/Email-form&quot;&gt;repozytorium&lt;/a&gt; na GitHubie, gdzie znajdziesz najaktualniejszą wersję.&lt;/p&gt;

&lt;h1 id=&quot;javascript&quot;&gt;Javascript&lt;/h1&gt;

&lt;p&gt;Pobieranie oraz walidacja danych przebiega teraz automatycznie. Aby dodać nowe pole do formularza wystarczy dorzucić label wraz z inputem, który musi mieć klasę form-data. Wymagany jest też atrybut name. Opcjonalnie możemy dodać reguły walidacji HTML, które zostaną sprawdzone, czyli, np. min/maxlenght, required itd. Kompletne pole wygląda tak:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-live=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;polite&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Test
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-data&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minlength=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxlength=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;78&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Działa to w następujący sposób:&lt;/p&gt;

&lt;p&gt;Elementy są pobierane automatycznie pętlą i tworzą obiekt JSON:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.form-data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dzięki temu możemy w wygodny sposób operować na naszych elementach z wykorzystaniem pętli.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;
Używam tu anonimowych funkcji strzałkowych ( () =&amp;gt; {} ), jest to składnia ES6. Są odpowiednikiem funkcji anonimowej w tradycyjnym zapisie: function () {}
&lt;/p&gt;

&lt;p&gt;Nasze komunikaty o błędach teraz przechowywane są w jednym obiekcie JSON, aby można było je łatwiej modyfikować, a co najważniejsze, tylko w jednym miejscu. Dodatkowo posługuję się funkcjami strzałkowymi, które w czytelny sposób budują komunikat ze zmiennych podanych w ich parametrach.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'tooShort'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pole &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; musi zawierać co najmniej &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; znaki!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'tooLong'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pole &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; może zawierać co najwyżej &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; znaków!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'empty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pole &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; nie może być puste!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pole &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; jest niepoprawne!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'errorsInForm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;W formularzu występują błędy!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Potwierdź, że nie jesteś robotem!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mniejsza zmiana dotknęła zamykania formularza, gdzie teraz wszystkie pola są czyszczone przez pętlę, a nie ręcznie:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;oraz również wartości inputów do wysłania pobierane są pętlą (z wyjątkiem recaptcha):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'g-recaptcha-response'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grecaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Większa zmiana dotknęła też walidacji. Teraz sprawdzane jest każde pole osobno i komunikaty o błędach pojawią się pod każdym z nich. Nie tylko jeden pod przyciskiem “Wyślij”, tak jak było to wcześniej. Tam teraz pojawia się tylko ogólna informacja o (nie)powodzeniu wysłania wiadomości.&lt;/p&gt;

&lt;p&gt;Wszystkie błędy, które przyjdą od strony PHP w postaci JSON, oznaczane są automatycznie z pomocą pętli:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;sendEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;formAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'errorsInForm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Podobnie wygląda walidacja po stronie JS. Tu każde pole jest sprawdzane za pomocą HTML5 validation API dla określonych reguł oraz generowane są wcześniej utworzone przez nas komunikaty.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validateEmailForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valueMissing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'empty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tooShort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'minlength'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tooShort'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tooLong&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'maxlength'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tooLong'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeMismatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formDataElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grecaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	    &lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Zmianie uległa także nasza funkcja oznaczająca niepoprawne pola. Teraz tworzy i dodaje komunikat pod niepoprawnym polem.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;markWrongInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wrongInput'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wrongInput'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessageEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wrongInput'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;wrongElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clearErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I jak widać, odseparowałem funkcję do czyszczenia błędów, która jest uruchamiana, gdy pole uzyska focus:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clearErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wrongInput'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;formAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Osobno na callbacku od recaptchy musiałem podpiąć dla niej focus (tabindex wymagany), co aktywuje funkcję czyszczącą komunikat (clearErrors):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--...--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;g-recaptcha&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tabindex=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-sitekey=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6LevbxMUAAAAAIa8dsrFNJn0S_b_t5K8INV4z2JD&quot;&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;data-callback=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RecaptchaClearMsg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--...--&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RecaptchaClearMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.g-recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;php&quot;&gt;PHP&lt;/h1&gt;

&lt;p&gt;Tu też sporo zmian. Podpiąłem &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composera&lt;/a&gt; do zarządzania zależnościami. Do walidacji stworzona jest funkcja korzystająca z zewnętrznego narzędzia do walidacji danych: &lt;a href=&quot;https://github.com/Respect/Validation&quot;&gt;Respect Validation&lt;/a&gt;. Błędy przechowywane są teraz w tablicy, a email zostanie wysłany tylko wtedy, gdy będzie pusta:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateContactForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'userEmail'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'subject'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$validationMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'validationMessages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rules&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;/** @var $validator Validator */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NestedValidationException&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$validationMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validateReCaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'g-recaptcha-response'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'recaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Potwierdź, że nie jesteś robotem!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plik konfiguracyjny &lt;span class=&quot;file&quot;&gt;settings.php&lt;/span&gt; został wzbogacony o treści komunikatów, które są podmieniane z tymi z RespectValidation:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'reCaptcha'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'mailer'&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'host'&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'port'&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'username'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'validationMessages'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'stringType'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Musi być typu string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'length'&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Musi zawierać od  do  znaków'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Niepoprawny email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'notEmpty'&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Pole nie może być puste'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'NotSent'&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Coś poszło nie tak :('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'Sent'&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Wysłano! Dzięki za wiadomość'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Cały kod został również podzielony na osobne funkcje, z drobnymi modyfikacjami:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateReCaptcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://www.google.com/recaptcha/api/siteverify?'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'reCaptcha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'response'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file_get_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'success'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_Mailer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mailer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_SmtpTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'port'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_Mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_Message&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mailer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Swift_Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'subject'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'text/plain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'userEmail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReplyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'userEmail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$mailer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mailer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prepareMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A obsługa wysłania formularza znajduję się w osobnym pliku &lt;span class=&quot;file&quot;&gt;ajaxsend.php&lt;/span&gt;:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/functions.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validateContactForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;http_response_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'errors'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;http_response_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'status'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'validationMessages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;http_response_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'status'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/settings.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'validationMessages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'NotSent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Całość prezentuję się w następujący sposób:&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/C0deboy/Lmjmmyfc/embed/result,js,html,css/dark/&quot;&gt;&lt;/script&gt;</content><author><name>Codeboy</name></author><category term="DajSiePoznac2017" /><category term="DajSiePoznac2017" /><category term="Formularz-kontaktowy" /><summary type="html">W tym poście opisuję refaktoryzację naszego wcześniejszego formularza. Jeśli trafiłeś tu bezpośrednio, zajrzyj do pierwszego postu, gdzie opisuję założenia i tworzę podstawową strukturę formularza. Wpisy w tej serii: HTML + otwieranie / zamykanie JQuery Walidacja HTML5/JS + AJAX Walidacja PHP + Swiftmailer Dostępność formularza Zrefaktoryzowana wersja + Github Zmiany Refaktoryzacja objęła zarówno stronę frontendową, jak i backendową. Kod jest teraz bardziej uniwersalny, łatwiejszy do modyfikacji. Stworzyłem dla niego również osobne repozytorium na GitHubie, gdzie znajdziesz najaktualniejszą wersję. Javascript Pobieranie oraz walidacja danych przebiega teraz automatycznie. Aby dodać nowe pole do formularza wystarczy dorzucić label wraz z inputem, który musi mieć klasę form-data. Wymagany jest też atrybut name. Opcjonalnie możemy dodać reguły walidacji HTML, które zostaną sprawdzone, czyli, np. min/maxlenght, required itd. Kompletne pole wygląda tak: &amp;lt;label aria-live=&quot;polite&quot;&amp;gt; Test &amp;lt;input class=&quot;form-data&quot; name=&quot;test&quot; placeholder=&quot;Test&quot; minlength=&quot;4&quot; maxlength=&quot;78&quot; required&amp;gt; &amp;lt;/label&amp;gt; Działa to w następujący sposób: Elementy są pobierane automatycznie pętlą i tworzą obiekt JSON: const formDataElements = {}; const inputs = document.querySelectorAll('.form-data'); inputs.forEach((el) =&amp;gt; { formDataElements[el.getAttribute('name')] = el; }); Dzięki temu możemy w wygodny sposób operować na naszych elementach z wykorzystaniem pętli. Używam tu anonimowych funkcji strzałkowych ( () =&amp;gt; {} ), jest to składnia ES6. Są odpowiednikiem funkcji anonimowej w tradycyjnym zapisie: function () {} Nasze komunikaty o błędach teraz przechowywane są w jednym obiekcie JSON, aby można było je łatwiej modyfikować, a co najważniejsze, tylko w jednym miejscu. Dodatkowo posługuję się funkcjami strzałkowymi, które w czytelny sposób budują komunikat ze zmiennych podanych w ich parametrach. const customErrors = { 'tooShort': (fieldName, min) =&amp;gt; &quot;Pole &quot; + fieldName + &quot; musi zawierać co najmniej &quot; + min + &quot; znaki!&quot;, 'tooLong': (fieldName, max) =&amp;gt; &quot;Pole &quot; + fieldName + &quot; może zawierać co najwyżej &quot; + max + &quot; znaków!&quot;, 'empty': (fieldName) =&amp;gt; &quot;Pole &quot; + fieldName + &quot; nie może być puste!&quot;, 'type': (fieldName) =&amp;gt; &quot;Pole &quot; + fieldName + &quot; jest niepoprawne!&quot;, 'errorsInForm': &quot;W formularzu występują błędy!&quot;, 'recaptcha': &quot;Potwierdź, że nie jesteś robotem!&quot;, }; Mniejsza zmiana dotknęła zamykania formularza, gdzie teraz wszystkie pola są czyszczone przez pętlę, a nie ręcznie: for (const input in formDataElements) { formDataElements[input].value = ''; } oraz również wartości inputów do wysłania pobierane są pętlą (z wyjątkiem recaptcha): const formData = { 'g-recaptcha-response': grecaptcha.getResponse(), }; for (const el in formDataElements) { formData[el] = formDataElements[el].value; } Większa zmiana dotknęła też walidacji. Teraz sprawdzane jest każde pole osobno i komunikaty o błędach pojawią się pod każdym z nich. Nie tylko jeden pod przyciskiem “Wyślij”, tak jak było to wcześniej. Tam teraz pojawia się tylko ogólna informacja o (nie)powodzeniu wysłania wiadomości. Wszystkie błędy, które przyjdą od strony PHP w postaci JSON, oznaczane są automatycznie z pomocą pętli: sendEmail.fail(function (error) { for (var el in error.responseJSON.errors) { if (el === 'recaptcha') { markWrongInput(recaptcha, error.responseJSON.errors[el]); } else { markWrongInput(formDataElements[el], error.responseJSON.errors[el]); } } formAlert.innerHTML = customErrors['errorsInForm']; }); Podobnie wygląda walidacja po stronie JS. Tu każde pole jest sprawdzane za pomocą HTML5 validation API dla określonych reguł oraz generowane są wcześniej utworzone przez nas komunikaty. function validateEmailForm() { let valid = true; for (const el in formDataElements) { const fieldName = formDataElements[el].parentElement.innerText; if (formDataElements[el].validity.valueMissing === true) { markWrongInput(formDataElements[el], customErrors['empty'](fieldName)); } else if (formDataElements[el].validity.tooShort === true) { const min = formDataElements[el].getAttribute('minlength'); markWrongInput(formDataElements[el], customErrors['tooShort'](fieldName, min)); } else if (formDataElements[el].validity.tooLong === true) { const max = formDataElements[el].getAttribute('maxlength'); markWrongInput(formDataElements[el], customErrors['tooLong'](fieldName, max)); } else if (formDataElements[el].validity.typeMismatch === true) { markWrongInput(formDataElements[el], customErrors['type'](fieldName)); } if (formDataElements[el].validity.valid === false) { valid = false; } } if (grecaptcha.getResponse().length === 0) { markWrongInput(recaptcha, customErrors['recaptcha']); valid = false; } return valid; } Zmianie uległa także nasza funkcja oznaczająca niepoprawne pola. Teraz tworzy i dodaje komunikat pod niepoprawnym polem. function markWrongInput(wrongElement, alert) { if (wrongElement.classList.contains('wrongInput')) { return; } const errorMessageEl = document.createElement('p'); errorMessageEl.classList.add(&quot;error&quot;); errorMessageEl.classList.add('wrongInput'); errorMessageEl.textContent = alert; wrongElement.parentElement.append(errorMessageEl); wrongElement.classList.add('wrongInput'); wrongElement.addEventListener(&quot;focus&quot;, clearErrors); } I jak widać, odseparowałem funkcję do czyszczenia błędów, która jest uruchamiana, gdy pole uzyska focus: function clearErrors() { this.classList.remove('wrongInput'); this.parentElement.removeChild(this.parentElement.getElementsByClassName('error')[0]); formAlert.innerHTML = ''; } Osobno na callbacku od recaptchy musiałem podpiąć dla niej focus (tabindex wymagany), co aktywuje funkcję czyszczącą komunikat (clearErrors): &amp;lt;!--...--&amp;gt; &amp;lt;div class=&quot;g-recaptcha&quot; tabindex=&quot;-1&quot; data-sitekey=&quot;6LevbxMUAAAAAIa8dsrFNJn0S_b_t5K8INV4z2JD&quot; data-callback=&quot;RecaptchaClearMsg&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!--...--&amp;gt; function RecaptchaClearMsg() { document.querySelector('.g-recaptcha').focus(); } PHP Tu też sporo zmian. Podpiąłem Composera do zarządzania zależnościami. Do walidacji stworzona jest funkcja korzystająca z zewnętrznego narzędzia do walidacji danych: Respect Validation. Błędy przechowywane są teraz w tablicy, a email zostanie wysłany tylko wtedy, gdy będzie pusta: function validateContactForm(array $form): array { $errors = []; $rules = [ 'userEmail' =&amp;gt; (new Validator())-&amp;gt;addRules([new NotEmpty(), new Email()]), 'subject' =&amp;gt; (new Validator())-&amp;gt;addRules([new NotEmpty(), new StringType(), new Length(4, 78)]), 'message' =&amp;gt; (new Validator())-&amp;gt;addRules([new NotEmpty(), new StringType(), new Length(8, 6000)]), ]; $validationMessages = (require_once __DIR__ . '/settings.php')['validationMessages']; foreach ($rules as $key =&amp;gt; $validator) { /** @var $validator Validator */ try { $validator-&amp;gt;setName($key)-&amp;gt;assert($form[$key] ?? null); } catch (NestedValidationException $exception) { $exception-&amp;gt;findMessages($validationMessages); $errors[$key] = $exception-&amp;gt;getMessages(); } } if (validateReCaptcha($form['g-recaptcha-response'] ?? '') === false) { $errors['recaptcha'][] = &quot;Potwierdź, że nie jesteś robotem!&quot;; } return $errors; } Plik konfiguracyjny settings.php został wzbogacony o treści komunikatów, które są podmieniane z tymi z RespectValidation: return [ 'reCaptcha' =&amp;gt; [ 'secret' =&amp;gt; '', ], 'mailer' =&amp;gt; [ 'host' =&amp;gt; '', 'port' =&amp;gt; '', 'username' =&amp;gt; '', 'password' =&amp;gt; '', 'email' =&amp;gt; '', ], 'validationMessages' =&amp;gt; [ 'stringType'=&amp;gt; 'Musi być typu string', 'length' =&amp;gt; 'Musi zawierać od do znaków', 'email' =&amp;gt; 'Niepoprawny email', 'notEmpty' =&amp;gt; 'Pole nie może być puste', 'NotSent' =&amp;gt; 'Coś poszło nie tak :(', 'Sent' =&amp;gt; 'Wysłano! Dzięki za wiadomość' ], ]; Cały kod został również podzielony na osobne funkcje, z drobnymi modyfikacjami: function validateReCaptcha(string $code): bool { $url = 'https://www.google.com/recaptcha/api/siteverify?' . http_build_query([ 'secret' =&amp;gt; (require __DIR__ . '/settings.php')['reCaptcha']['secret'], 'response' =&amp;gt; $code, ]); $content = file_get_contents($url); $response = json_decode($content, true); return $response['success']; } function getMailer(): Swift_Mailer { $config = (require __DIR__ . '/settings.php')['mailer']; $transport = new Swift_SmtpTransport($config['host'], $config['port']); $transport-&amp;gt;setUsername($config['username']); $transport-&amp;gt;setPassword($config['password']); return new Swift_Mailer($transport); } function prepareMail(array $params): Swift_Message { $config = (require __DIR__ . '/settings.php')['mailer']; $mail = new Swift_Message( $params['subject'], $params['message'], 'text/plain', 'UTF-8' ); $mail-&amp;gt;setFrom($params['userEmail']); $mail-&amp;gt;setReplyTo($params['userEmail']); $mail-&amp;gt;setTo($config['email']); return $mail; } function sendMail(array $params): bool { $mailer = getMailer(); return $mailer-&amp;gt;send(prepareMail($params)); } A obsługa wysłania formularza znajduję się w osobnym pliku ajaxsend.php: require_once __DIR__ . '/functions.php'; if ($errors = validateContactForm($_POST)) { http_response_code(400); header('Content-Type: application/json'); echo json_encode(['errors' =&amp;gt; $errors]); } else { if (sendMail($_POST)) { http_response_code(200); echo json_encode(['status' =&amp;gt; (require __DIR__ . '/settings.php')['validationMessages']['Sent']]); } else { http_response_code(500); echo json_encode(['status' =&amp;gt; (require __DIR__ . '/settings.php')['validationMessages']['NotSent']]); } } Całość prezentuję się w następujący sposób:</summary></entry></feed>